
VRma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004814  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004948  08004948  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004948  08004948  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004948  08004948  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  0800495c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  0800495c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a617  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d8  00000000  00000000  0002a64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0002c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a961  00000000  00000000  0002ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ed1  00000000  00000000  000477a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a042d  00000000  00000000  00051672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a98  00000000  00000000  000f1af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048b8 	.word	0x080048b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080048b8 	.word	0x080048b8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 fa19 	bl	800165c <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 f979 	bl	8001528 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 fde0 	bl	8000e04 <__aeabi_dsub>
 8000244:	f001 f970 	bl	8001528 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dadd>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	464f      	mov	r7, r9
 800025c:	46d6      	mov	lr, sl
 800025e:	4646      	mov	r6, r8
 8000260:	000d      	movs	r5, r1
 8000262:	0001      	movs	r1, r0
 8000264:	0018      	movs	r0, r3
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0017      	movs	r7, r2
 800026a:	032b      	lsls	r3, r5, #12
 800026c:	0a5a      	lsrs	r2, r3, #9
 800026e:	0f4b      	lsrs	r3, r1, #29
 8000270:	4313      	orrs	r3, r2
 8000272:	00ca      	lsls	r2, r1, #3
 8000274:	4691      	mov	r9, r2
 8000276:	0302      	lsls	r2, r0, #12
 8000278:	006e      	lsls	r6, r5, #1
 800027a:	0041      	lsls	r1, r0, #1
 800027c:	0a52      	lsrs	r2, r2, #9
 800027e:	0fec      	lsrs	r4, r5, #31
 8000280:	0f7d      	lsrs	r5, r7, #29
 8000282:	4315      	orrs	r5, r2
 8000284:	0d76      	lsrs	r6, r6, #21
 8000286:	0d49      	lsrs	r1, r1, #21
 8000288:	0fc0      	lsrs	r0, r0, #31
 800028a:	4682      	mov	sl, r0
 800028c:	46ac      	mov	ip, r5
 800028e:	00ff      	lsls	r7, r7, #3
 8000290:	1a72      	subs	r2, r6, r1
 8000292:	4284      	cmp	r4, r0
 8000294:	d100      	bne.n	8000298 <__aeabi_dadd+0x40>
 8000296:	e098      	b.n	80003ca <__aeabi_dadd+0x172>
 8000298:	2a00      	cmp	r2, #0
 800029a:	dc00      	bgt.n	800029e <__aeabi_dadd+0x46>
 800029c:	e081      	b.n	80003a2 <__aeabi_dadd+0x14a>
 800029e:	2900      	cmp	r1, #0
 80002a0:	d100      	bne.n	80002a4 <__aeabi_dadd+0x4c>
 80002a2:	e0b6      	b.n	8000412 <__aeabi_dadd+0x1ba>
 80002a4:	49c9      	ldr	r1, [pc, #804]	; (80005cc <__aeabi_dadd+0x374>)
 80002a6:	428e      	cmp	r6, r1
 80002a8:	d100      	bne.n	80002ac <__aeabi_dadd+0x54>
 80002aa:	e172      	b.n	8000592 <__aeabi_dadd+0x33a>
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	0028      	movs	r0, r5
 80002b0:	0409      	lsls	r1, r1, #16
 80002b2:	4308      	orrs	r0, r1
 80002b4:	4684      	mov	ip, r0
 80002b6:	2a38      	cmp	r2, #56	; 0x38
 80002b8:	dd00      	ble.n	80002bc <__aeabi_dadd+0x64>
 80002ba:	e15e      	b.n	800057a <__aeabi_dadd+0x322>
 80002bc:	2a1f      	cmp	r2, #31
 80002be:	dd00      	ble.n	80002c2 <__aeabi_dadd+0x6a>
 80002c0:	e1ee      	b.n	80006a0 <__aeabi_dadd+0x448>
 80002c2:	2020      	movs	r0, #32
 80002c4:	0039      	movs	r1, r7
 80002c6:	4665      	mov	r5, ip
 80002c8:	1a80      	subs	r0, r0, r2
 80002ca:	4087      	lsls	r7, r0
 80002cc:	40d1      	lsrs	r1, r2
 80002ce:	4085      	lsls	r5, r0
 80002d0:	430d      	orrs	r5, r1
 80002d2:	0039      	movs	r1, r7
 80002d4:	1e4f      	subs	r7, r1, #1
 80002d6:	41b9      	sbcs	r1, r7
 80002d8:	4667      	mov	r7, ip
 80002da:	40d7      	lsrs	r7, r2
 80002dc:	4329      	orrs	r1, r5
 80002de:	1bdb      	subs	r3, r3, r7
 80002e0:	464a      	mov	r2, r9
 80002e2:	1a55      	subs	r5, r2, r1
 80002e4:	45a9      	cmp	r9, r5
 80002e6:	4189      	sbcs	r1, r1
 80002e8:	4249      	negs	r1, r1
 80002ea:	1a5b      	subs	r3, r3, r1
 80002ec:	4698      	mov	r8, r3
 80002ee:	4643      	mov	r3, r8
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	d400      	bmi.n	80002f6 <__aeabi_dadd+0x9e>
 80002f4:	e0cc      	b.n	8000490 <__aeabi_dadd+0x238>
 80002f6:	4643      	mov	r3, r8
 80002f8:	025b      	lsls	r3, r3, #9
 80002fa:	0a5b      	lsrs	r3, r3, #9
 80002fc:	4698      	mov	r8, r3
 80002fe:	4643      	mov	r3, r8
 8000300:	2b00      	cmp	r3, #0
 8000302:	d100      	bne.n	8000306 <__aeabi_dadd+0xae>
 8000304:	e12c      	b.n	8000560 <__aeabi_dadd+0x308>
 8000306:	4640      	mov	r0, r8
 8000308:	f001 f9b2 	bl	8001670 <__clzsi2>
 800030c:	0001      	movs	r1, r0
 800030e:	3908      	subs	r1, #8
 8000310:	2220      	movs	r2, #32
 8000312:	0028      	movs	r0, r5
 8000314:	4643      	mov	r3, r8
 8000316:	1a52      	subs	r2, r2, r1
 8000318:	408b      	lsls	r3, r1
 800031a:	40d0      	lsrs	r0, r2
 800031c:	408d      	lsls	r5, r1
 800031e:	4303      	orrs	r3, r0
 8000320:	428e      	cmp	r6, r1
 8000322:	dd00      	ble.n	8000326 <__aeabi_dadd+0xce>
 8000324:	e117      	b.n	8000556 <__aeabi_dadd+0x2fe>
 8000326:	1b8e      	subs	r6, r1, r6
 8000328:	1c72      	adds	r2, r6, #1
 800032a:	2a1f      	cmp	r2, #31
 800032c:	dd00      	ble.n	8000330 <__aeabi_dadd+0xd8>
 800032e:	e1a7      	b.n	8000680 <__aeabi_dadd+0x428>
 8000330:	2120      	movs	r1, #32
 8000332:	0018      	movs	r0, r3
 8000334:	002e      	movs	r6, r5
 8000336:	1a89      	subs	r1, r1, r2
 8000338:	408d      	lsls	r5, r1
 800033a:	4088      	lsls	r0, r1
 800033c:	40d6      	lsrs	r6, r2
 800033e:	40d3      	lsrs	r3, r2
 8000340:	1e69      	subs	r1, r5, #1
 8000342:	418d      	sbcs	r5, r1
 8000344:	4330      	orrs	r0, r6
 8000346:	4698      	mov	r8, r3
 8000348:	2600      	movs	r6, #0
 800034a:	4305      	orrs	r5, r0
 800034c:	076b      	lsls	r3, r5, #29
 800034e:	d009      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000350:	230f      	movs	r3, #15
 8000352:	402b      	ands	r3, r5
 8000354:	2b04      	cmp	r3, #4
 8000356:	d005      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000358:	1d2b      	adds	r3, r5, #4
 800035a:	42ab      	cmp	r3, r5
 800035c:	41ad      	sbcs	r5, r5
 800035e:	426d      	negs	r5, r5
 8000360:	44a8      	add	r8, r5
 8000362:	001d      	movs	r5, r3
 8000364:	4643      	mov	r3, r8
 8000366:	021b      	lsls	r3, r3, #8
 8000368:	d400      	bmi.n	800036c <__aeabi_dadd+0x114>
 800036a:	e094      	b.n	8000496 <__aeabi_dadd+0x23e>
 800036c:	4b97      	ldr	r3, [pc, #604]	; (80005cc <__aeabi_dadd+0x374>)
 800036e:	1c72      	adds	r2, r6, #1
 8000370:	429a      	cmp	r2, r3
 8000372:	d100      	bne.n	8000376 <__aeabi_dadd+0x11e>
 8000374:	e09d      	b.n	80004b2 <__aeabi_dadd+0x25a>
 8000376:	4641      	mov	r1, r8
 8000378:	4b95      	ldr	r3, [pc, #596]	; (80005d0 <__aeabi_dadd+0x378>)
 800037a:	08ed      	lsrs	r5, r5, #3
 800037c:	4019      	ands	r1, r3
 800037e:	000b      	movs	r3, r1
 8000380:	0552      	lsls	r2, r2, #21
 8000382:	0749      	lsls	r1, r1, #29
 8000384:	025b      	lsls	r3, r3, #9
 8000386:	4329      	orrs	r1, r5
 8000388:	0b1b      	lsrs	r3, r3, #12
 800038a:	0d52      	lsrs	r2, r2, #21
 800038c:	0512      	lsls	r2, r2, #20
 800038e:	4313      	orrs	r3, r2
 8000390:	07e4      	lsls	r4, r4, #31
 8000392:	4323      	orrs	r3, r4
 8000394:	0008      	movs	r0, r1
 8000396:	0019      	movs	r1, r3
 8000398:	bce0      	pop	{r5, r6, r7}
 800039a:	46ba      	mov	sl, r7
 800039c:	46b1      	mov	r9, r6
 800039e:	46a8      	mov	r8, r5
 80003a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d043      	beq.n	800042e <__aeabi_dadd+0x1d6>
 80003a6:	1b8a      	subs	r2, r1, r6
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d000      	beq.n	80003ae <__aeabi_dadd+0x156>
 80003ac:	e12a      	b.n	8000604 <__aeabi_dadd+0x3ac>
 80003ae:	464c      	mov	r4, r9
 80003b0:	431c      	orrs	r4, r3
 80003b2:	d100      	bne.n	80003b6 <__aeabi_dadd+0x15e>
 80003b4:	e1d1      	b.n	800075a <__aeabi_dadd+0x502>
 80003b6:	1e54      	subs	r4, r2, #1
 80003b8:	2a01      	cmp	r2, #1
 80003ba:	d100      	bne.n	80003be <__aeabi_dadd+0x166>
 80003bc:	e21f      	b.n	80007fe <__aeabi_dadd+0x5a6>
 80003be:	4d83      	ldr	r5, [pc, #524]	; (80005cc <__aeabi_dadd+0x374>)
 80003c0:	42aa      	cmp	r2, r5
 80003c2:	d100      	bne.n	80003c6 <__aeabi_dadd+0x16e>
 80003c4:	e272      	b.n	80008ac <__aeabi_dadd+0x654>
 80003c6:	0022      	movs	r2, r4
 80003c8:	e123      	b.n	8000612 <__aeabi_dadd+0x3ba>
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	dc00      	bgt.n	80003d0 <__aeabi_dadd+0x178>
 80003ce:	e098      	b.n	8000502 <__aeabi_dadd+0x2aa>
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d042      	beq.n	800045a <__aeabi_dadd+0x202>
 80003d4:	497d      	ldr	r1, [pc, #500]	; (80005cc <__aeabi_dadd+0x374>)
 80003d6:	428e      	cmp	r6, r1
 80003d8:	d100      	bne.n	80003dc <__aeabi_dadd+0x184>
 80003da:	e0da      	b.n	8000592 <__aeabi_dadd+0x33a>
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0028      	movs	r0, r5
 80003e0:	0409      	lsls	r1, r1, #16
 80003e2:	4308      	orrs	r0, r1
 80003e4:	4684      	mov	ip, r0
 80003e6:	2a38      	cmp	r2, #56	; 0x38
 80003e8:	dd00      	ble.n	80003ec <__aeabi_dadd+0x194>
 80003ea:	e129      	b.n	8000640 <__aeabi_dadd+0x3e8>
 80003ec:	2a1f      	cmp	r2, #31
 80003ee:	dc00      	bgt.n	80003f2 <__aeabi_dadd+0x19a>
 80003f0:	e187      	b.n	8000702 <__aeabi_dadd+0x4aa>
 80003f2:	0011      	movs	r1, r2
 80003f4:	4665      	mov	r5, ip
 80003f6:	3920      	subs	r1, #32
 80003f8:	40cd      	lsrs	r5, r1
 80003fa:	2a20      	cmp	r2, #32
 80003fc:	d004      	beq.n	8000408 <__aeabi_dadd+0x1b0>
 80003fe:	2040      	movs	r0, #64	; 0x40
 8000400:	4661      	mov	r1, ip
 8000402:	1a82      	subs	r2, r0, r2
 8000404:	4091      	lsls	r1, r2
 8000406:	430f      	orrs	r7, r1
 8000408:	0039      	movs	r1, r7
 800040a:	1e4f      	subs	r7, r1, #1
 800040c:	41b9      	sbcs	r1, r7
 800040e:	430d      	orrs	r5, r1
 8000410:	e11b      	b.n	800064a <__aeabi_dadd+0x3f2>
 8000412:	0029      	movs	r1, r5
 8000414:	4339      	orrs	r1, r7
 8000416:	d100      	bne.n	800041a <__aeabi_dadd+0x1c2>
 8000418:	e0b5      	b.n	8000586 <__aeabi_dadd+0x32e>
 800041a:	1e51      	subs	r1, r2, #1
 800041c:	2a01      	cmp	r2, #1
 800041e:	d100      	bne.n	8000422 <__aeabi_dadd+0x1ca>
 8000420:	e1ab      	b.n	800077a <__aeabi_dadd+0x522>
 8000422:	486a      	ldr	r0, [pc, #424]	; (80005cc <__aeabi_dadd+0x374>)
 8000424:	4282      	cmp	r2, r0
 8000426:	d100      	bne.n	800042a <__aeabi_dadd+0x1d2>
 8000428:	e1b2      	b.n	8000790 <__aeabi_dadd+0x538>
 800042a:	000a      	movs	r2, r1
 800042c:	e743      	b.n	80002b6 <__aeabi_dadd+0x5e>
 800042e:	4969      	ldr	r1, [pc, #420]	; (80005d4 <__aeabi_dadd+0x37c>)
 8000430:	1c75      	adds	r5, r6, #1
 8000432:	420d      	tst	r5, r1
 8000434:	d000      	beq.n	8000438 <__aeabi_dadd+0x1e0>
 8000436:	e0cf      	b.n	80005d8 <__aeabi_dadd+0x380>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d000      	beq.n	800043e <__aeabi_dadd+0x1e6>
 800043c:	e193      	b.n	8000766 <__aeabi_dadd+0x50e>
 800043e:	4649      	mov	r1, r9
 8000440:	4319      	orrs	r1, r3
 8000442:	d100      	bne.n	8000446 <__aeabi_dadd+0x1ee>
 8000444:	e1d1      	b.n	80007ea <__aeabi_dadd+0x592>
 8000446:	4661      	mov	r1, ip
 8000448:	4339      	orrs	r1, r7
 800044a:	d000      	beq.n	800044e <__aeabi_dadd+0x1f6>
 800044c:	e1e3      	b.n	8000816 <__aeabi_dadd+0x5be>
 800044e:	4649      	mov	r1, r9
 8000450:	0758      	lsls	r0, r3, #29
 8000452:	08c9      	lsrs	r1, r1, #3
 8000454:	4301      	orrs	r1, r0
 8000456:	08db      	lsrs	r3, r3, #3
 8000458:	e026      	b.n	80004a8 <__aeabi_dadd+0x250>
 800045a:	0029      	movs	r1, r5
 800045c:	4339      	orrs	r1, r7
 800045e:	d100      	bne.n	8000462 <__aeabi_dadd+0x20a>
 8000460:	e091      	b.n	8000586 <__aeabi_dadd+0x32e>
 8000462:	1e51      	subs	r1, r2, #1
 8000464:	2a01      	cmp	r2, #1
 8000466:	d005      	beq.n	8000474 <__aeabi_dadd+0x21c>
 8000468:	4858      	ldr	r0, [pc, #352]	; (80005cc <__aeabi_dadd+0x374>)
 800046a:	4282      	cmp	r2, r0
 800046c:	d100      	bne.n	8000470 <__aeabi_dadd+0x218>
 800046e:	e18f      	b.n	8000790 <__aeabi_dadd+0x538>
 8000470:	000a      	movs	r2, r1
 8000472:	e7b8      	b.n	80003e6 <__aeabi_dadd+0x18e>
 8000474:	003d      	movs	r5, r7
 8000476:	444d      	add	r5, r9
 8000478:	454d      	cmp	r5, r9
 800047a:	4189      	sbcs	r1, r1
 800047c:	4463      	add	r3, ip
 800047e:	4698      	mov	r8, r3
 8000480:	4249      	negs	r1, r1
 8000482:	4488      	add	r8, r1
 8000484:	4643      	mov	r3, r8
 8000486:	2602      	movs	r6, #2
 8000488:	021b      	lsls	r3, r3, #8
 800048a:	d500      	bpl.n	800048e <__aeabi_dadd+0x236>
 800048c:	e0eb      	b.n	8000666 <__aeabi_dadd+0x40e>
 800048e:	3e01      	subs	r6, #1
 8000490:	076b      	lsls	r3, r5, #29
 8000492:	d000      	beq.n	8000496 <__aeabi_dadd+0x23e>
 8000494:	e75c      	b.n	8000350 <__aeabi_dadd+0xf8>
 8000496:	4643      	mov	r3, r8
 8000498:	08e9      	lsrs	r1, r5, #3
 800049a:	075a      	lsls	r2, r3, #29
 800049c:	4311      	orrs	r1, r2
 800049e:	0032      	movs	r2, r6
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	484a      	ldr	r0, [pc, #296]	; (80005cc <__aeabi_dadd+0x374>)
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d021      	beq.n	80004ec <__aeabi_dadd+0x294>
 80004a8:	031b      	lsls	r3, r3, #12
 80004aa:	0552      	lsls	r2, r2, #21
 80004ac:	0b1b      	lsrs	r3, r3, #12
 80004ae:	0d52      	lsrs	r2, r2, #21
 80004b0:	e76c      	b.n	800038c <__aeabi_dadd+0x134>
 80004b2:	2300      	movs	r3, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	e769      	b.n	800038c <__aeabi_dadd+0x134>
 80004b8:	002a      	movs	r2, r5
 80004ba:	433a      	orrs	r2, r7
 80004bc:	d069      	beq.n	8000592 <__aeabi_dadd+0x33a>
 80004be:	464a      	mov	r2, r9
 80004c0:	0758      	lsls	r0, r3, #29
 80004c2:	08d1      	lsrs	r1, r2, #3
 80004c4:	08da      	lsrs	r2, r3, #3
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	031b      	lsls	r3, r3, #12
 80004ca:	4308      	orrs	r0, r1
 80004cc:	421a      	tst	r2, r3
 80004ce:	d007      	beq.n	80004e0 <__aeabi_dadd+0x288>
 80004d0:	0029      	movs	r1, r5
 80004d2:	08ed      	lsrs	r5, r5, #3
 80004d4:	421d      	tst	r5, r3
 80004d6:	d103      	bne.n	80004e0 <__aeabi_dadd+0x288>
 80004d8:	002a      	movs	r2, r5
 80004da:	08ff      	lsrs	r7, r7, #3
 80004dc:	0748      	lsls	r0, r1, #29
 80004de:	4338      	orrs	r0, r7
 80004e0:	0f43      	lsrs	r3, r0, #29
 80004e2:	00c1      	lsls	r1, r0, #3
 80004e4:	075b      	lsls	r3, r3, #29
 80004e6:	08c9      	lsrs	r1, r1, #3
 80004e8:	4319      	orrs	r1, r3
 80004ea:	0013      	movs	r3, r2
 80004ec:	000a      	movs	r2, r1
 80004ee:	431a      	orrs	r2, r3
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x29c>
 80004f2:	e213      	b.n	800091c <__aeabi_dadd+0x6c4>
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	0312      	lsls	r2, r2, #12
 80004f8:	4313      	orrs	r3, r2
 80004fa:	031b      	lsls	r3, r3, #12
 80004fc:	4a33      	ldr	r2, [pc, #204]	; (80005cc <__aeabi_dadd+0x374>)
 80004fe:	0b1b      	lsrs	r3, r3, #12
 8000500:	e744      	b.n	800038c <__aeabi_dadd+0x134>
 8000502:	2a00      	cmp	r2, #0
 8000504:	d04b      	beq.n	800059e <__aeabi_dadd+0x346>
 8000506:	1b8a      	subs	r2, r1, r6
 8000508:	2e00      	cmp	r6, #0
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x2b6>
 800050c:	e0e7      	b.n	80006de <__aeabi_dadd+0x486>
 800050e:	482f      	ldr	r0, [pc, #188]	; (80005cc <__aeabi_dadd+0x374>)
 8000510:	4281      	cmp	r1, r0
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x2be>
 8000514:	e195      	b.n	8000842 <__aeabi_dadd+0x5ea>
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	0400      	lsls	r0, r0, #16
 800051a:	4303      	orrs	r3, r0
 800051c:	2a38      	cmp	r2, #56	; 0x38
 800051e:	dd00      	ble.n	8000522 <__aeabi_dadd+0x2ca>
 8000520:	e143      	b.n	80007aa <__aeabi_dadd+0x552>
 8000522:	2a1f      	cmp	r2, #31
 8000524:	dd00      	ble.n	8000528 <__aeabi_dadd+0x2d0>
 8000526:	e1db      	b.n	80008e0 <__aeabi_dadd+0x688>
 8000528:	2020      	movs	r0, #32
 800052a:	001d      	movs	r5, r3
 800052c:	464e      	mov	r6, r9
 800052e:	1a80      	subs	r0, r0, r2
 8000530:	4085      	lsls	r5, r0
 8000532:	40d6      	lsrs	r6, r2
 8000534:	4335      	orrs	r5, r6
 8000536:	464e      	mov	r6, r9
 8000538:	4086      	lsls	r6, r0
 800053a:	0030      	movs	r0, r6
 800053c:	40d3      	lsrs	r3, r2
 800053e:	1e46      	subs	r6, r0, #1
 8000540:	41b0      	sbcs	r0, r6
 8000542:	449c      	add	ip, r3
 8000544:	4305      	orrs	r5, r0
 8000546:	19ed      	adds	r5, r5, r7
 8000548:	42bd      	cmp	r5, r7
 800054a:	419b      	sbcs	r3, r3
 800054c:	425b      	negs	r3, r3
 800054e:	4463      	add	r3, ip
 8000550:	4698      	mov	r8, r3
 8000552:	000e      	movs	r6, r1
 8000554:	e07f      	b.n	8000656 <__aeabi_dadd+0x3fe>
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <__aeabi_dadd+0x378>)
 8000558:	1a76      	subs	r6, r6, r1
 800055a:	4013      	ands	r3, r2
 800055c:	4698      	mov	r8, r3
 800055e:	e6f5      	b.n	800034c <__aeabi_dadd+0xf4>
 8000560:	0028      	movs	r0, r5
 8000562:	f001 f885 	bl	8001670 <__clzsi2>
 8000566:	0001      	movs	r1, r0
 8000568:	3118      	adds	r1, #24
 800056a:	291f      	cmp	r1, #31
 800056c:	dc00      	bgt.n	8000570 <__aeabi_dadd+0x318>
 800056e:	e6cf      	b.n	8000310 <__aeabi_dadd+0xb8>
 8000570:	002b      	movs	r3, r5
 8000572:	3808      	subs	r0, #8
 8000574:	4083      	lsls	r3, r0
 8000576:	2500      	movs	r5, #0
 8000578:	e6d2      	b.n	8000320 <__aeabi_dadd+0xc8>
 800057a:	4662      	mov	r2, ip
 800057c:	433a      	orrs	r2, r7
 800057e:	0011      	movs	r1, r2
 8000580:	1e4f      	subs	r7, r1, #1
 8000582:	41b9      	sbcs	r1, r7
 8000584:	e6ac      	b.n	80002e0 <__aeabi_dadd+0x88>
 8000586:	4649      	mov	r1, r9
 8000588:	0758      	lsls	r0, r3, #29
 800058a:	08c9      	lsrs	r1, r1, #3
 800058c:	4301      	orrs	r1, r0
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	e787      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000592:	4649      	mov	r1, r9
 8000594:	075a      	lsls	r2, r3, #29
 8000596:	08c9      	lsrs	r1, r1, #3
 8000598:	4311      	orrs	r1, r2
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	e7a6      	b.n	80004ec <__aeabi_dadd+0x294>
 800059e:	490d      	ldr	r1, [pc, #52]	; (80005d4 <__aeabi_dadd+0x37c>)
 80005a0:	1c70      	adds	r0, r6, #1
 80005a2:	4208      	tst	r0, r1
 80005a4:	d000      	beq.n	80005a8 <__aeabi_dadd+0x350>
 80005a6:	e0bb      	b.n	8000720 <__aeabi_dadd+0x4c8>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x356>
 80005ac:	e114      	b.n	80007d8 <__aeabi_dadd+0x580>
 80005ae:	4649      	mov	r1, r9
 80005b0:	4319      	orrs	r1, r3
 80005b2:	d100      	bne.n	80005b6 <__aeabi_dadd+0x35e>
 80005b4:	e175      	b.n	80008a2 <__aeabi_dadd+0x64a>
 80005b6:	0029      	movs	r1, r5
 80005b8:	4339      	orrs	r1, r7
 80005ba:	d000      	beq.n	80005be <__aeabi_dadd+0x366>
 80005bc:	e17e      	b.n	80008bc <__aeabi_dadd+0x664>
 80005be:	4649      	mov	r1, r9
 80005c0:	0758      	lsls	r0, r3, #29
 80005c2:	08c9      	lsrs	r1, r1, #3
 80005c4:	4301      	orrs	r1, r0
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	e76e      	b.n	80004a8 <__aeabi_dadd+0x250>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	ff7fffff 	.word	0xff7fffff
 80005d4:	000007fe 	.word	0x000007fe
 80005d8:	4649      	mov	r1, r9
 80005da:	1bcd      	subs	r5, r1, r7
 80005dc:	4661      	mov	r1, ip
 80005de:	1a58      	subs	r0, r3, r1
 80005e0:	45a9      	cmp	r9, r5
 80005e2:	4189      	sbcs	r1, r1
 80005e4:	4249      	negs	r1, r1
 80005e6:	4688      	mov	r8, r1
 80005e8:	0001      	movs	r1, r0
 80005ea:	4640      	mov	r0, r8
 80005ec:	1a09      	subs	r1, r1, r0
 80005ee:	4688      	mov	r8, r1
 80005f0:	0209      	lsls	r1, r1, #8
 80005f2:	d500      	bpl.n	80005f6 <__aeabi_dadd+0x39e>
 80005f4:	e0a6      	b.n	8000744 <__aeabi_dadd+0x4ec>
 80005f6:	4641      	mov	r1, r8
 80005f8:	4329      	orrs	r1, r5
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x3a6>
 80005fc:	e67f      	b.n	80002fe <__aeabi_dadd+0xa6>
 80005fe:	2300      	movs	r3, #0
 8000600:	2400      	movs	r4, #0
 8000602:	e751      	b.n	80004a8 <__aeabi_dadd+0x250>
 8000604:	4cc7      	ldr	r4, [pc, #796]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000606:	42a1      	cmp	r1, r4
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x3b4>
 800060a:	e0c7      	b.n	800079c <__aeabi_dadd+0x544>
 800060c:	2480      	movs	r4, #128	; 0x80
 800060e:	0424      	lsls	r4, r4, #16
 8000610:	4323      	orrs	r3, r4
 8000612:	2a38      	cmp	r2, #56	; 0x38
 8000614:	dc54      	bgt.n	80006c0 <__aeabi_dadd+0x468>
 8000616:	2a1f      	cmp	r2, #31
 8000618:	dd00      	ble.n	800061c <__aeabi_dadd+0x3c4>
 800061a:	e0cc      	b.n	80007b6 <__aeabi_dadd+0x55e>
 800061c:	2420      	movs	r4, #32
 800061e:	4648      	mov	r0, r9
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	001d      	movs	r5, r3
 8000624:	464e      	mov	r6, r9
 8000626:	40a0      	lsls	r0, r4
 8000628:	40d6      	lsrs	r6, r2
 800062a:	40a5      	lsls	r5, r4
 800062c:	0004      	movs	r4, r0
 800062e:	40d3      	lsrs	r3, r2
 8000630:	4662      	mov	r2, ip
 8000632:	4335      	orrs	r5, r6
 8000634:	1e66      	subs	r6, r4, #1
 8000636:	41b4      	sbcs	r4, r6
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	469c      	mov	ip, r3
 800063c:	4325      	orrs	r5, r4
 800063e:	e044      	b.n	80006ca <__aeabi_dadd+0x472>
 8000640:	4662      	mov	r2, ip
 8000642:	433a      	orrs	r2, r7
 8000644:	0015      	movs	r5, r2
 8000646:	1e6f      	subs	r7, r5, #1
 8000648:	41bd      	sbcs	r5, r7
 800064a:	444d      	add	r5, r9
 800064c:	454d      	cmp	r5, r9
 800064e:	4189      	sbcs	r1, r1
 8000650:	4249      	negs	r1, r1
 8000652:	4688      	mov	r8, r1
 8000654:	4498      	add	r8, r3
 8000656:	4643      	mov	r3, r8
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	d400      	bmi.n	800065e <__aeabi_dadd+0x406>
 800065c:	e718      	b.n	8000490 <__aeabi_dadd+0x238>
 800065e:	4bb1      	ldr	r3, [pc, #708]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000660:	3601      	adds	r6, #1
 8000662:	429e      	cmp	r6, r3
 8000664:	d049      	beq.n	80006fa <__aeabi_dadd+0x4a2>
 8000666:	4642      	mov	r2, r8
 8000668:	4baf      	ldr	r3, [pc, #700]	; (8000928 <__aeabi_dadd+0x6d0>)
 800066a:	2101      	movs	r1, #1
 800066c:	401a      	ands	r2, r3
 800066e:	0013      	movs	r3, r2
 8000670:	086a      	lsrs	r2, r5, #1
 8000672:	400d      	ands	r5, r1
 8000674:	4315      	orrs	r5, r2
 8000676:	07d9      	lsls	r1, r3, #31
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	4698      	mov	r8, r3
 800067c:	430d      	orrs	r5, r1
 800067e:	e665      	b.n	800034c <__aeabi_dadd+0xf4>
 8000680:	0018      	movs	r0, r3
 8000682:	3e1f      	subs	r6, #31
 8000684:	40f0      	lsrs	r0, r6
 8000686:	2a20      	cmp	r2, #32
 8000688:	d003      	beq.n	8000692 <__aeabi_dadd+0x43a>
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	1a8a      	subs	r2, r1, r2
 800068e:	4093      	lsls	r3, r2
 8000690:	431d      	orrs	r5, r3
 8000692:	1e69      	subs	r1, r5, #1
 8000694:	418d      	sbcs	r5, r1
 8000696:	2300      	movs	r3, #0
 8000698:	2600      	movs	r6, #0
 800069a:	4698      	mov	r8, r3
 800069c:	4305      	orrs	r5, r0
 800069e:	e6f7      	b.n	8000490 <__aeabi_dadd+0x238>
 80006a0:	0011      	movs	r1, r2
 80006a2:	4665      	mov	r5, ip
 80006a4:	3920      	subs	r1, #32
 80006a6:	40cd      	lsrs	r5, r1
 80006a8:	2a20      	cmp	r2, #32
 80006aa:	d004      	beq.n	80006b6 <__aeabi_dadd+0x45e>
 80006ac:	2040      	movs	r0, #64	; 0x40
 80006ae:	4661      	mov	r1, ip
 80006b0:	1a82      	subs	r2, r0, r2
 80006b2:	4091      	lsls	r1, r2
 80006b4:	430f      	orrs	r7, r1
 80006b6:	0039      	movs	r1, r7
 80006b8:	1e4f      	subs	r7, r1, #1
 80006ba:	41b9      	sbcs	r1, r7
 80006bc:	4329      	orrs	r1, r5
 80006be:	e60f      	b.n	80002e0 <__aeabi_dadd+0x88>
 80006c0:	464a      	mov	r2, r9
 80006c2:	4313      	orrs	r3, r2
 80006c4:	001d      	movs	r5, r3
 80006c6:	1e6b      	subs	r3, r5, #1
 80006c8:	419d      	sbcs	r5, r3
 80006ca:	1b7d      	subs	r5, r7, r5
 80006cc:	42af      	cmp	r7, r5
 80006ce:	419b      	sbcs	r3, r3
 80006d0:	4662      	mov	r2, ip
 80006d2:	425b      	negs	r3, r3
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4698      	mov	r8, r3
 80006d8:	4654      	mov	r4, sl
 80006da:	000e      	movs	r6, r1
 80006dc:	e607      	b.n	80002ee <__aeabi_dadd+0x96>
 80006de:	4648      	mov	r0, r9
 80006e0:	4318      	orrs	r0, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x48e>
 80006e4:	e0b3      	b.n	800084e <__aeabi_dadd+0x5f6>
 80006e6:	1e50      	subs	r0, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x496>
 80006ec:	e10d      	b.n	800090a <__aeabi_dadd+0x6b2>
 80006ee:	4d8d      	ldr	r5, [pc, #564]	; (8000924 <__aeabi_dadd+0x6cc>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x49e>
 80006f4:	e0a5      	b.n	8000842 <__aeabi_dadd+0x5ea>
 80006f6:	0002      	movs	r2, r0
 80006f8:	e710      	b.n	800051c <__aeabi_dadd+0x2c4>
 80006fa:	0032      	movs	r2, r6
 80006fc:	2300      	movs	r3, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	e644      	b.n	800038c <__aeabi_dadd+0x134>
 8000702:	2120      	movs	r1, #32
 8000704:	0038      	movs	r0, r7
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	4665      	mov	r5, ip
 800070a:	408f      	lsls	r7, r1
 800070c:	408d      	lsls	r5, r1
 800070e:	40d0      	lsrs	r0, r2
 8000710:	1e79      	subs	r1, r7, #1
 8000712:	418f      	sbcs	r7, r1
 8000714:	4305      	orrs	r5, r0
 8000716:	433d      	orrs	r5, r7
 8000718:	4667      	mov	r7, ip
 800071a:	40d7      	lsrs	r7, r2
 800071c:	19db      	adds	r3, r3, r7
 800071e:	e794      	b.n	800064a <__aeabi_dadd+0x3f2>
 8000720:	4a80      	ldr	r2, [pc, #512]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000722:	4290      	cmp	r0, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x4d0>
 8000726:	e0ec      	b.n	8000902 <__aeabi_dadd+0x6aa>
 8000728:	0039      	movs	r1, r7
 800072a:	4449      	add	r1, r9
 800072c:	4549      	cmp	r1, r9
 800072e:	4192      	sbcs	r2, r2
 8000730:	4463      	add	r3, ip
 8000732:	4252      	negs	r2, r2
 8000734:	189b      	adds	r3, r3, r2
 8000736:	07dd      	lsls	r5, r3, #31
 8000738:	0849      	lsrs	r1, r1, #1
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	4698      	mov	r8, r3
 800073e:	0006      	movs	r6, r0
 8000740:	430d      	orrs	r5, r1
 8000742:	e6a5      	b.n	8000490 <__aeabi_dadd+0x238>
 8000744:	464a      	mov	r2, r9
 8000746:	1abd      	subs	r5, r7, r2
 8000748:	42af      	cmp	r7, r5
 800074a:	4189      	sbcs	r1, r1
 800074c:	4662      	mov	r2, ip
 800074e:	4249      	negs	r1, r1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	1a5b      	subs	r3, r3, r1
 8000754:	4698      	mov	r8, r3
 8000756:	4654      	mov	r4, sl
 8000758:	e5d1      	b.n	80002fe <__aeabi_dadd+0xa6>
 800075a:	076c      	lsls	r4, r5, #29
 800075c:	08f9      	lsrs	r1, r7, #3
 800075e:	4321      	orrs	r1, r4
 8000760:	08eb      	lsrs	r3, r5, #3
 8000762:	0004      	movs	r4, r0
 8000764:	e69d      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000766:	464a      	mov	r2, r9
 8000768:	431a      	orrs	r2, r3
 800076a:	d175      	bne.n	8000858 <__aeabi_dadd+0x600>
 800076c:	4661      	mov	r1, ip
 800076e:	4339      	orrs	r1, r7
 8000770:	d114      	bne.n	800079c <__aeabi_dadd+0x544>
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	2400      	movs	r4, #0
 8000776:	031b      	lsls	r3, r3, #12
 8000778:	e6bc      	b.n	80004f4 <__aeabi_dadd+0x29c>
 800077a:	464a      	mov	r2, r9
 800077c:	1bd5      	subs	r5, r2, r7
 800077e:	45a9      	cmp	r9, r5
 8000780:	4189      	sbcs	r1, r1
 8000782:	4662      	mov	r2, ip
 8000784:	4249      	negs	r1, r1
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	4698      	mov	r8, r3
 800078c:	2601      	movs	r6, #1
 800078e:	e5ae      	b.n	80002ee <__aeabi_dadd+0x96>
 8000790:	464a      	mov	r2, r9
 8000792:	08d1      	lsrs	r1, r2, #3
 8000794:	075a      	lsls	r2, r3, #29
 8000796:	4311      	orrs	r1, r2
 8000798:	08db      	lsrs	r3, r3, #3
 800079a:	e6a7      	b.n	80004ec <__aeabi_dadd+0x294>
 800079c:	4663      	mov	r3, ip
 800079e:	08f9      	lsrs	r1, r7, #3
 80007a0:	075a      	lsls	r2, r3, #29
 80007a2:	4654      	mov	r4, sl
 80007a4:	4311      	orrs	r1, r2
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	e6a0      	b.n	80004ec <__aeabi_dadd+0x294>
 80007aa:	464a      	mov	r2, r9
 80007ac:	4313      	orrs	r3, r2
 80007ae:	001d      	movs	r5, r3
 80007b0:	1e6b      	subs	r3, r5, #1
 80007b2:	419d      	sbcs	r5, r3
 80007b4:	e6c7      	b.n	8000546 <__aeabi_dadd+0x2ee>
 80007b6:	0014      	movs	r4, r2
 80007b8:	001e      	movs	r6, r3
 80007ba:	3c20      	subs	r4, #32
 80007bc:	40e6      	lsrs	r6, r4
 80007be:	2a20      	cmp	r2, #32
 80007c0:	d005      	beq.n	80007ce <__aeabi_dadd+0x576>
 80007c2:	2440      	movs	r4, #64	; 0x40
 80007c4:	1aa2      	subs	r2, r4, r2
 80007c6:	4093      	lsls	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	431a      	orrs	r2, r3
 80007cc:	4691      	mov	r9, r2
 80007ce:	464d      	mov	r5, r9
 80007d0:	1e6b      	subs	r3, r5, #1
 80007d2:	419d      	sbcs	r5, r3
 80007d4:	4335      	orrs	r5, r6
 80007d6:	e778      	b.n	80006ca <__aeabi_dadd+0x472>
 80007d8:	464a      	mov	r2, r9
 80007da:	431a      	orrs	r2, r3
 80007dc:	d000      	beq.n	80007e0 <__aeabi_dadd+0x588>
 80007de:	e66b      	b.n	80004b8 <__aeabi_dadd+0x260>
 80007e0:	076b      	lsls	r3, r5, #29
 80007e2:	08f9      	lsrs	r1, r7, #3
 80007e4:	4319      	orrs	r1, r3
 80007e6:	08eb      	lsrs	r3, r5, #3
 80007e8:	e680      	b.n	80004ec <__aeabi_dadd+0x294>
 80007ea:	4661      	mov	r1, ip
 80007ec:	4339      	orrs	r1, r7
 80007ee:	d054      	beq.n	800089a <__aeabi_dadd+0x642>
 80007f0:	4663      	mov	r3, ip
 80007f2:	08f9      	lsrs	r1, r7, #3
 80007f4:	075c      	lsls	r4, r3, #29
 80007f6:	4321      	orrs	r1, r4
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	0004      	movs	r4, r0
 80007fc:	e654      	b.n	80004a8 <__aeabi_dadd+0x250>
 80007fe:	464a      	mov	r2, r9
 8000800:	1abd      	subs	r5, r7, r2
 8000802:	42af      	cmp	r7, r5
 8000804:	4189      	sbcs	r1, r1
 8000806:	4662      	mov	r2, ip
 8000808:	4249      	negs	r1, r1
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	4698      	mov	r8, r3
 8000810:	0004      	movs	r4, r0
 8000812:	2601      	movs	r6, #1
 8000814:	e56b      	b.n	80002ee <__aeabi_dadd+0x96>
 8000816:	464a      	mov	r2, r9
 8000818:	1bd5      	subs	r5, r2, r7
 800081a:	45a9      	cmp	r9, r5
 800081c:	4189      	sbcs	r1, r1
 800081e:	4662      	mov	r2, ip
 8000820:	4249      	negs	r1, r1
 8000822:	1a9a      	subs	r2, r3, r2
 8000824:	1a52      	subs	r2, r2, r1
 8000826:	4690      	mov	r8, r2
 8000828:	0212      	lsls	r2, r2, #8
 800082a:	d532      	bpl.n	8000892 <__aeabi_dadd+0x63a>
 800082c:	464a      	mov	r2, r9
 800082e:	1abd      	subs	r5, r7, r2
 8000830:	42af      	cmp	r7, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4662      	mov	r2, ip
 8000836:	4249      	negs	r1, r1
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	1a5b      	subs	r3, r3, r1
 800083c:	4698      	mov	r8, r3
 800083e:	0004      	movs	r4, r0
 8000840:	e584      	b.n	800034c <__aeabi_dadd+0xf4>
 8000842:	4663      	mov	r3, ip
 8000844:	08f9      	lsrs	r1, r7, #3
 8000846:	075a      	lsls	r2, r3, #29
 8000848:	4311      	orrs	r1, r2
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	e64e      	b.n	80004ec <__aeabi_dadd+0x294>
 800084e:	08f9      	lsrs	r1, r7, #3
 8000850:	0768      	lsls	r0, r5, #29
 8000852:	4301      	orrs	r1, r0
 8000854:	08eb      	lsrs	r3, r5, #3
 8000856:	e624      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000858:	4662      	mov	r2, ip
 800085a:	433a      	orrs	r2, r7
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x608>
 800085e:	e698      	b.n	8000592 <__aeabi_dadd+0x33a>
 8000860:	464a      	mov	r2, r9
 8000862:	08d1      	lsrs	r1, r2, #3
 8000864:	075a      	lsls	r2, r3, #29
 8000866:	4311      	orrs	r1, r2
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	031b      	lsls	r3, r3, #12
 800086e:	421a      	tst	r2, r3
 8000870:	d008      	beq.n	8000884 <__aeabi_dadd+0x62c>
 8000872:	4660      	mov	r0, ip
 8000874:	08c5      	lsrs	r5, r0, #3
 8000876:	421d      	tst	r5, r3
 8000878:	d104      	bne.n	8000884 <__aeabi_dadd+0x62c>
 800087a:	4654      	mov	r4, sl
 800087c:	002a      	movs	r2, r5
 800087e:	08f9      	lsrs	r1, r7, #3
 8000880:	0743      	lsls	r3, r0, #29
 8000882:	4319      	orrs	r1, r3
 8000884:	0f4b      	lsrs	r3, r1, #29
 8000886:	00c9      	lsls	r1, r1, #3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	08c9      	lsrs	r1, r1, #3
 800088c:	4319      	orrs	r1, r3
 800088e:	0013      	movs	r3, r2
 8000890:	e62c      	b.n	80004ec <__aeabi_dadd+0x294>
 8000892:	4641      	mov	r1, r8
 8000894:	4329      	orrs	r1, r5
 8000896:	d000      	beq.n	800089a <__aeabi_dadd+0x642>
 8000898:	e5fa      	b.n	8000490 <__aeabi_dadd+0x238>
 800089a:	2300      	movs	r3, #0
 800089c:	000a      	movs	r2, r1
 800089e:	2400      	movs	r4, #0
 80008a0:	e602      	b.n	80004a8 <__aeabi_dadd+0x250>
 80008a2:	076b      	lsls	r3, r5, #29
 80008a4:	08f9      	lsrs	r1, r7, #3
 80008a6:	4319      	orrs	r1, r3
 80008a8:	08eb      	lsrs	r3, r5, #3
 80008aa:	e5fd      	b.n	80004a8 <__aeabi_dadd+0x250>
 80008ac:	4663      	mov	r3, ip
 80008ae:	08f9      	lsrs	r1, r7, #3
 80008b0:	075b      	lsls	r3, r3, #29
 80008b2:	4319      	orrs	r1, r3
 80008b4:	4663      	mov	r3, ip
 80008b6:	0004      	movs	r4, r0
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	e617      	b.n	80004ec <__aeabi_dadd+0x294>
 80008bc:	003d      	movs	r5, r7
 80008be:	444d      	add	r5, r9
 80008c0:	4463      	add	r3, ip
 80008c2:	454d      	cmp	r5, r9
 80008c4:	4189      	sbcs	r1, r1
 80008c6:	4698      	mov	r8, r3
 80008c8:	4249      	negs	r1, r1
 80008ca:	4488      	add	r8, r1
 80008cc:	4643      	mov	r3, r8
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x67c>
 80008d2:	e5dd      	b.n	8000490 <__aeabi_dadd+0x238>
 80008d4:	4642      	mov	r2, r8
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <__aeabi_dadd+0x6d0>)
 80008d8:	2601      	movs	r6, #1
 80008da:	401a      	ands	r2, r3
 80008dc:	4690      	mov	r8, r2
 80008de:	e5d7      	b.n	8000490 <__aeabi_dadd+0x238>
 80008e0:	0010      	movs	r0, r2
 80008e2:	001e      	movs	r6, r3
 80008e4:	3820      	subs	r0, #32
 80008e6:	40c6      	lsrs	r6, r0
 80008e8:	2a20      	cmp	r2, #32
 80008ea:	d005      	beq.n	80008f8 <__aeabi_dadd+0x6a0>
 80008ec:	2040      	movs	r0, #64	; 0x40
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4093      	lsls	r3, r2
 80008f2:	464a      	mov	r2, r9
 80008f4:	431a      	orrs	r2, r3
 80008f6:	4691      	mov	r9, r2
 80008f8:	464d      	mov	r5, r9
 80008fa:	1e6b      	subs	r3, r5, #1
 80008fc:	419d      	sbcs	r5, r3
 80008fe:	4335      	orrs	r5, r6
 8000900:	e621      	b.n	8000546 <__aeabi_dadd+0x2ee>
 8000902:	0002      	movs	r2, r0
 8000904:	2300      	movs	r3, #0
 8000906:	2100      	movs	r1, #0
 8000908:	e540      	b.n	800038c <__aeabi_dadd+0x134>
 800090a:	464a      	mov	r2, r9
 800090c:	19d5      	adds	r5, r2, r7
 800090e:	42bd      	cmp	r5, r7
 8000910:	4189      	sbcs	r1, r1
 8000912:	4463      	add	r3, ip
 8000914:	4698      	mov	r8, r3
 8000916:	4249      	negs	r1, r1
 8000918:	4488      	add	r8, r1
 800091a:	e5b3      	b.n	8000484 <__aeabi_dadd+0x22c>
 800091c:	2100      	movs	r1, #0
 800091e:	4a01      	ldr	r2, [pc, #4]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000920:	000b      	movs	r3, r1
 8000922:	e533      	b.n	800038c <__aeabi_dadd+0x134>
 8000924:	000007ff 	.word	0x000007ff
 8000928:	ff7fffff 	.word	0xff7fffff

0800092c <__aeabi_dmul>:
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	4657      	mov	r7, sl
 8000930:	464e      	mov	r6, r9
 8000932:	4645      	mov	r5, r8
 8000934:	46de      	mov	lr, fp
 8000936:	b5e0      	push	{r5, r6, r7, lr}
 8000938:	4698      	mov	r8, r3
 800093a:	030c      	lsls	r4, r1, #12
 800093c:	004b      	lsls	r3, r1, #1
 800093e:	0006      	movs	r6, r0
 8000940:	4692      	mov	sl, r2
 8000942:	b087      	sub	sp, #28
 8000944:	0b24      	lsrs	r4, r4, #12
 8000946:	0d5b      	lsrs	r3, r3, #21
 8000948:	0fcf      	lsrs	r7, r1, #31
 800094a:	2b00      	cmp	r3, #0
 800094c:	d06c      	beq.n	8000a28 <__aeabi_dmul+0xfc>
 800094e:	4add      	ldr	r2, [pc, #884]	; (8000cc4 <__aeabi_dmul+0x398>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dmul+0x2a>
 8000954:	e086      	b.n	8000a64 <__aeabi_dmul+0x138>
 8000956:	0f42      	lsrs	r2, r0, #29
 8000958:	00e4      	lsls	r4, r4, #3
 800095a:	4314      	orrs	r4, r2
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0412      	lsls	r2, r2, #16
 8000960:	4314      	orrs	r4, r2
 8000962:	4ad9      	ldr	r2, [pc, #868]	; (8000cc8 <__aeabi_dmul+0x39c>)
 8000964:	00c5      	lsls	r5, r0, #3
 8000966:	4694      	mov	ip, r2
 8000968:	4463      	add	r3, ip
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	4699      	mov	r9, r3
 8000970:	469b      	mov	fp, r3
 8000972:	4643      	mov	r3, r8
 8000974:	4642      	mov	r2, r8
 8000976:	031e      	lsls	r6, r3, #12
 8000978:	0fd2      	lsrs	r2, r2, #31
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4650      	mov	r0, sl
 800097e:	4690      	mov	r8, r2
 8000980:	0b36      	lsrs	r6, r6, #12
 8000982:	0d5b      	lsrs	r3, r3, #21
 8000984:	d100      	bne.n	8000988 <__aeabi_dmul+0x5c>
 8000986:	e078      	b.n	8000a7a <__aeabi_dmul+0x14e>
 8000988:	4ace      	ldr	r2, [pc, #824]	; (8000cc4 <__aeabi_dmul+0x398>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d01d      	beq.n	80009ca <__aeabi_dmul+0x9e>
 800098e:	49ce      	ldr	r1, [pc, #824]	; (8000cc8 <__aeabi_dmul+0x39c>)
 8000990:	0f42      	lsrs	r2, r0, #29
 8000992:	468c      	mov	ip, r1
 8000994:	9900      	ldr	r1, [sp, #0]
 8000996:	4463      	add	r3, ip
 8000998:	00f6      	lsls	r6, r6, #3
 800099a:	468c      	mov	ip, r1
 800099c:	4316      	orrs	r6, r2
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	449c      	add	ip, r3
 80009a2:	0412      	lsls	r2, r2, #16
 80009a4:	4663      	mov	r3, ip
 80009a6:	4316      	orrs	r6, r2
 80009a8:	00c2      	lsls	r2, r0, #3
 80009aa:	2000      	movs	r0, #0
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	9900      	ldr	r1, [sp, #0]
 80009b0:	4643      	mov	r3, r8
 80009b2:	3101      	adds	r1, #1
 80009b4:	468c      	mov	ip, r1
 80009b6:	4649      	mov	r1, r9
 80009b8:	407b      	eors	r3, r7
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	290f      	cmp	r1, #15
 80009be:	d900      	bls.n	80009c2 <__aeabi_dmul+0x96>
 80009c0:	e07e      	b.n	8000ac0 <__aeabi_dmul+0x194>
 80009c2:	4bc2      	ldr	r3, [pc, #776]	; (8000ccc <__aeabi_dmul+0x3a0>)
 80009c4:	0089      	lsls	r1, r1, #2
 80009c6:	5859      	ldr	r1, [r3, r1]
 80009c8:	468f      	mov	pc, r1
 80009ca:	4652      	mov	r2, sl
 80009cc:	9b00      	ldr	r3, [sp, #0]
 80009ce:	4332      	orrs	r2, r6
 80009d0:	d000      	beq.n	80009d4 <__aeabi_dmul+0xa8>
 80009d2:	e156      	b.n	8000c82 <__aeabi_dmul+0x356>
 80009d4:	49bb      	ldr	r1, [pc, #748]	; (8000cc4 <__aeabi_dmul+0x398>)
 80009d6:	2600      	movs	r6, #0
 80009d8:	468c      	mov	ip, r1
 80009da:	4463      	add	r3, ip
 80009dc:	4649      	mov	r1, r9
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2302      	movs	r3, #2
 80009e2:	4319      	orrs	r1, r3
 80009e4:	4689      	mov	r9, r1
 80009e6:	2002      	movs	r0, #2
 80009e8:	e7e1      	b.n	80009ae <__aeabi_dmul+0x82>
 80009ea:	4643      	mov	r3, r8
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	0034      	movs	r4, r6
 80009f0:	0015      	movs	r5, r2
 80009f2:	4683      	mov	fp, r0
 80009f4:	465b      	mov	r3, fp
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d05e      	beq.n	8000ab8 <__aeabi_dmul+0x18c>
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dmul+0xd4>
 80009fe:	e1f3      	b.n	8000de8 <__aeabi_dmul+0x4bc>
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d000      	beq.n	8000a06 <__aeabi_dmul+0xda>
 8000a04:	e118      	b.n	8000c38 <__aeabi_dmul+0x30c>
 8000a06:	2200      	movs	r2, #0
 8000a08:	2400      	movs	r4, #0
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	9b01      	ldr	r3, [sp, #4]
 8000a0e:	0512      	lsls	r2, r2, #20
 8000a10:	4322      	orrs	r2, r4
 8000a12:	07db      	lsls	r3, r3, #31
 8000a14:	431a      	orrs	r2, r3
 8000a16:	0028      	movs	r0, r5
 8000a18:	0011      	movs	r1, r2
 8000a1a:	b007      	add	sp, #28
 8000a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a1e:	46bb      	mov	fp, r7
 8000a20:	46b2      	mov	sl, r6
 8000a22:	46a9      	mov	r9, r5
 8000a24:	46a0      	mov	r8, r4
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a28:	0025      	movs	r5, r4
 8000a2a:	4305      	orrs	r5, r0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dmul+0x104>
 8000a2e:	e141      	b.n	8000cb4 <__aeabi_dmul+0x388>
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dmul+0x10a>
 8000a34:	e1ad      	b.n	8000d92 <__aeabi_dmul+0x466>
 8000a36:	0020      	movs	r0, r4
 8000a38:	f000 fe1a 	bl	8001670 <__clzsi2>
 8000a3c:	0001      	movs	r1, r0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	390b      	subs	r1, #11
 8000a42:	231d      	movs	r3, #29
 8000a44:	0010      	movs	r0, r2
 8000a46:	1a5b      	subs	r3, r3, r1
 8000a48:	0031      	movs	r1, r6
 8000a4a:	0035      	movs	r5, r6
 8000a4c:	3808      	subs	r0, #8
 8000a4e:	4084      	lsls	r4, r0
 8000a50:	40d9      	lsrs	r1, r3
 8000a52:	4085      	lsls	r5, r0
 8000a54:	430c      	orrs	r4, r1
 8000a56:	489e      	ldr	r0, [pc, #632]	; (8000cd0 <__aeabi_dmul+0x3a4>)
 8000a58:	1a83      	subs	r3, r0, r2
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4699      	mov	r9, r3
 8000a60:	469b      	mov	fp, r3
 8000a62:	e786      	b.n	8000972 <__aeabi_dmul+0x46>
 8000a64:	0005      	movs	r5, r0
 8000a66:	4325      	orrs	r5, r4
 8000a68:	d000      	beq.n	8000a6c <__aeabi_dmul+0x140>
 8000a6a:	e11c      	b.n	8000ca6 <__aeabi_dmul+0x37a>
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2302      	movs	r3, #2
 8000a72:	2400      	movs	r4, #0
 8000a74:	4691      	mov	r9, r2
 8000a76:	469b      	mov	fp, r3
 8000a78:	e77b      	b.n	8000972 <__aeabi_dmul+0x46>
 8000a7a:	4652      	mov	r2, sl
 8000a7c:	4332      	orrs	r2, r6
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dmul+0x156>
 8000a80:	e10a      	b.n	8000c98 <__aeabi_dmul+0x36c>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dmul+0x15c>
 8000a86:	e176      	b.n	8000d76 <__aeabi_dmul+0x44a>
 8000a88:	0030      	movs	r0, r6
 8000a8a:	f000 fdf1 	bl	8001670 <__clzsi2>
 8000a8e:	0002      	movs	r2, r0
 8000a90:	3a0b      	subs	r2, #11
 8000a92:	231d      	movs	r3, #29
 8000a94:	0001      	movs	r1, r0
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	4652      	mov	r2, sl
 8000a9a:	3908      	subs	r1, #8
 8000a9c:	40da      	lsrs	r2, r3
 8000a9e:	408e      	lsls	r6, r1
 8000aa0:	4316      	orrs	r6, r2
 8000aa2:	4652      	mov	r2, sl
 8000aa4:	408a      	lsls	r2, r1
 8000aa6:	9b00      	ldr	r3, [sp, #0]
 8000aa8:	4989      	ldr	r1, [pc, #548]	; (8000cd0 <__aeabi_dmul+0x3a4>)
 8000aaa:	1a18      	subs	r0, r3, r0
 8000aac:	0003      	movs	r3, r0
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4463      	add	r3, ip
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	e77a      	b.n	80009ae <__aeabi_dmul+0x82>
 8000ab8:	2400      	movs	r4, #0
 8000aba:	2500      	movs	r5, #0
 8000abc:	4a81      	ldr	r2, [pc, #516]	; (8000cc4 <__aeabi_dmul+0x398>)
 8000abe:	e7a5      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000ac0:	0c2f      	lsrs	r7, r5, #16
 8000ac2:	042d      	lsls	r5, r5, #16
 8000ac4:	0c2d      	lsrs	r5, r5, #16
 8000ac6:	002b      	movs	r3, r5
 8000ac8:	0c11      	lsrs	r1, r2, #16
 8000aca:	0412      	lsls	r2, r2, #16
 8000acc:	0c12      	lsrs	r2, r2, #16
 8000ace:	4353      	muls	r3, r2
 8000ad0:	4698      	mov	r8, r3
 8000ad2:	0013      	movs	r3, r2
 8000ad4:	0028      	movs	r0, r5
 8000ad6:	437b      	muls	r3, r7
 8000ad8:	4699      	mov	r9, r3
 8000ada:	4348      	muls	r0, r1
 8000adc:	4448      	add	r0, r9
 8000ade:	4683      	mov	fp, r0
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	000b      	movs	r3, r1
 8000ae4:	0c00      	lsrs	r0, r0, #16
 8000ae6:	4682      	mov	sl, r0
 8000ae8:	4658      	mov	r0, fp
 8000aea:	437b      	muls	r3, r7
 8000aec:	4450      	add	r0, sl
 8000aee:	9302      	str	r3, [sp, #8]
 8000af0:	4581      	cmp	r9, r0
 8000af2:	d906      	bls.n	8000b02 <__aeabi_dmul+0x1d6>
 8000af4:	469a      	mov	sl, r3
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	025b      	lsls	r3, r3, #9
 8000afa:	4699      	mov	r9, r3
 8000afc:	44ca      	add	sl, r9
 8000afe:	4653      	mov	r3, sl
 8000b00:	9302      	str	r3, [sp, #8]
 8000b02:	0c03      	lsrs	r3, r0, #16
 8000b04:	469b      	mov	fp, r3
 8000b06:	4643      	mov	r3, r8
 8000b08:	041b      	lsls	r3, r3, #16
 8000b0a:	0400      	lsls	r0, r0, #16
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	4698      	mov	r8, r3
 8000b10:	0003      	movs	r3, r0
 8000b12:	4443      	add	r3, r8
 8000b14:	9304      	str	r3, [sp, #16]
 8000b16:	0c33      	lsrs	r3, r6, #16
 8000b18:	4699      	mov	r9, r3
 8000b1a:	002b      	movs	r3, r5
 8000b1c:	0436      	lsls	r6, r6, #16
 8000b1e:	0c36      	lsrs	r6, r6, #16
 8000b20:	4373      	muls	r3, r6
 8000b22:	4698      	mov	r8, r3
 8000b24:	0033      	movs	r3, r6
 8000b26:	437b      	muls	r3, r7
 8000b28:	469a      	mov	sl, r3
 8000b2a:	464b      	mov	r3, r9
 8000b2c:	435d      	muls	r5, r3
 8000b2e:	435f      	muls	r7, r3
 8000b30:	4643      	mov	r3, r8
 8000b32:	4455      	add	r5, sl
 8000b34:	0c18      	lsrs	r0, r3, #16
 8000b36:	1940      	adds	r0, r0, r5
 8000b38:	4582      	cmp	sl, r0
 8000b3a:	d903      	bls.n	8000b44 <__aeabi_dmul+0x218>
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	025b      	lsls	r3, r3, #9
 8000b40:	469a      	mov	sl, r3
 8000b42:	4457      	add	r7, sl
 8000b44:	0c05      	lsrs	r5, r0, #16
 8000b46:	19eb      	adds	r3, r5, r7
 8000b48:	9305      	str	r3, [sp, #20]
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	041d      	lsls	r5, r3, #16
 8000b4e:	0c2d      	lsrs	r5, r5, #16
 8000b50:	0400      	lsls	r0, r0, #16
 8000b52:	1940      	adds	r0, r0, r5
 8000b54:	0c25      	lsrs	r5, r4, #16
 8000b56:	0424      	lsls	r4, r4, #16
 8000b58:	0c24      	lsrs	r4, r4, #16
 8000b5a:	0027      	movs	r7, r4
 8000b5c:	4357      	muls	r7, r2
 8000b5e:	436a      	muls	r2, r5
 8000b60:	4690      	mov	r8, r2
 8000b62:	002a      	movs	r2, r5
 8000b64:	0c3b      	lsrs	r3, r7, #16
 8000b66:	469a      	mov	sl, r3
 8000b68:	434a      	muls	r2, r1
 8000b6a:	4361      	muls	r1, r4
 8000b6c:	4441      	add	r1, r8
 8000b6e:	4451      	add	r1, sl
 8000b70:	4483      	add	fp, r0
 8000b72:	4588      	cmp	r8, r1
 8000b74:	d903      	bls.n	8000b7e <__aeabi_dmul+0x252>
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	025b      	lsls	r3, r3, #9
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	4442      	add	r2, r8
 8000b7e:	043f      	lsls	r7, r7, #16
 8000b80:	0c0b      	lsrs	r3, r1, #16
 8000b82:	0c3f      	lsrs	r7, r7, #16
 8000b84:	0409      	lsls	r1, r1, #16
 8000b86:	19c9      	adds	r1, r1, r7
 8000b88:	0027      	movs	r7, r4
 8000b8a:	4698      	mov	r8, r3
 8000b8c:	464b      	mov	r3, r9
 8000b8e:	4377      	muls	r7, r6
 8000b90:	435c      	muls	r4, r3
 8000b92:	436e      	muls	r6, r5
 8000b94:	435d      	muls	r5, r3
 8000b96:	0c3b      	lsrs	r3, r7, #16
 8000b98:	4699      	mov	r9, r3
 8000b9a:	19a4      	adds	r4, r4, r6
 8000b9c:	444c      	add	r4, r9
 8000b9e:	4442      	add	r2, r8
 8000ba0:	9503      	str	r5, [sp, #12]
 8000ba2:	42a6      	cmp	r6, r4
 8000ba4:	d904      	bls.n	8000bb0 <__aeabi_dmul+0x284>
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	025b      	lsls	r3, r3, #9
 8000baa:	4698      	mov	r8, r3
 8000bac:	4445      	add	r5, r8
 8000bae:	9503      	str	r5, [sp, #12]
 8000bb0:	9b02      	ldr	r3, [sp, #8]
 8000bb2:	043f      	lsls	r7, r7, #16
 8000bb4:	445b      	add	r3, fp
 8000bb6:	001e      	movs	r6, r3
 8000bb8:	4283      	cmp	r3, r0
 8000bba:	4180      	sbcs	r0, r0
 8000bbc:	0423      	lsls	r3, r4, #16
 8000bbe:	4698      	mov	r8, r3
 8000bc0:	9b05      	ldr	r3, [sp, #20]
 8000bc2:	0c3f      	lsrs	r7, r7, #16
 8000bc4:	4447      	add	r7, r8
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	1876      	adds	r6, r6, r1
 8000bca:	428e      	cmp	r6, r1
 8000bcc:	4189      	sbcs	r1, r1
 8000bce:	4447      	add	r7, r8
 8000bd0:	4240      	negs	r0, r0
 8000bd2:	183d      	adds	r5, r7, r0
 8000bd4:	46a8      	mov	r8, r5
 8000bd6:	4693      	mov	fp, r2
 8000bd8:	4249      	negs	r1, r1
 8000bda:	468a      	mov	sl, r1
 8000bdc:	44c3      	add	fp, r8
 8000bde:	429f      	cmp	r7, r3
 8000be0:	41bf      	sbcs	r7, r7
 8000be2:	4580      	cmp	r8, r0
 8000be4:	4180      	sbcs	r0, r0
 8000be6:	9b03      	ldr	r3, [sp, #12]
 8000be8:	44da      	add	sl, fp
 8000bea:	4698      	mov	r8, r3
 8000bec:	4653      	mov	r3, sl
 8000bee:	4240      	negs	r0, r0
 8000bf0:	427f      	negs	r7, r7
 8000bf2:	4307      	orrs	r7, r0
 8000bf4:	0c24      	lsrs	r4, r4, #16
 8000bf6:	4593      	cmp	fp, r2
 8000bf8:	4192      	sbcs	r2, r2
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	4189      	sbcs	r1, r1
 8000bfe:	193f      	adds	r7, r7, r4
 8000c00:	0ddc      	lsrs	r4, r3, #23
 8000c02:	9b04      	ldr	r3, [sp, #16]
 8000c04:	0275      	lsls	r5, r6, #9
 8000c06:	431d      	orrs	r5, r3
 8000c08:	1e68      	subs	r0, r5, #1
 8000c0a:	4185      	sbcs	r5, r0
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	4252      	negs	r2, r2
 8000c10:	4249      	negs	r1, r1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	18bf      	adds	r7, r7, r2
 8000c16:	4447      	add	r7, r8
 8000c18:	0df6      	lsrs	r6, r6, #23
 8000c1a:	027f      	lsls	r7, r7, #9
 8000c1c:	4335      	orrs	r5, r6
 8000c1e:	025a      	lsls	r2, r3, #9
 8000c20:	433c      	orrs	r4, r7
 8000c22:	4315      	orrs	r5, r2
 8000c24:	01fb      	lsls	r3, r7, #7
 8000c26:	d400      	bmi.n	8000c2a <__aeabi_dmul+0x2fe>
 8000c28:	e0c1      	b.n	8000dae <__aeabi_dmul+0x482>
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	086a      	lsrs	r2, r5, #1
 8000c2e:	400d      	ands	r5, r1
 8000c30:	4315      	orrs	r5, r2
 8000c32:	07e2      	lsls	r2, r4, #31
 8000c34:	4315      	orrs	r5, r2
 8000c36:	0864      	lsrs	r4, r4, #1
 8000c38:	4926      	ldr	r1, [pc, #152]	; (8000cd4 <__aeabi_dmul+0x3a8>)
 8000c3a:	4461      	add	r1, ip
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	dd56      	ble.n	8000cee <__aeabi_dmul+0x3c2>
 8000c40:	076b      	lsls	r3, r5, #29
 8000c42:	d009      	beq.n	8000c58 <__aeabi_dmul+0x32c>
 8000c44:	220f      	movs	r2, #15
 8000c46:	402a      	ands	r2, r5
 8000c48:	2a04      	cmp	r2, #4
 8000c4a:	d005      	beq.n	8000c58 <__aeabi_dmul+0x32c>
 8000c4c:	1d2a      	adds	r2, r5, #4
 8000c4e:	42aa      	cmp	r2, r5
 8000c50:	41ad      	sbcs	r5, r5
 8000c52:	426d      	negs	r5, r5
 8000c54:	1964      	adds	r4, r4, r5
 8000c56:	0015      	movs	r5, r2
 8000c58:	01e3      	lsls	r3, r4, #7
 8000c5a:	d504      	bpl.n	8000c66 <__aeabi_dmul+0x33a>
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <__aeabi_dmul+0x3ac>)
 8000c60:	00c9      	lsls	r1, r1, #3
 8000c62:	4014      	ands	r4, r2
 8000c64:	4461      	add	r1, ip
 8000c66:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <__aeabi_dmul+0x3b0>)
 8000c68:	4291      	cmp	r1, r2
 8000c6a:	dd00      	ble.n	8000c6e <__aeabi_dmul+0x342>
 8000c6c:	e724      	b.n	8000ab8 <__aeabi_dmul+0x18c>
 8000c6e:	0762      	lsls	r2, r4, #29
 8000c70:	08ed      	lsrs	r5, r5, #3
 8000c72:	0264      	lsls	r4, r4, #9
 8000c74:	0549      	lsls	r1, r1, #21
 8000c76:	4315      	orrs	r5, r2
 8000c78:	0b24      	lsrs	r4, r4, #12
 8000c7a:	0d4a      	lsrs	r2, r1, #21
 8000c7c:	e6c6      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000c7e:	9701      	str	r7, [sp, #4]
 8000c80:	e6b8      	b.n	80009f4 <__aeabi_dmul+0xc8>
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <__aeabi_dmul+0x398>)
 8000c84:	2003      	movs	r0, #3
 8000c86:	4694      	mov	ip, r2
 8000c88:	4463      	add	r3, ip
 8000c8a:	464a      	mov	r2, r9
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2303      	movs	r3, #3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	4691      	mov	r9, r2
 8000c94:	4652      	mov	r2, sl
 8000c96:	e68a      	b.n	80009ae <__aeabi_dmul+0x82>
 8000c98:	4649      	mov	r1, r9
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	4689      	mov	r9, r1
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	e683      	b.n	80009ae <__aeabi_dmul+0x82>
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2303      	movs	r3, #3
 8000cac:	0005      	movs	r5, r0
 8000cae:	4691      	mov	r9, r2
 8000cb0:	469b      	mov	fp, r3
 8000cb2:	e65e      	b.n	8000972 <__aeabi_dmul+0x46>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	4699      	mov	r9, r3
 8000cb8:	2300      	movs	r3, #0
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	469b      	mov	fp, r3
 8000cc2:	e656      	b.n	8000972 <__aeabi_dmul+0x46>
 8000cc4:	000007ff 	.word	0x000007ff
 8000cc8:	fffffc01 	.word	0xfffffc01
 8000ccc:	080048f0 	.word	0x080048f0
 8000cd0:	fffffc0d 	.word	0xfffffc0d
 8000cd4:	000003ff 	.word	0x000003ff
 8000cd8:	feffffff 	.word	0xfeffffff
 8000cdc:	000007fe 	.word	0x000007fe
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2480      	movs	r4, #128	; 0x80
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <__aeabi_dmul+0x4cc>)
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	0324      	lsls	r4, r4, #12
 8000cec:	e68e      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000cee:	2001      	movs	r0, #1
 8000cf0:	1a40      	subs	r0, r0, r1
 8000cf2:	2838      	cmp	r0, #56	; 0x38
 8000cf4:	dd00      	ble.n	8000cf8 <__aeabi_dmul+0x3cc>
 8000cf6:	e686      	b.n	8000a06 <__aeabi_dmul+0xda>
 8000cf8:	281f      	cmp	r0, #31
 8000cfa:	dd5b      	ble.n	8000db4 <__aeabi_dmul+0x488>
 8000cfc:	221f      	movs	r2, #31
 8000cfe:	0023      	movs	r3, r4
 8000d00:	4252      	negs	r2, r2
 8000d02:	1a51      	subs	r1, r2, r1
 8000d04:	40cb      	lsrs	r3, r1
 8000d06:	0019      	movs	r1, r3
 8000d08:	2820      	cmp	r0, #32
 8000d0a:	d003      	beq.n	8000d14 <__aeabi_dmul+0x3e8>
 8000d0c:	4a3b      	ldr	r2, [pc, #236]	; (8000dfc <__aeabi_dmul+0x4d0>)
 8000d0e:	4462      	add	r2, ip
 8000d10:	4094      	lsls	r4, r2
 8000d12:	4325      	orrs	r5, r4
 8000d14:	1e6a      	subs	r2, r5, #1
 8000d16:	4195      	sbcs	r5, r2
 8000d18:	002a      	movs	r2, r5
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	2107      	movs	r1, #7
 8000d1e:	000d      	movs	r5, r1
 8000d20:	2400      	movs	r4, #0
 8000d22:	4015      	ands	r5, r2
 8000d24:	4211      	tst	r1, r2
 8000d26:	d05b      	beq.n	8000de0 <__aeabi_dmul+0x4b4>
 8000d28:	210f      	movs	r1, #15
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	4011      	ands	r1, r2
 8000d2e:	2904      	cmp	r1, #4
 8000d30:	d053      	beq.n	8000dda <__aeabi_dmul+0x4ae>
 8000d32:	1d11      	adds	r1, r2, #4
 8000d34:	4291      	cmp	r1, r2
 8000d36:	4192      	sbcs	r2, r2
 8000d38:	4252      	negs	r2, r2
 8000d3a:	18a4      	adds	r4, r4, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	0223      	lsls	r3, r4, #8
 8000d40:	d54b      	bpl.n	8000dda <__aeabi_dmul+0x4ae>
 8000d42:	2201      	movs	r2, #1
 8000d44:	2400      	movs	r4, #0
 8000d46:	2500      	movs	r5, #0
 8000d48:	e660      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	031b      	lsls	r3, r3, #12
 8000d4e:	421c      	tst	r4, r3
 8000d50:	d009      	beq.n	8000d66 <__aeabi_dmul+0x43a>
 8000d52:	421e      	tst	r6, r3
 8000d54:	d107      	bne.n	8000d66 <__aeabi_dmul+0x43a>
 8000d56:	4333      	orrs	r3, r6
 8000d58:	031c      	lsls	r4, r3, #12
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	0015      	movs	r5, r2
 8000d5e:	0b24      	lsrs	r4, r4, #12
 8000d60:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <__aeabi_dmul+0x4cc>)
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	e652      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	0312      	lsls	r2, r2, #12
 8000d6a:	4314      	orrs	r4, r2
 8000d6c:	0324      	lsls	r4, r4, #12
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <__aeabi_dmul+0x4cc>)
 8000d70:	0b24      	lsrs	r4, r4, #12
 8000d72:	9701      	str	r7, [sp, #4]
 8000d74:	e64a      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000d76:	f000 fc7b 	bl	8001670 <__clzsi2>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	3215      	adds	r2, #21
 8000d80:	3020      	adds	r0, #32
 8000d82:	2a1c      	cmp	r2, #28
 8000d84:	dc00      	bgt.n	8000d88 <__aeabi_dmul+0x45c>
 8000d86:	e684      	b.n	8000a92 <__aeabi_dmul+0x166>
 8000d88:	4656      	mov	r6, sl
 8000d8a:	3b08      	subs	r3, #8
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	409e      	lsls	r6, r3
 8000d90:	e689      	b.n	8000aa6 <__aeabi_dmul+0x17a>
 8000d92:	f000 fc6d 	bl	8001670 <__clzsi2>
 8000d96:	0001      	movs	r1, r0
 8000d98:	0002      	movs	r2, r0
 8000d9a:	3115      	adds	r1, #21
 8000d9c:	3220      	adds	r2, #32
 8000d9e:	291c      	cmp	r1, #28
 8000da0:	dc00      	bgt.n	8000da4 <__aeabi_dmul+0x478>
 8000da2:	e64e      	b.n	8000a42 <__aeabi_dmul+0x116>
 8000da4:	0034      	movs	r4, r6
 8000da6:	3808      	subs	r0, #8
 8000da8:	2500      	movs	r5, #0
 8000daa:	4084      	lsls	r4, r0
 8000dac:	e653      	b.n	8000a56 <__aeabi_dmul+0x12a>
 8000dae:	9b00      	ldr	r3, [sp, #0]
 8000db0:	469c      	mov	ip, r3
 8000db2:	e741      	b.n	8000c38 <__aeabi_dmul+0x30c>
 8000db4:	4912      	ldr	r1, [pc, #72]	; (8000e00 <__aeabi_dmul+0x4d4>)
 8000db6:	0022      	movs	r2, r4
 8000db8:	4461      	add	r1, ip
 8000dba:	002e      	movs	r6, r5
 8000dbc:	408d      	lsls	r5, r1
 8000dbe:	408a      	lsls	r2, r1
 8000dc0:	40c6      	lsrs	r6, r0
 8000dc2:	1e69      	subs	r1, r5, #1
 8000dc4:	418d      	sbcs	r5, r1
 8000dc6:	4332      	orrs	r2, r6
 8000dc8:	432a      	orrs	r2, r5
 8000dca:	40c4      	lsrs	r4, r0
 8000dcc:	0753      	lsls	r3, r2, #29
 8000dce:	d0b6      	beq.n	8000d3e <__aeabi_dmul+0x412>
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	4011      	ands	r1, r2
 8000dd4:	2904      	cmp	r1, #4
 8000dd6:	d1ac      	bne.n	8000d32 <__aeabi_dmul+0x406>
 8000dd8:	e7b1      	b.n	8000d3e <__aeabi_dmul+0x412>
 8000dda:	0765      	lsls	r5, r4, #29
 8000ddc:	0264      	lsls	r4, r4, #9
 8000dde:	0b24      	lsrs	r4, r4, #12
 8000de0:	08d2      	lsrs	r2, r2, #3
 8000de2:	4315      	orrs	r5, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e611      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	0312      	lsls	r2, r2, #12
 8000dec:	4314      	orrs	r4, r2
 8000dee:	0324      	lsls	r4, r4, #12
 8000df0:	4a01      	ldr	r2, [pc, #4]	; (8000df8 <__aeabi_dmul+0x4cc>)
 8000df2:	0b24      	lsrs	r4, r4, #12
 8000df4:	e60a      	b.n	8000a0c <__aeabi_dmul+0xe0>
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	000007ff 	.word	0x000007ff
 8000dfc:	0000043e 	.word	0x0000043e
 8000e00:	0000041e 	.word	0x0000041e

08000e04 <__aeabi_dsub>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	4657      	mov	r7, sl
 8000e08:	464e      	mov	r6, r9
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	46de      	mov	lr, fp
 8000e0e:	0004      	movs	r4, r0
 8000e10:	b5e0      	push	{r5, r6, r7, lr}
 8000e12:	001f      	movs	r7, r3
 8000e14:	0010      	movs	r0, r2
 8000e16:	030b      	lsls	r3, r1, #12
 8000e18:	0f62      	lsrs	r2, r4, #29
 8000e1a:	004e      	lsls	r6, r1, #1
 8000e1c:	0fcd      	lsrs	r5, r1, #31
 8000e1e:	0a5b      	lsrs	r3, r3, #9
 8000e20:	0339      	lsls	r1, r7, #12
 8000e22:	4313      	orrs	r3, r2
 8000e24:	0a49      	lsrs	r1, r1, #9
 8000e26:	00e2      	lsls	r2, r4, #3
 8000e28:	0f44      	lsrs	r4, r0, #29
 8000e2a:	4321      	orrs	r1, r4
 8000e2c:	4cc2      	ldr	r4, [pc, #776]	; (8001138 <__aeabi_dsub+0x334>)
 8000e2e:	4691      	mov	r9, r2
 8000e30:	4692      	mov	sl, r2
 8000e32:	00c0      	lsls	r0, r0, #3
 8000e34:	007a      	lsls	r2, r7, #1
 8000e36:	4680      	mov	r8, r0
 8000e38:	0d76      	lsrs	r6, r6, #21
 8000e3a:	0d52      	lsrs	r2, r2, #21
 8000e3c:	0fff      	lsrs	r7, r7, #31
 8000e3e:	42a2      	cmp	r2, r4
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dsub+0x40>
 8000e42:	e0b4      	b.n	8000fae <__aeabi_dsub+0x1aa>
 8000e44:	2401      	movs	r4, #1
 8000e46:	4067      	eors	r7, r4
 8000e48:	46bb      	mov	fp, r7
 8000e4a:	42bd      	cmp	r5, r7
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x4c>
 8000e4e:	e088      	b.n	8000f62 <__aeabi_dsub+0x15e>
 8000e50:	1ab4      	subs	r4, r6, r2
 8000e52:	46a4      	mov	ip, r4
 8000e54:	2c00      	cmp	r4, #0
 8000e56:	dc00      	bgt.n	8000e5a <__aeabi_dsub+0x56>
 8000e58:	e0b2      	b.n	8000fc0 <__aeabi_dsub+0x1bc>
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dsub+0x5c>
 8000e5e:	e0c5      	b.n	8000fec <__aeabi_dsub+0x1e8>
 8000e60:	4ab5      	ldr	r2, [pc, #724]	; (8001138 <__aeabi_dsub+0x334>)
 8000e62:	4296      	cmp	r6, r2
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dsub+0x64>
 8000e66:	e28b      	b.n	8001380 <__aeabi_dsub+0x57c>
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	0412      	lsls	r2, r2, #16
 8000e6c:	4311      	orrs	r1, r2
 8000e6e:	4662      	mov	r2, ip
 8000e70:	2a38      	cmp	r2, #56	; 0x38
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dsub+0x72>
 8000e74:	e1a1      	b.n	80011ba <__aeabi_dsub+0x3b6>
 8000e76:	2a1f      	cmp	r2, #31
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_dsub+0x78>
 8000e7a:	e216      	b.n	80012aa <__aeabi_dsub+0x4a6>
 8000e7c:	2720      	movs	r7, #32
 8000e7e:	000c      	movs	r4, r1
 8000e80:	1abf      	subs	r7, r7, r2
 8000e82:	40bc      	lsls	r4, r7
 8000e84:	0002      	movs	r2, r0
 8000e86:	46a0      	mov	r8, r4
 8000e88:	4664      	mov	r4, ip
 8000e8a:	40b8      	lsls	r0, r7
 8000e8c:	40e2      	lsrs	r2, r4
 8000e8e:	4644      	mov	r4, r8
 8000e90:	4314      	orrs	r4, r2
 8000e92:	0002      	movs	r2, r0
 8000e94:	1e50      	subs	r0, r2, #1
 8000e96:	4182      	sbcs	r2, r0
 8000e98:	4660      	mov	r0, ip
 8000e9a:	40c1      	lsrs	r1, r0
 8000e9c:	4322      	orrs	r2, r4
 8000e9e:	1a5b      	subs	r3, r3, r1
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	1a8c      	subs	r4, r1, r2
 8000ea4:	45a1      	cmp	r9, r4
 8000ea6:	4192      	sbcs	r2, r2
 8000ea8:	4252      	negs	r2, r2
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	4698      	mov	r8, r3
 8000eae:	4643      	mov	r3, r8
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	d400      	bmi.n	8000eb6 <__aeabi_dsub+0xb2>
 8000eb4:	e117      	b.n	80010e6 <__aeabi_dsub+0x2e2>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	025b      	lsls	r3, r3, #9
 8000eba:	0a5b      	lsrs	r3, r3, #9
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_dsub+0xc2>
 8000ec4:	e16c      	b.n	80011a0 <__aeabi_dsub+0x39c>
 8000ec6:	4640      	mov	r0, r8
 8000ec8:	f000 fbd2 	bl	8001670 <__clzsi2>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	3a08      	subs	r2, #8
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	0020      	movs	r0, r4
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	1a89      	subs	r1, r1, r2
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	40c8      	lsrs	r0, r1
 8000edc:	4094      	lsls	r4, r2
 8000ede:	4303      	orrs	r3, r0
 8000ee0:	4296      	cmp	r6, r2
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_dsub+0xe2>
 8000ee4:	e157      	b.n	8001196 <__aeabi_dsub+0x392>
 8000ee6:	1b96      	subs	r6, r2, r6
 8000ee8:	1c71      	adds	r1, r6, #1
 8000eea:	291f      	cmp	r1, #31
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_dsub+0xec>
 8000eee:	e1cb      	b.n	8001288 <__aeabi_dsub+0x484>
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	0026      	movs	r6, r4
 8000ef6:	1a52      	subs	r2, r2, r1
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	4090      	lsls	r0, r2
 8000efc:	40ce      	lsrs	r6, r1
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	1e62      	subs	r2, r4, #1
 8000f02:	4194      	sbcs	r4, r2
 8000f04:	4330      	orrs	r0, r6
 8000f06:	4698      	mov	r8, r3
 8000f08:	2600      	movs	r6, #0
 8000f0a:	4304      	orrs	r4, r0
 8000f0c:	0763      	lsls	r3, r4, #29
 8000f0e:	d009      	beq.n	8000f24 <__aeabi_dsub+0x120>
 8000f10:	230f      	movs	r3, #15
 8000f12:	4023      	ands	r3, r4
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d005      	beq.n	8000f24 <__aeabi_dsub+0x120>
 8000f18:	1d23      	adds	r3, r4, #4
 8000f1a:	42a3      	cmp	r3, r4
 8000f1c:	41a4      	sbcs	r4, r4
 8000f1e:	4264      	negs	r4, r4
 8000f20:	44a0      	add	r8, r4
 8000f22:	001c      	movs	r4, r3
 8000f24:	4643      	mov	r3, r8
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_dsub+0x128>
 8000f2a:	e0df      	b.n	80010ec <__aeabi_dsub+0x2e8>
 8000f2c:	4b82      	ldr	r3, [pc, #520]	; (8001138 <__aeabi_dsub+0x334>)
 8000f2e:	3601      	adds	r6, #1
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dsub+0x132>
 8000f34:	e0fb      	b.n	800112e <__aeabi_dsub+0x32a>
 8000f36:	4642      	mov	r2, r8
 8000f38:	4b80      	ldr	r3, [pc, #512]	; (800113c <__aeabi_dsub+0x338>)
 8000f3a:	08e4      	lsrs	r4, r4, #3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	0571      	lsls	r1, r6, #21
 8000f42:	0752      	lsls	r2, r2, #29
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	4322      	orrs	r2, r4
 8000f48:	0b1b      	lsrs	r3, r3, #12
 8000f4a:	0d49      	lsrs	r1, r1, #21
 8000f4c:	0509      	lsls	r1, r1, #20
 8000f4e:	07ed      	lsls	r5, r5, #31
 8000f50:	4319      	orrs	r1, r3
 8000f52:	4329      	orrs	r1, r5
 8000f54:	0010      	movs	r0, r2
 8000f56:	bcf0      	pop	{r4, r5, r6, r7}
 8000f58:	46bb      	mov	fp, r7
 8000f5a:	46b2      	mov	sl, r6
 8000f5c:	46a9      	mov	r9, r5
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f62:	1ab4      	subs	r4, r6, r2
 8000f64:	46a4      	mov	ip, r4
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	dd58      	ble.n	800101c <__aeabi_dsub+0x218>
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dsub+0x16c>
 8000f6e:	e09e      	b.n	80010ae <__aeabi_dsub+0x2aa>
 8000f70:	4a71      	ldr	r2, [pc, #452]	; (8001138 <__aeabi_dsub+0x334>)
 8000f72:	4296      	cmp	r6, r2
 8000f74:	d100      	bne.n	8000f78 <__aeabi_dsub+0x174>
 8000f76:	e13b      	b.n	80011f0 <__aeabi_dsub+0x3ec>
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	0412      	lsls	r2, r2, #16
 8000f7c:	4311      	orrs	r1, r2
 8000f7e:	4662      	mov	r2, ip
 8000f80:	2a38      	cmp	r2, #56	; 0x38
 8000f82:	dd00      	ble.n	8000f86 <__aeabi_dsub+0x182>
 8000f84:	e0c1      	b.n	800110a <__aeabi_dsub+0x306>
 8000f86:	2a1f      	cmp	r2, #31
 8000f88:	dc00      	bgt.n	8000f8c <__aeabi_dsub+0x188>
 8000f8a:	e1bb      	b.n	8001304 <__aeabi_dsub+0x500>
 8000f8c:	000c      	movs	r4, r1
 8000f8e:	3a20      	subs	r2, #32
 8000f90:	40d4      	lsrs	r4, r2
 8000f92:	0022      	movs	r2, r4
 8000f94:	4664      	mov	r4, ip
 8000f96:	2c20      	cmp	r4, #32
 8000f98:	d004      	beq.n	8000fa4 <__aeabi_dsub+0x1a0>
 8000f9a:	2740      	movs	r7, #64	; 0x40
 8000f9c:	1b3f      	subs	r7, r7, r4
 8000f9e:	40b9      	lsls	r1, r7
 8000fa0:	4308      	orrs	r0, r1
 8000fa2:	4680      	mov	r8, r0
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	1e61      	subs	r1, r4, #1
 8000fa8:	418c      	sbcs	r4, r1
 8000faa:	4314      	orrs	r4, r2
 8000fac:	e0b1      	b.n	8001112 <__aeabi_dsub+0x30e>
 8000fae:	000c      	movs	r4, r1
 8000fb0:	4304      	orrs	r4, r0
 8000fb2:	d02a      	beq.n	800100a <__aeabi_dsub+0x206>
 8000fb4:	46bb      	mov	fp, r7
 8000fb6:	42bd      	cmp	r5, r7
 8000fb8:	d02d      	beq.n	8001016 <__aeabi_dsub+0x212>
 8000fba:	4c61      	ldr	r4, [pc, #388]	; (8001140 <__aeabi_dsub+0x33c>)
 8000fbc:	46a4      	mov	ip, r4
 8000fbe:	44b4      	add	ip, r6
 8000fc0:	4664      	mov	r4, ip
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d05c      	beq.n	8001080 <__aeabi_dsub+0x27c>
 8000fc6:	1b94      	subs	r4, r2, r6
 8000fc8:	46a4      	mov	ip, r4
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d000      	beq.n	8000fd0 <__aeabi_dsub+0x1cc>
 8000fce:	e115      	b.n	80011fc <__aeabi_dsub+0x3f8>
 8000fd0:	464d      	mov	r5, r9
 8000fd2:	431d      	orrs	r5, r3
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dsub+0x1d4>
 8000fd6:	e1c3      	b.n	8001360 <__aeabi_dsub+0x55c>
 8000fd8:	1e65      	subs	r5, r4, #1
 8000fda:	2c01      	cmp	r4, #1
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dsub+0x1dc>
 8000fde:	e20c      	b.n	80013fa <__aeabi_dsub+0x5f6>
 8000fe0:	4e55      	ldr	r6, [pc, #340]	; (8001138 <__aeabi_dsub+0x334>)
 8000fe2:	42b4      	cmp	r4, r6
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dsub+0x1e4>
 8000fe6:	e1f8      	b.n	80013da <__aeabi_dsub+0x5d6>
 8000fe8:	46ac      	mov	ip, r5
 8000fea:	e10e      	b.n	800120a <__aeabi_dsub+0x406>
 8000fec:	000a      	movs	r2, r1
 8000fee:	4302      	orrs	r2, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dsub+0x1f0>
 8000ff2:	e136      	b.n	8001262 <__aeabi_dsub+0x45e>
 8000ff4:	0022      	movs	r2, r4
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	2c01      	cmp	r4, #1
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dsub+0x1fa>
 8000ffc:	e1c6      	b.n	800138c <__aeabi_dsub+0x588>
 8000ffe:	4c4e      	ldr	r4, [pc, #312]	; (8001138 <__aeabi_dsub+0x334>)
 8001000:	45a4      	cmp	ip, r4
 8001002:	d100      	bne.n	8001006 <__aeabi_dsub+0x202>
 8001004:	e0f4      	b.n	80011f0 <__aeabi_dsub+0x3ec>
 8001006:	4694      	mov	ip, r2
 8001008:	e731      	b.n	8000e6e <__aeabi_dsub+0x6a>
 800100a:	2401      	movs	r4, #1
 800100c:	4067      	eors	r7, r4
 800100e:	46bb      	mov	fp, r7
 8001010:	42bd      	cmp	r5, r7
 8001012:	d000      	beq.n	8001016 <__aeabi_dsub+0x212>
 8001014:	e71c      	b.n	8000e50 <__aeabi_dsub+0x4c>
 8001016:	4c4a      	ldr	r4, [pc, #296]	; (8001140 <__aeabi_dsub+0x33c>)
 8001018:	46a4      	mov	ip, r4
 800101a:	44b4      	add	ip, r6
 800101c:	4664      	mov	r4, ip
 800101e:	2c00      	cmp	r4, #0
 8001020:	d100      	bne.n	8001024 <__aeabi_dsub+0x220>
 8001022:	e0cf      	b.n	80011c4 <__aeabi_dsub+0x3c0>
 8001024:	1b94      	subs	r4, r2, r6
 8001026:	46a4      	mov	ip, r4
 8001028:	2e00      	cmp	r6, #0
 800102a:	d100      	bne.n	800102e <__aeabi_dsub+0x22a>
 800102c:	e15c      	b.n	80012e8 <__aeabi_dsub+0x4e4>
 800102e:	4e42      	ldr	r6, [pc, #264]	; (8001138 <__aeabi_dsub+0x334>)
 8001030:	42b2      	cmp	r2, r6
 8001032:	d100      	bne.n	8001036 <__aeabi_dsub+0x232>
 8001034:	e1ec      	b.n	8001410 <__aeabi_dsub+0x60c>
 8001036:	2680      	movs	r6, #128	; 0x80
 8001038:	0436      	lsls	r6, r6, #16
 800103a:	4333      	orrs	r3, r6
 800103c:	4664      	mov	r4, ip
 800103e:	2c38      	cmp	r4, #56	; 0x38
 8001040:	dd00      	ble.n	8001044 <__aeabi_dsub+0x240>
 8001042:	e1b3      	b.n	80013ac <__aeabi_dsub+0x5a8>
 8001044:	2c1f      	cmp	r4, #31
 8001046:	dd00      	ble.n	800104a <__aeabi_dsub+0x246>
 8001048:	e238      	b.n	80014bc <__aeabi_dsub+0x6b8>
 800104a:	2620      	movs	r6, #32
 800104c:	1b36      	subs	r6, r6, r4
 800104e:	001c      	movs	r4, r3
 8001050:	40b4      	lsls	r4, r6
 8001052:	464f      	mov	r7, r9
 8001054:	46a0      	mov	r8, r4
 8001056:	4664      	mov	r4, ip
 8001058:	40e7      	lsrs	r7, r4
 800105a:	4644      	mov	r4, r8
 800105c:	433c      	orrs	r4, r7
 800105e:	464f      	mov	r7, r9
 8001060:	40b7      	lsls	r7, r6
 8001062:	003e      	movs	r6, r7
 8001064:	1e77      	subs	r7, r6, #1
 8001066:	41be      	sbcs	r6, r7
 8001068:	4334      	orrs	r4, r6
 800106a:	4666      	mov	r6, ip
 800106c:	40f3      	lsrs	r3, r6
 800106e:	18c9      	adds	r1, r1, r3
 8001070:	1824      	adds	r4, r4, r0
 8001072:	4284      	cmp	r4, r0
 8001074:	419b      	sbcs	r3, r3
 8001076:	425b      	negs	r3, r3
 8001078:	4698      	mov	r8, r3
 800107a:	0016      	movs	r6, r2
 800107c:	4488      	add	r8, r1
 800107e:	e04e      	b.n	800111e <__aeabi_dsub+0x31a>
 8001080:	4a30      	ldr	r2, [pc, #192]	; (8001144 <__aeabi_dsub+0x340>)
 8001082:	1c74      	adds	r4, r6, #1
 8001084:	4214      	tst	r4, r2
 8001086:	d000      	beq.n	800108a <__aeabi_dsub+0x286>
 8001088:	e0d6      	b.n	8001238 <__aeabi_dsub+0x434>
 800108a:	464a      	mov	r2, r9
 800108c:	431a      	orrs	r2, r3
 800108e:	2e00      	cmp	r6, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_dsub+0x290>
 8001092:	e15b      	b.n	800134c <__aeabi_dsub+0x548>
 8001094:	2a00      	cmp	r2, #0
 8001096:	d100      	bne.n	800109a <__aeabi_dsub+0x296>
 8001098:	e1a5      	b.n	80013e6 <__aeabi_dsub+0x5e2>
 800109a:	000a      	movs	r2, r1
 800109c:	4302      	orrs	r2, r0
 800109e:	d000      	beq.n	80010a2 <__aeabi_dsub+0x29e>
 80010a0:	e1bb      	b.n	800141a <__aeabi_dsub+0x616>
 80010a2:	464a      	mov	r2, r9
 80010a4:	0759      	lsls	r1, r3, #29
 80010a6:	08d2      	lsrs	r2, r2, #3
 80010a8:	430a      	orrs	r2, r1
 80010aa:	08db      	lsrs	r3, r3, #3
 80010ac:	e027      	b.n	80010fe <__aeabi_dsub+0x2fa>
 80010ae:	000a      	movs	r2, r1
 80010b0:	4302      	orrs	r2, r0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dsub+0x2b2>
 80010b4:	e174      	b.n	80013a0 <__aeabi_dsub+0x59c>
 80010b6:	0022      	movs	r2, r4
 80010b8:	3a01      	subs	r2, #1
 80010ba:	2c01      	cmp	r4, #1
 80010bc:	d005      	beq.n	80010ca <__aeabi_dsub+0x2c6>
 80010be:	4c1e      	ldr	r4, [pc, #120]	; (8001138 <__aeabi_dsub+0x334>)
 80010c0:	45a4      	cmp	ip, r4
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dsub+0x2c2>
 80010c4:	e094      	b.n	80011f0 <__aeabi_dsub+0x3ec>
 80010c6:	4694      	mov	ip, r2
 80010c8:	e759      	b.n	8000f7e <__aeabi_dsub+0x17a>
 80010ca:	4448      	add	r0, r9
 80010cc:	4548      	cmp	r0, r9
 80010ce:	4192      	sbcs	r2, r2
 80010d0:	185b      	adds	r3, r3, r1
 80010d2:	4698      	mov	r8, r3
 80010d4:	0004      	movs	r4, r0
 80010d6:	4252      	negs	r2, r2
 80010d8:	4490      	add	r8, r2
 80010da:	4643      	mov	r3, r8
 80010dc:	2602      	movs	r6, #2
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	d500      	bpl.n	80010e4 <__aeabi_dsub+0x2e0>
 80010e2:	e0c4      	b.n	800126e <__aeabi_dsub+0x46a>
 80010e4:	3e01      	subs	r6, #1
 80010e6:	0763      	lsls	r3, r4, #29
 80010e8:	d000      	beq.n	80010ec <__aeabi_dsub+0x2e8>
 80010ea:	e711      	b.n	8000f10 <__aeabi_dsub+0x10c>
 80010ec:	4643      	mov	r3, r8
 80010ee:	46b4      	mov	ip, r6
 80010f0:	0759      	lsls	r1, r3, #29
 80010f2:	08e2      	lsrs	r2, r4, #3
 80010f4:	430a      	orrs	r2, r1
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	490f      	ldr	r1, [pc, #60]	; (8001138 <__aeabi_dsub+0x334>)
 80010fa:	458c      	cmp	ip, r1
 80010fc:	d040      	beq.n	8001180 <__aeabi_dsub+0x37c>
 80010fe:	4661      	mov	r1, ip
 8001100:	031b      	lsls	r3, r3, #12
 8001102:	0549      	lsls	r1, r1, #21
 8001104:	0b1b      	lsrs	r3, r3, #12
 8001106:	0d49      	lsrs	r1, r1, #21
 8001108:	e720      	b.n	8000f4c <__aeabi_dsub+0x148>
 800110a:	4301      	orrs	r1, r0
 800110c:	000c      	movs	r4, r1
 800110e:	1e61      	subs	r1, r4, #1
 8001110:	418c      	sbcs	r4, r1
 8001112:	444c      	add	r4, r9
 8001114:	454c      	cmp	r4, r9
 8001116:	4192      	sbcs	r2, r2
 8001118:	4252      	negs	r2, r2
 800111a:	4690      	mov	r8, r2
 800111c:	4498      	add	r8, r3
 800111e:	4643      	mov	r3, r8
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	d5e0      	bpl.n	80010e6 <__aeabi_dsub+0x2e2>
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__aeabi_dsub+0x334>)
 8001126:	3601      	adds	r6, #1
 8001128:	429e      	cmp	r6, r3
 800112a:	d000      	beq.n	800112e <__aeabi_dsub+0x32a>
 800112c:	e09f      	b.n	800126e <__aeabi_dsub+0x46a>
 800112e:	0031      	movs	r1, r6
 8001130:	2300      	movs	r3, #0
 8001132:	2200      	movs	r2, #0
 8001134:	e70a      	b.n	8000f4c <__aeabi_dsub+0x148>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000007ff 	.word	0x000007ff
 800113c:	ff7fffff 	.word	0xff7fffff
 8001140:	fffff801 	.word	0xfffff801
 8001144:	000007fe 	.word	0x000007fe
 8001148:	2a00      	cmp	r2, #0
 800114a:	d100      	bne.n	800114e <__aeabi_dsub+0x34a>
 800114c:	e160      	b.n	8001410 <__aeabi_dsub+0x60c>
 800114e:	000a      	movs	r2, r1
 8001150:	4302      	orrs	r2, r0
 8001152:	d04d      	beq.n	80011f0 <__aeabi_dsub+0x3ec>
 8001154:	464a      	mov	r2, r9
 8001156:	075c      	lsls	r4, r3, #29
 8001158:	08d2      	lsrs	r2, r2, #3
 800115a:	4322      	orrs	r2, r4
 800115c:	2480      	movs	r4, #128	; 0x80
 800115e:	08db      	lsrs	r3, r3, #3
 8001160:	0324      	lsls	r4, r4, #12
 8001162:	4223      	tst	r3, r4
 8001164:	d007      	beq.n	8001176 <__aeabi_dsub+0x372>
 8001166:	08ce      	lsrs	r6, r1, #3
 8001168:	4226      	tst	r6, r4
 800116a:	d104      	bne.n	8001176 <__aeabi_dsub+0x372>
 800116c:	465d      	mov	r5, fp
 800116e:	0033      	movs	r3, r6
 8001170:	08c2      	lsrs	r2, r0, #3
 8001172:	0749      	lsls	r1, r1, #29
 8001174:	430a      	orrs	r2, r1
 8001176:	0f51      	lsrs	r1, r2, #29
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	08d2      	lsrs	r2, r2, #3
 800117c:	0749      	lsls	r1, r1, #29
 800117e:	430a      	orrs	r2, r1
 8001180:	0011      	movs	r1, r2
 8001182:	4319      	orrs	r1, r3
 8001184:	d100      	bne.n	8001188 <__aeabi_dsub+0x384>
 8001186:	e1c8      	b.n	800151a <__aeabi_dsub+0x716>
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0309      	lsls	r1, r1, #12
 800118c:	430b      	orrs	r3, r1
 800118e:	031b      	lsls	r3, r3, #12
 8001190:	49d5      	ldr	r1, [pc, #852]	; (80014e8 <__aeabi_dsub+0x6e4>)
 8001192:	0b1b      	lsrs	r3, r3, #12
 8001194:	e6da      	b.n	8000f4c <__aeabi_dsub+0x148>
 8001196:	49d5      	ldr	r1, [pc, #852]	; (80014ec <__aeabi_dsub+0x6e8>)
 8001198:	1ab6      	subs	r6, r6, r2
 800119a:	400b      	ands	r3, r1
 800119c:	4698      	mov	r8, r3
 800119e:	e6b5      	b.n	8000f0c <__aeabi_dsub+0x108>
 80011a0:	0020      	movs	r0, r4
 80011a2:	f000 fa65 	bl	8001670 <__clzsi2>
 80011a6:	0002      	movs	r2, r0
 80011a8:	3218      	adds	r2, #24
 80011aa:	2a1f      	cmp	r2, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_dsub+0x3ac>
 80011ae:	e68f      	b.n	8000ed0 <__aeabi_dsub+0xcc>
 80011b0:	0023      	movs	r3, r4
 80011b2:	3808      	subs	r0, #8
 80011b4:	4083      	lsls	r3, r0
 80011b6:	2400      	movs	r4, #0
 80011b8:	e692      	b.n	8000ee0 <__aeabi_dsub+0xdc>
 80011ba:	4308      	orrs	r0, r1
 80011bc:	0002      	movs	r2, r0
 80011be:	1e50      	subs	r0, r2, #1
 80011c0:	4182      	sbcs	r2, r0
 80011c2:	e66d      	b.n	8000ea0 <__aeabi_dsub+0x9c>
 80011c4:	4cca      	ldr	r4, [pc, #808]	; (80014f0 <__aeabi_dsub+0x6ec>)
 80011c6:	1c72      	adds	r2, r6, #1
 80011c8:	4222      	tst	r2, r4
 80011ca:	d000      	beq.n	80011ce <__aeabi_dsub+0x3ca>
 80011cc:	e0ad      	b.n	800132a <__aeabi_dsub+0x526>
 80011ce:	464a      	mov	r2, r9
 80011d0:	431a      	orrs	r2, r3
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d1b8      	bne.n	8001148 <__aeabi_dsub+0x344>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_dsub+0x3d8>
 80011da:	e158      	b.n	800148e <__aeabi_dsub+0x68a>
 80011dc:	000a      	movs	r2, r1
 80011de:	4302      	orrs	r2, r0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_dsub+0x3e0>
 80011e2:	e159      	b.n	8001498 <__aeabi_dsub+0x694>
 80011e4:	464a      	mov	r2, r9
 80011e6:	0759      	lsls	r1, r3, #29
 80011e8:	08d2      	lsrs	r2, r2, #3
 80011ea:	430a      	orrs	r2, r1
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	e786      	b.n	80010fe <__aeabi_dsub+0x2fa>
 80011f0:	464a      	mov	r2, r9
 80011f2:	0759      	lsls	r1, r3, #29
 80011f4:	08d2      	lsrs	r2, r2, #3
 80011f6:	430a      	orrs	r2, r1
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	e7c1      	b.n	8001180 <__aeabi_dsub+0x37c>
 80011fc:	4dba      	ldr	r5, [pc, #744]	; (80014e8 <__aeabi_dsub+0x6e4>)
 80011fe:	42aa      	cmp	r2, r5
 8001200:	d100      	bne.n	8001204 <__aeabi_dsub+0x400>
 8001202:	e11e      	b.n	8001442 <__aeabi_dsub+0x63e>
 8001204:	2580      	movs	r5, #128	; 0x80
 8001206:	042d      	lsls	r5, r5, #16
 8001208:	432b      	orrs	r3, r5
 800120a:	4664      	mov	r4, ip
 800120c:	2c38      	cmp	r4, #56	; 0x38
 800120e:	dc5d      	bgt.n	80012cc <__aeabi_dsub+0x4c8>
 8001210:	2c1f      	cmp	r4, #31
 8001212:	dd00      	ble.n	8001216 <__aeabi_dsub+0x412>
 8001214:	e0d0      	b.n	80013b8 <__aeabi_dsub+0x5b4>
 8001216:	2520      	movs	r5, #32
 8001218:	4667      	mov	r7, ip
 800121a:	1b2d      	subs	r5, r5, r4
 800121c:	464e      	mov	r6, r9
 800121e:	001c      	movs	r4, r3
 8001220:	40fe      	lsrs	r6, r7
 8001222:	40ac      	lsls	r4, r5
 8001224:	4334      	orrs	r4, r6
 8001226:	464e      	mov	r6, r9
 8001228:	40ae      	lsls	r6, r5
 800122a:	0035      	movs	r5, r6
 800122c:	40fb      	lsrs	r3, r7
 800122e:	1e6e      	subs	r6, r5, #1
 8001230:	41b5      	sbcs	r5, r6
 8001232:	1ac9      	subs	r1, r1, r3
 8001234:	432c      	orrs	r4, r5
 8001236:	e04e      	b.n	80012d6 <__aeabi_dsub+0x4d2>
 8001238:	464a      	mov	r2, r9
 800123a:	1a14      	subs	r4, r2, r0
 800123c:	45a1      	cmp	r9, r4
 800123e:	4192      	sbcs	r2, r2
 8001240:	4252      	negs	r2, r2
 8001242:	4690      	mov	r8, r2
 8001244:	1a5f      	subs	r7, r3, r1
 8001246:	003a      	movs	r2, r7
 8001248:	4647      	mov	r7, r8
 800124a:	1bd2      	subs	r2, r2, r7
 800124c:	4690      	mov	r8, r2
 800124e:	0212      	lsls	r2, r2, #8
 8001250:	d500      	bpl.n	8001254 <__aeabi_dsub+0x450>
 8001252:	e08b      	b.n	800136c <__aeabi_dsub+0x568>
 8001254:	4642      	mov	r2, r8
 8001256:	4322      	orrs	r2, r4
 8001258:	d000      	beq.n	800125c <__aeabi_dsub+0x458>
 800125a:	e630      	b.n	8000ebe <__aeabi_dsub+0xba>
 800125c:	2300      	movs	r3, #0
 800125e:	2500      	movs	r5, #0
 8001260:	e74d      	b.n	80010fe <__aeabi_dsub+0x2fa>
 8001262:	464a      	mov	r2, r9
 8001264:	0759      	lsls	r1, r3, #29
 8001266:	08d2      	lsrs	r2, r2, #3
 8001268:	430a      	orrs	r2, r1
 800126a:	08db      	lsrs	r3, r3, #3
 800126c:	e744      	b.n	80010f8 <__aeabi_dsub+0x2f4>
 800126e:	4642      	mov	r2, r8
 8001270:	4b9e      	ldr	r3, [pc, #632]	; (80014ec <__aeabi_dsub+0x6e8>)
 8001272:	0861      	lsrs	r1, r4, #1
 8001274:	401a      	ands	r2, r3
 8001276:	0013      	movs	r3, r2
 8001278:	2201      	movs	r2, #1
 800127a:	4014      	ands	r4, r2
 800127c:	430c      	orrs	r4, r1
 800127e:	07da      	lsls	r2, r3, #31
 8001280:	085b      	lsrs	r3, r3, #1
 8001282:	4698      	mov	r8, r3
 8001284:	4314      	orrs	r4, r2
 8001286:	e641      	b.n	8000f0c <__aeabi_dsub+0x108>
 8001288:	001a      	movs	r2, r3
 800128a:	3e1f      	subs	r6, #31
 800128c:	40f2      	lsrs	r2, r6
 800128e:	0016      	movs	r6, r2
 8001290:	2920      	cmp	r1, #32
 8001292:	d003      	beq.n	800129c <__aeabi_dsub+0x498>
 8001294:	2240      	movs	r2, #64	; 0x40
 8001296:	1a51      	subs	r1, r2, r1
 8001298:	408b      	lsls	r3, r1
 800129a:	431c      	orrs	r4, r3
 800129c:	1e62      	subs	r2, r4, #1
 800129e:	4194      	sbcs	r4, r2
 80012a0:	2300      	movs	r3, #0
 80012a2:	4334      	orrs	r4, r6
 80012a4:	4698      	mov	r8, r3
 80012a6:	2600      	movs	r6, #0
 80012a8:	e71d      	b.n	80010e6 <__aeabi_dsub+0x2e2>
 80012aa:	000c      	movs	r4, r1
 80012ac:	3a20      	subs	r2, #32
 80012ae:	40d4      	lsrs	r4, r2
 80012b0:	0022      	movs	r2, r4
 80012b2:	4664      	mov	r4, ip
 80012b4:	2c20      	cmp	r4, #32
 80012b6:	d004      	beq.n	80012c2 <__aeabi_dsub+0x4be>
 80012b8:	2740      	movs	r7, #64	; 0x40
 80012ba:	1b3f      	subs	r7, r7, r4
 80012bc:	40b9      	lsls	r1, r7
 80012be:	4308      	orrs	r0, r1
 80012c0:	4680      	mov	r8, r0
 80012c2:	4644      	mov	r4, r8
 80012c4:	1e61      	subs	r1, r4, #1
 80012c6:	418c      	sbcs	r4, r1
 80012c8:	4322      	orrs	r2, r4
 80012ca:	e5e9      	b.n	8000ea0 <__aeabi_dsub+0x9c>
 80012cc:	464c      	mov	r4, r9
 80012ce:	4323      	orrs	r3, r4
 80012d0:	001c      	movs	r4, r3
 80012d2:	1e63      	subs	r3, r4, #1
 80012d4:	419c      	sbcs	r4, r3
 80012d6:	1b04      	subs	r4, r0, r4
 80012d8:	42a0      	cmp	r0, r4
 80012da:	419b      	sbcs	r3, r3
 80012dc:	425b      	negs	r3, r3
 80012de:	1acb      	subs	r3, r1, r3
 80012e0:	4698      	mov	r8, r3
 80012e2:	465d      	mov	r5, fp
 80012e4:	0016      	movs	r6, r2
 80012e6:	e5e2      	b.n	8000eae <__aeabi_dsub+0xaa>
 80012e8:	464e      	mov	r6, r9
 80012ea:	431e      	orrs	r6, r3
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dsub+0x4ec>
 80012ee:	e0ae      	b.n	800144e <__aeabi_dsub+0x64a>
 80012f0:	1e66      	subs	r6, r4, #1
 80012f2:	2c01      	cmp	r4, #1
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dsub+0x4f4>
 80012f6:	e0fd      	b.n	80014f4 <__aeabi_dsub+0x6f0>
 80012f8:	4f7b      	ldr	r7, [pc, #492]	; (80014e8 <__aeabi_dsub+0x6e4>)
 80012fa:	42bc      	cmp	r4, r7
 80012fc:	d100      	bne.n	8001300 <__aeabi_dsub+0x4fc>
 80012fe:	e107      	b.n	8001510 <__aeabi_dsub+0x70c>
 8001300:	46b4      	mov	ip, r6
 8001302:	e69b      	b.n	800103c <__aeabi_dsub+0x238>
 8001304:	4664      	mov	r4, ip
 8001306:	2220      	movs	r2, #32
 8001308:	1b12      	subs	r2, r2, r4
 800130a:	000c      	movs	r4, r1
 800130c:	4094      	lsls	r4, r2
 800130e:	0007      	movs	r7, r0
 8001310:	4090      	lsls	r0, r2
 8001312:	46a0      	mov	r8, r4
 8001314:	4664      	mov	r4, ip
 8001316:	1e42      	subs	r2, r0, #1
 8001318:	4190      	sbcs	r0, r2
 800131a:	4662      	mov	r2, ip
 800131c:	40e7      	lsrs	r7, r4
 800131e:	4644      	mov	r4, r8
 8001320:	40d1      	lsrs	r1, r2
 8001322:	433c      	orrs	r4, r7
 8001324:	4304      	orrs	r4, r0
 8001326:	185b      	adds	r3, r3, r1
 8001328:	e6f3      	b.n	8001112 <__aeabi_dsub+0x30e>
 800132a:	4c6f      	ldr	r4, [pc, #444]	; (80014e8 <__aeabi_dsub+0x6e4>)
 800132c:	42a2      	cmp	r2, r4
 800132e:	d100      	bne.n	8001332 <__aeabi_dsub+0x52e>
 8001330:	e0d5      	b.n	80014de <__aeabi_dsub+0x6da>
 8001332:	4448      	add	r0, r9
 8001334:	185b      	adds	r3, r3, r1
 8001336:	4548      	cmp	r0, r9
 8001338:	4189      	sbcs	r1, r1
 800133a:	4249      	negs	r1, r1
 800133c:	185b      	adds	r3, r3, r1
 800133e:	07dc      	lsls	r4, r3, #31
 8001340:	0840      	lsrs	r0, r0, #1
 8001342:	085b      	lsrs	r3, r3, #1
 8001344:	4698      	mov	r8, r3
 8001346:	0016      	movs	r6, r2
 8001348:	4304      	orrs	r4, r0
 800134a:	e6cc      	b.n	80010e6 <__aeabi_dsub+0x2e2>
 800134c:	2a00      	cmp	r2, #0
 800134e:	d000      	beq.n	8001352 <__aeabi_dsub+0x54e>
 8001350:	e082      	b.n	8001458 <__aeabi_dsub+0x654>
 8001352:	000a      	movs	r2, r1
 8001354:	4302      	orrs	r2, r0
 8001356:	d140      	bne.n	80013da <__aeabi_dsub+0x5d6>
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	2500      	movs	r5, #0
 800135c:	031b      	lsls	r3, r3, #12
 800135e:	e713      	b.n	8001188 <__aeabi_dsub+0x384>
 8001360:	074b      	lsls	r3, r1, #29
 8001362:	08c2      	lsrs	r2, r0, #3
 8001364:	431a      	orrs	r2, r3
 8001366:	465d      	mov	r5, fp
 8001368:	08cb      	lsrs	r3, r1, #3
 800136a:	e6c5      	b.n	80010f8 <__aeabi_dsub+0x2f4>
 800136c:	464a      	mov	r2, r9
 800136e:	1a84      	subs	r4, r0, r2
 8001370:	42a0      	cmp	r0, r4
 8001372:	4192      	sbcs	r2, r2
 8001374:	1acb      	subs	r3, r1, r3
 8001376:	4252      	negs	r2, r2
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	4698      	mov	r8, r3
 800137c:	465d      	mov	r5, fp
 800137e:	e59e      	b.n	8000ebe <__aeabi_dsub+0xba>
 8001380:	464a      	mov	r2, r9
 8001382:	0759      	lsls	r1, r3, #29
 8001384:	08d2      	lsrs	r2, r2, #3
 8001386:	430a      	orrs	r2, r1
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	e6f9      	b.n	8001180 <__aeabi_dsub+0x37c>
 800138c:	464a      	mov	r2, r9
 800138e:	1a14      	subs	r4, r2, r0
 8001390:	45a1      	cmp	r9, r4
 8001392:	4192      	sbcs	r2, r2
 8001394:	1a5b      	subs	r3, r3, r1
 8001396:	4252      	negs	r2, r2
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	4698      	mov	r8, r3
 800139c:	2601      	movs	r6, #1
 800139e:	e586      	b.n	8000eae <__aeabi_dsub+0xaa>
 80013a0:	464a      	mov	r2, r9
 80013a2:	0759      	lsls	r1, r3, #29
 80013a4:	08d2      	lsrs	r2, r2, #3
 80013a6:	430a      	orrs	r2, r1
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	e6a5      	b.n	80010f8 <__aeabi_dsub+0x2f4>
 80013ac:	464c      	mov	r4, r9
 80013ae:	4323      	orrs	r3, r4
 80013b0:	001c      	movs	r4, r3
 80013b2:	1e63      	subs	r3, r4, #1
 80013b4:	419c      	sbcs	r4, r3
 80013b6:	e65b      	b.n	8001070 <__aeabi_dsub+0x26c>
 80013b8:	4665      	mov	r5, ip
 80013ba:	001e      	movs	r6, r3
 80013bc:	3d20      	subs	r5, #32
 80013be:	40ee      	lsrs	r6, r5
 80013c0:	2c20      	cmp	r4, #32
 80013c2:	d005      	beq.n	80013d0 <__aeabi_dsub+0x5cc>
 80013c4:	2540      	movs	r5, #64	; 0x40
 80013c6:	1b2d      	subs	r5, r5, r4
 80013c8:	40ab      	lsls	r3, r5
 80013ca:	464c      	mov	r4, r9
 80013cc:	431c      	orrs	r4, r3
 80013ce:	46a2      	mov	sl, r4
 80013d0:	4654      	mov	r4, sl
 80013d2:	1e63      	subs	r3, r4, #1
 80013d4:	419c      	sbcs	r4, r3
 80013d6:	4334      	orrs	r4, r6
 80013d8:	e77d      	b.n	80012d6 <__aeabi_dsub+0x4d2>
 80013da:	074b      	lsls	r3, r1, #29
 80013dc:	08c2      	lsrs	r2, r0, #3
 80013de:	431a      	orrs	r2, r3
 80013e0:	465d      	mov	r5, fp
 80013e2:	08cb      	lsrs	r3, r1, #3
 80013e4:	e6cc      	b.n	8001180 <__aeabi_dsub+0x37c>
 80013e6:	000a      	movs	r2, r1
 80013e8:	4302      	orrs	r2, r0
 80013ea:	d100      	bne.n	80013ee <__aeabi_dsub+0x5ea>
 80013ec:	e736      	b.n	800125c <__aeabi_dsub+0x458>
 80013ee:	074b      	lsls	r3, r1, #29
 80013f0:	08c2      	lsrs	r2, r0, #3
 80013f2:	431a      	orrs	r2, r3
 80013f4:	465d      	mov	r5, fp
 80013f6:	08cb      	lsrs	r3, r1, #3
 80013f8:	e681      	b.n	80010fe <__aeabi_dsub+0x2fa>
 80013fa:	464a      	mov	r2, r9
 80013fc:	1a84      	subs	r4, r0, r2
 80013fe:	42a0      	cmp	r0, r4
 8001400:	4192      	sbcs	r2, r2
 8001402:	1acb      	subs	r3, r1, r3
 8001404:	4252      	negs	r2, r2
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	4698      	mov	r8, r3
 800140a:	465d      	mov	r5, fp
 800140c:	2601      	movs	r6, #1
 800140e:	e54e      	b.n	8000eae <__aeabi_dsub+0xaa>
 8001410:	074b      	lsls	r3, r1, #29
 8001412:	08c2      	lsrs	r2, r0, #3
 8001414:	431a      	orrs	r2, r3
 8001416:	08cb      	lsrs	r3, r1, #3
 8001418:	e6b2      	b.n	8001180 <__aeabi_dsub+0x37c>
 800141a:	464a      	mov	r2, r9
 800141c:	1a14      	subs	r4, r2, r0
 800141e:	45a1      	cmp	r9, r4
 8001420:	4192      	sbcs	r2, r2
 8001422:	1a5f      	subs	r7, r3, r1
 8001424:	4252      	negs	r2, r2
 8001426:	1aba      	subs	r2, r7, r2
 8001428:	4690      	mov	r8, r2
 800142a:	0212      	lsls	r2, r2, #8
 800142c:	d56b      	bpl.n	8001506 <__aeabi_dsub+0x702>
 800142e:	464a      	mov	r2, r9
 8001430:	1a84      	subs	r4, r0, r2
 8001432:	42a0      	cmp	r0, r4
 8001434:	4192      	sbcs	r2, r2
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	4252      	negs	r2, r2
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	4698      	mov	r8, r3
 800143e:	465d      	mov	r5, fp
 8001440:	e564      	b.n	8000f0c <__aeabi_dsub+0x108>
 8001442:	074b      	lsls	r3, r1, #29
 8001444:	08c2      	lsrs	r2, r0, #3
 8001446:	431a      	orrs	r2, r3
 8001448:	465d      	mov	r5, fp
 800144a:	08cb      	lsrs	r3, r1, #3
 800144c:	e698      	b.n	8001180 <__aeabi_dsub+0x37c>
 800144e:	074b      	lsls	r3, r1, #29
 8001450:	08c2      	lsrs	r2, r0, #3
 8001452:	431a      	orrs	r2, r3
 8001454:	08cb      	lsrs	r3, r1, #3
 8001456:	e64f      	b.n	80010f8 <__aeabi_dsub+0x2f4>
 8001458:	000a      	movs	r2, r1
 800145a:	4302      	orrs	r2, r0
 800145c:	d090      	beq.n	8001380 <__aeabi_dsub+0x57c>
 800145e:	464a      	mov	r2, r9
 8001460:	075c      	lsls	r4, r3, #29
 8001462:	08d2      	lsrs	r2, r2, #3
 8001464:	4314      	orrs	r4, r2
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	0312      	lsls	r2, r2, #12
 800146c:	4213      	tst	r3, r2
 800146e:	d008      	beq.n	8001482 <__aeabi_dsub+0x67e>
 8001470:	08ce      	lsrs	r6, r1, #3
 8001472:	4216      	tst	r6, r2
 8001474:	d105      	bne.n	8001482 <__aeabi_dsub+0x67e>
 8001476:	08c0      	lsrs	r0, r0, #3
 8001478:	0749      	lsls	r1, r1, #29
 800147a:	4308      	orrs	r0, r1
 800147c:	0004      	movs	r4, r0
 800147e:	465d      	mov	r5, fp
 8001480:	0033      	movs	r3, r6
 8001482:	0f61      	lsrs	r1, r4, #29
 8001484:	00e2      	lsls	r2, r4, #3
 8001486:	0749      	lsls	r1, r1, #29
 8001488:	08d2      	lsrs	r2, r2, #3
 800148a:	430a      	orrs	r2, r1
 800148c:	e678      	b.n	8001180 <__aeabi_dsub+0x37c>
 800148e:	074b      	lsls	r3, r1, #29
 8001490:	08c2      	lsrs	r2, r0, #3
 8001492:	431a      	orrs	r2, r3
 8001494:	08cb      	lsrs	r3, r1, #3
 8001496:	e632      	b.n	80010fe <__aeabi_dsub+0x2fa>
 8001498:	4448      	add	r0, r9
 800149a:	185b      	adds	r3, r3, r1
 800149c:	4548      	cmp	r0, r9
 800149e:	4192      	sbcs	r2, r2
 80014a0:	4698      	mov	r8, r3
 80014a2:	4252      	negs	r2, r2
 80014a4:	4490      	add	r8, r2
 80014a6:	4643      	mov	r3, r8
 80014a8:	0004      	movs	r4, r0
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	d400      	bmi.n	80014b0 <__aeabi_dsub+0x6ac>
 80014ae:	e61a      	b.n	80010e6 <__aeabi_dsub+0x2e2>
 80014b0:	4642      	mov	r2, r8
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <__aeabi_dsub+0x6e8>)
 80014b4:	2601      	movs	r6, #1
 80014b6:	401a      	ands	r2, r3
 80014b8:	4690      	mov	r8, r2
 80014ba:	e614      	b.n	80010e6 <__aeabi_dsub+0x2e2>
 80014bc:	4666      	mov	r6, ip
 80014be:	001f      	movs	r7, r3
 80014c0:	3e20      	subs	r6, #32
 80014c2:	40f7      	lsrs	r7, r6
 80014c4:	2c20      	cmp	r4, #32
 80014c6:	d005      	beq.n	80014d4 <__aeabi_dsub+0x6d0>
 80014c8:	2640      	movs	r6, #64	; 0x40
 80014ca:	1b36      	subs	r6, r6, r4
 80014cc:	40b3      	lsls	r3, r6
 80014ce:	464c      	mov	r4, r9
 80014d0:	431c      	orrs	r4, r3
 80014d2:	46a2      	mov	sl, r4
 80014d4:	4654      	mov	r4, sl
 80014d6:	1e63      	subs	r3, r4, #1
 80014d8:	419c      	sbcs	r4, r3
 80014da:	433c      	orrs	r4, r7
 80014dc:	e5c8      	b.n	8001070 <__aeabi_dsub+0x26c>
 80014de:	0011      	movs	r1, r2
 80014e0:	2300      	movs	r3, #0
 80014e2:	2200      	movs	r2, #0
 80014e4:	e532      	b.n	8000f4c <__aeabi_dsub+0x148>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	000007ff 	.word	0x000007ff
 80014ec:	ff7fffff 	.word	0xff7fffff
 80014f0:	000007fe 	.word	0x000007fe
 80014f4:	464a      	mov	r2, r9
 80014f6:	1814      	adds	r4, r2, r0
 80014f8:	4284      	cmp	r4, r0
 80014fa:	4192      	sbcs	r2, r2
 80014fc:	185b      	adds	r3, r3, r1
 80014fe:	4698      	mov	r8, r3
 8001500:	4252      	negs	r2, r2
 8001502:	4490      	add	r8, r2
 8001504:	e5e9      	b.n	80010da <__aeabi_dsub+0x2d6>
 8001506:	4642      	mov	r2, r8
 8001508:	4322      	orrs	r2, r4
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0x70a>
 800150c:	e6a6      	b.n	800125c <__aeabi_dsub+0x458>
 800150e:	e5ea      	b.n	80010e6 <__aeabi_dsub+0x2e2>
 8001510:	074b      	lsls	r3, r1, #29
 8001512:	08c2      	lsrs	r2, r0, #3
 8001514:	431a      	orrs	r2, r3
 8001516:	08cb      	lsrs	r3, r1, #3
 8001518:	e632      	b.n	8001180 <__aeabi_dsub+0x37c>
 800151a:	2200      	movs	r2, #0
 800151c:	4901      	ldr	r1, [pc, #4]	; (8001524 <__aeabi_dsub+0x720>)
 800151e:	0013      	movs	r3, r2
 8001520:	e514      	b.n	8000f4c <__aeabi_dsub+0x148>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	000007ff 	.word	0x000007ff

08001528 <__aeabi_d2iz>:
 8001528:	000a      	movs	r2, r1
 800152a:	b530      	push	{r4, r5, lr}
 800152c:	4c13      	ldr	r4, [pc, #76]	; (800157c <__aeabi_d2iz+0x54>)
 800152e:	0053      	lsls	r3, r2, #1
 8001530:	0309      	lsls	r1, r1, #12
 8001532:	0005      	movs	r5, r0
 8001534:	0b09      	lsrs	r1, r1, #12
 8001536:	2000      	movs	r0, #0
 8001538:	0d5b      	lsrs	r3, r3, #21
 800153a:	0fd2      	lsrs	r2, r2, #31
 800153c:	42a3      	cmp	r3, r4
 800153e:	dd04      	ble.n	800154a <__aeabi_d2iz+0x22>
 8001540:	480f      	ldr	r0, [pc, #60]	; (8001580 <__aeabi_d2iz+0x58>)
 8001542:	4283      	cmp	r3, r0
 8001544:	dd02      	ble.n	800154c <__aeabi_d2iz+0x24>
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <__aeabi_d2iz+0x5c>)
 8001548:	18d0      	adds	r0, r2, r3
 800154a:	bd30      	pop	{r4, r5, pc}
 800154c:	2080      	movs	r0, #128	; 0x80
 800154e:	0340      	lsls	r0, r0, #13
 8001550:	4301      	orrs	r1, r0
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <__aeabi_d2iz+0x60>)
 8001554:	1ac0      	subs	r0, r0, r3
 8001556:	281f      	cmp	r0, #31
 8001558:	dd08      	ble.n	800156c <__aeabi_d2iz+0x44>
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <__aeabi_d2iz+0x64>)
 800155c:	1ac3      	subs	r3, r0, r3
 800155e:	40d9      	lsrs	r1, r3
 8001560:	000b      	movs	r3, r1
 8001562:	4258      	negs	r0, r3
 8001564:	2a00      	cmp	r2, #0
 8001566:	d1f0      	bne.n	800154a <__aeabi_d2iz+0x22>
 8001568:	0018      	movs	r0, r3
 800156a:	e7ee      	b.n	800154a <__aeabi_d2iz+0x22>
 800156c:	4c08      	ldr	r4, [pc, #32]	; (8001590 <__aeabi_d2iz+0x68>)
 800156e:	40c5      	lsrs	r5, r0
 8001570:	46a4      	mov	ip, r4
 8001572:	4463      	add	r3, ip
 8001574:	4099      	lsls	r1, r3
 8001576:	000b      	movs	r3, r1
 8001578:	432b      	orrs	r3, r5
 800157a:	e7f2      	b.n	8001562 <__aeabi_d2iz+0x3a>
 800157c:	000003fe 	.word	0x000003fe
 8001580:	0000041d 	.word	0x0000041d
 8001584:	7fffffff 	.word	0x7fffffff
 8001588:	00000433 	.word	0x00000433
 800158c:	00000413 	.word	0x00000413
 8001590:	fffffbed 	.word	0xfffffbed

08001594 <__aeabi_i2d>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	2800      	cmp	r0, #0
 8001598:	d016      	beq.n	80015c8 <__aeabi_i2d+0x34>
 800159a:	17c3      	asrs	r3, r0, #31
 800159c:	18c5      	adds	r5, r0, r3
 800159e:	405d      	eors	r5, r3
 80015a0:	0fc4      	lsrs	r4, r0, #31
 80015a2:	0028      	movs	r0, r5
 80015a4:	f000 f864 	bl	8001670 <__clzsi2>
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <__aeabi_i2d+0x5c>)
 80015aa:	1a12      	subs	r2, r2, r0
 80015ac:	280a      	cmp	r0, #10
 80015ae:	dc16      	bgt.n	80015de <__aeabi_i2d+0x4a>
 80015b0:	0003      	movs	r3, r0
 80015b2:	002e      	movs	r6, r5
 80015b4:	3315      	adds	r3, #21
 80015b6:	409e      	lsls	r6, r3
 80015b8:	230b      	movs	r3, #11
 80015ba:	1a18      	subs	r0, r3, r0
 80015bc:	40c5      	lsrs	r5, r0
 80015be:	0553      	lsls	r3, r2, #21
 80015c0:	032d      	lsls	r5, r5, #12
 80015c2:	0b2d      	lsrs	r5, r5, #12
 80015c4:	0d5b      	lsrs	r3, r3, #21
 80015c6:	e003      	b.n	80015d0 <__aeabi_i2d+0x3c>
 80015c8:	2400      	movs	r4, #0
 80015ca:	2300      	movs	r3, #0
 80015cc:	2500      	movs	r5, #0
 80015ce:	2600      	movs	r6, #0
 80015d0:	051b      	lsls	r3, r3, #20
 80015d2:	432b      	orrs	r3, r5
 80015d4:	07e4      	lsls	r4, r4, #31
 80015d6:	4323      	orrs	r3, r4
 80015d8:	0030      	movs	r0, r6
 80015da:	0019      	movs	r1, r3
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
 80015de:	380b      	subs	r0, #11
 80015e0:	4085      	lsls	r5, r0
 80015e2:	0553      	lsls	r3, r2, #21
 80015e4:	032d      	lsls	r5, r5, #12
 80015e6:	2600      	movs	r6, #0
 80015e8:	0b2d      	lsrs	r5, r5, #12
 80015ea:	0d5b      	lsrs	r3, r3, #21
 80015ec:	e7f0      	b.n	80015d0 <__aeabi_i2d+0x3c>
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	0000041e 	.word	0x0000041e

080015f4 <__aeabi_cdrcmple>:
 80015f4:	4684      	mov	ip, r0
 80015f6:	1c10      	adds	r0, r2, #0
 80015f8:	4662      	mov	r2, ip
 80015fa:	468c      	mov	ip, r1
 80015fc:	1c19      	adds	r1, r3, #0
 80015fe:	4663      	mov	r3, ip
 8001600:	e000      	b.n	8001604 <__aeabi_cdcmpeq>
 8001602:	46c0      	nop			; (mov r8, r8)

08001604 <__aeabi_cdcmpeq>:
 8001604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001606:	f000 f8ff 	bl	8001808 <__ledf2>
 800160a:	2800      	cmp	r0, #0
 800160c:	d401      	bmi.n	8001612 <__aeabi_cdcmpeq+0xe>
 800160e:	2100      	movs	r1, #0
 8001610:	42c8      	cmn	r0, r1
 8001612:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001614 <__aeabi_dcmpeq>:
 8001614:	b510      	push	{r4, lr}
 8001616:	f000 f849 	bl	80016ac <__eqdf2>
 800161a:	4240      	negs	r0, r0
 800161c:	3001      	adds	r0, #1
 800161e:	bd10      	pop	{r4, pc}

08001620 <__aeabi_dcmplt>:
 8001620:	b510      	push	{r4, lr}
 8001622:	f000 f8f1 	bl	8001808 <__ledf2>
 8001626:	2800      	cmp	r0, #0
 8001628:	db01      	blt.n	800162e <__aeabi_dcmplt+0xe>
 800162a:	2000      	movs	r0, #0
 800162c:	bd10      	pop	{r4, pc}
 800162e:	2001      	movs	r0, #1
 8001630:	bd10      	pop	{r4, pc}
 8001632:	46c0      	nop			; (mov r8, r8)

08001634 <__aeabi_dcmple>:
 8001634:	b510      	push	{r4, lr}
 8001636:	f000 f8e7 	bl	8001808 <__ledf2>
 800163a:	2800      	cmp	r0, #0
 800163c:	dd01      	ble.n	8001642 <__aeabi_dcmple+0xe>
 800163e:	2000      	movs	r0, #0
 8001640:	bd10      	pop	{r4, pc}
 8001642:	2001      	movs	r0, #1
 8001644:	bd10      	pop	{r4, pc}
 8001646:	46c0      	nop			; (mov r8, r8)

08001648 <__aeabi_dcmpgt>:
 8001648:	b510      	push	{r4, lr}
 800164a:	f000 f86b 	bl	8001724 <__gedf2>
 800164e:	2800      	cmp	r0, #0
 8001650:	dc01      	bgt.n	8001656 <__aeabi_dcmpgt+0xe>
 8001652:	2000      	movs	r0, #0
 8001654:	bd10      	pop	{r4, pc}
 8001656:	2001      	movs	r0, #1
 8001658:	bd10      	pop	{r4, pc}
 800165a:	46c0      	nop			; (mov r8, r8)

0800165c <__aeabi_dcmpge>:
 800165c:	b510      	push	{r4, lr}
 800165e:	f000 f861 	bl	8001724 <__gedf2>
 8001662:	2800      	cmp	r0, #0
 8001664:	da01      	bge.n	800166a <__aeabi_dcmpge+0xe>
 8001666:	2000      	movs	r0, #0
 8001668:	bd10      	pop	{r4, pc}
 800166a:	2001      	movs	r0, #1
 800166c:	bd10      	pop	{r4, pc}
 800166e:	46c0      	nop			; (mov r8, r8)

08001670 <__clzsi2>:
 8001670:	211c      	movs	r1, #28
 8001672:	2301      	movs	r3, #1
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	4298      	cmp	r0, r3
 8001678:	d301      	bcc.n	800167e <__clzsi2+0xe>
 800167a:	0c00      	lsrs	r0, r0, #16
 800167c:	3910      	subs	r1, #16
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	4298      	cmp	r0, r3
 8001682:	d301      	bcc.n	8001688 <__clzsi2+0x18>
 8001684:	0a00      	lsrs	r0, r0, #8
 8001686:	3908      	subs	r1, #8
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	4298      	cmp	r0, r3
 800168c:	d301      	bcc.n	8001692 <__clzsi2+0x22>
 800168e:	0900      	lsrs	r0, r0, #4
 8001690:	3904      	subs	r1, #4
 8001692:	a202      	add	r2, pc, #8	; (adr r2, 800169c <__clzsi2+0x2c>)
 8001694:	5c10      	ldrb	r0, [r2, r0]
 8001696:	1840      	adds	r0, r0, r1
 8001698:	4770      	bx	lr
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	02020304 	.word	0x02020304
 80016a0:	01010101 	.word	0x01010101
	...

080016ac <__eqdf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	464f      	mov	r7, r9
 80016b0:	4646      	mov	r6, r8
 80016b2:	46d6      	mov	lr, sl
 80016b4:	4694      	mov	ip, r2
 80016b6:	4691      	mov	r9, r2
 80016b8:	031a      	lsls	r2, r3, #12
 80016ba:	0b12      	lsrs	r2, r2, #12
 80016bc:	4d18      	ldr	r5, [pc, #96]	; (8001720 <__eqdf2+0x74>)
 80016be:	b5c0      	push	{r6, r7, lr}
 80016c0:	004c      	lsls	r4, r1, #1
 80016c2:	030f      	lsls	r7, r1, #12
 80016c4:	4692      	mov	sl, r2
 80016c6:	005a      	lsls	r2, r3, #1
 80016c8:	0006      	movs	r6, r0
 80016ca:	4680      	mov	r8, r0
 80016cc:	0b3f      	lsrs	r7, r7, #12
 80016ce:	2001      	movs	r0, #1
 80016d0:	0d64      	lsrs	r4, r4, #21
 80016d2:	0fc9      	lsrs	r1, r1, #31
 80016d4:	0d52      	lsrs	r2, r2, #21
 80016d6:	0fdb      	lsrs	r3, r3, #31
 80016d8:	42ac      	cmp	r4, r5
 80016da:	d00a      	beq.n	80016f2 <__eqdf2+0x46>
 80016dc:	42aa      	cmp	r2, r5
 80016de:	d003      	beq.n	80016e8 <__eqdf2+0x3c>
 80016e0:	4294      	cmp	r4, r2
 80016e2:	d101      	bne.n	80016e8 <__eqdf2+0x3c>
 80016e4:	4557      	cmp	r7, sl
 80016e6:	d00d      	beq.n	8001704 <__eqdf2+0x58>
 80016e8:	bce0      	pop	{r5, r6, r7}
 80016ea:	46ba      	mov	sl, r7
 80016ec:	46b1      	mov	r9, r6
 80016ee:	46a8      	mov	r8, r5
 80016f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f2:	003d      	movs	r5, r7
 80016f4:	4335      	orrs	r5, r6
 80016f6:	d1f7      	bne.n	80016e8 <__eqdf2+0x3c>
 80016f8:	42a2      	cmp	r2, r4
 80016fa:	d1f5      	bne.n	80016e8 <__eqdf2+0x3c>
 80016fc:	4652      	mov	r2, sl
 80016fe:	4665      	mov	r5, ip
 8001700:	432a      	orrs	r2, r5
 8001702:	d1f1      	bne.n	80016e8 <__eqdf2+0x3c>
 8001704:	2001      	movs	r0, #1
 8001706:	45c8      	cmp	r8, r9
 8001708:	d1ee      	bne.n	80016e8 <__eqdf2+0x3c>
 800170a:	4299      	cmp	r1, r3
 800170c:	d006      	beq.n	800171c <__eqdf2+0x70>
 800170e:	2c00      	cmp	r4, #0
 8001710:	d1ea      	bne.n	80016e8 <__eqdf2+0x3c>
 8001712:	433e      	orrs	r6, r7
 8001714:	0030      	movs	r0, r6
 8001716:	1e46      	subs	r6, r0, #1
 8001718:	41b0      	sbcs	r0, r6
 800171a:	e7e5      	b.n	80016e8 <__eqdf2+0x3c>
 800171c:	2000      	movs	r0, #0
 800171e:	e7e3      	b.n	80016e8 <__eqdf2+0x3c>
 8001720:	000007ff 	.word	0x000007ff

08001724 <__gedf2>:
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	464e      	mov	r6, r9
 8001728:	4645      	mov	r5, r8
 800172a:	4657      	mov	r7, sl
 800172c:	46de      	mov	lr, fp
 800172e:	0004      	movs	r4, r0
 8001730:	0018      	movs	r0, r3
 8001732:	b5e0      	push	{r5, r6, r7, lr}
 8001734:	0016      	movs	r6, r2
 8001736:	031b      	lsls	r3, r3, #12
 8001738:	0b1b      	lsrs	r3, r3, #12
 800173a:	4d32      	ldr	r5, [pc, #200]	; (8001804 <__gedf2+0xe0>)
 800173c:	030f      	lsls	r7, r1, #12
 800173e:	004a      	lsls	r2, r1, #1
 8001740:	4699      	mov	r9, r3
 8001742:	0043      	lsls	r3, r0, #1
 8001744:	46a4      	mov	ip, r4
 8001746:	46b0      	mov	r8, r6
 8001748:	0b3f      	lsrs	r7, r7, #12
 800174a:	0d52      	lsrs	r2, r2, #21
 800174c:	0fc9      	lsrs	r1, r1, #31
 800174e:	0d5b      	lsrs	r3, r3, #21
 8001750:	0fc0      	lsrs	r0, r0, #31
 8001752:	42aa      	cmp	r2, r5
 8001754:	d029      	beq.n	80017aa <__gedf2+0x86>
 8001756:	42ab      	cmp	r3, r5
 8001758:	d018      	beq.n	800178c <__gedf2+0x68>
 800175a:	2a00      	cmp	r2, #0
 800175c:	d12a      	bne.n	80017b4 <__gedf2+0x90>
 800175e:	433c      	orrs	r4, r7
 8001760:	46a3      	mov	fp, r4
 8001762:	4265      	negs	r5, r4
 8001764:	4165      	adcs	r5, r4
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <__gedf2+0x4c>
 800176a:	464c      	mov	r4, r9
 800176c:	4326      	orrs	r6, r4
 800176e:	d027      	beq.n	80017c0 <__gedf2+0x9c>
 8001770:	2d00      	cmp	r5, #0
 8001772:	d115      	bne.n	80017a0 <__gedf2+0x7c>
 8001774:	4281      	cmp	r1, r0
 8001776:	d028      	beq.n	80017ca <__gedf2+0xa6>
 8001778:	2002      	movs	r0, #2
 800177a:	3901      	subs	r1, #1
 800177c:	4008      	ands	r0, r1
 800177e:	3801      	subs	r0, #1
 8001780:	bcf0      	pop	{r4, r5, r6, r7}
 8001782:	46bb      	mov	fp, r7
 8001784:	46b2      	mov	sl, r6
 8001786:	46a9      	mov	r9, r5
 8001788:	46a0      	mov	r8, r4
 800178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178c:	464d      	mov	r5, r9
 800178e:	432e      	orrs	r6, r5
 8001790:	d12f      	bne.n	80017f2 <__gedf2+0xce>
 8001792:	2a00      	cmp	r2, #0
 8001794:	d1ee      	bne.n	8001774 <__gedf2+0x50>
 8001796:	433c      	orrs	r4, r7
 8001798:	4265      	negs	r5, r4
 800179a:	4165      	adcs	r5, r4
 800179c:	2d00      	cmp	r5, #0
 800179e:	d0e9      	beq.n	8001774 <__gedf2+0x50>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d1ed      	bne.n	8001780 <__gedf2+0x5c>
 80017a4:	2001      	movs	r0, #1
 80017a6:	4240      	negs	r0, r0
 80017a8:	e7ea      	b.n	8001780 <__gedf2+0x5c>
 80017aa:	003d      	movs	r5, r7
 80017ac:	4325      	orrs	r5, r4
 80017ae:	d120      	bne.n	80017f2 <__gedf2+0xce>
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d0eb      	beq.n	800178c <__gedf2+0x68>
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1dd      	bne.n	8001774 <__gedf2+0x50>
 80017b8:	464c      	mov	r4, r9
 80017ba:	4326      	orrs	r6, r4
 80017bc:	d1da      	bne.n	8001774 <__gedf2+0x50>
 80017be:	e7db      	b.n	8001778 <__gedf2+0x54>
 80017c0:	465b      	mov	r3, fp
 80017c2:	2000      	movs	r0, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0db      	beq.n	8001780 <__gedf2+0x5c>
 80017c8:	e7d6      	b.n	8001778 <__gedf2+0x54>
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dc0a      	bgt.n	80017e4 <__gedf2+0xc0>
 80017ce:	dbe7      	blt.n	80017a0 <__gedf2+0x7c>
 80017d0:	454f      	cmp	r7, r9
 80017d2:	d8d1      	bhi.n	8001778 <__gedf2+0x54>
 80017d4:	d010      	beq.n	80017f8 <__gedf2+0xd4>
 80017d6:	2000      	movs	r0, #0
 80017d8:	454f      	cmp	r7, r9
 80017da:	d2d1      	bcs.n	8001780 <__gedf2+0x5c>
 80017dc:	2900      	cmp	r1, #0
 80017de:	d0e1      	beq.n	80017a4 <__gedf2+0x80>
 80017e0:	0008      	movs	r0, r1
 80017e2:	e7cd      	b.n	8001780 <__gedf2+0x5c>
 80017e4:	4243      	negs	r3, r0
 80017e6:	4158      	adcs	r0, r3
 80017e8:	2302      	movs	r3, #2
 80017ea:	4240      	negs	r0, r0
 80017ec:	4018      	ands	r0, r3
 80017ee:	3801      	subs	r0, #1
 80017f0:	e7c6      	b.n	8001780 <__gedf2+0x5c>
 80017f2:	2002      	movs	r0, #2
 80017f4:	4240      	negs	r0, r0
 80017f6:	e7c3      	b.n	8001780 <__gedf2+0x5c>
 80017f8:	45c4      	cmp	ip, r8
 80017fa:	d8bd      	bhi.n	8001778 <__gedf2+0x54>
 80017fc:	2000      	movs	r0, #0
 80017fe:	45c4      	cmp	ip, r8
 8001800:	d2be      	bcs.n	8001780 <__gedf2+0x5c>
 8001802:	e7eb      	b.n	80017dc <__gedf2+0xb8>
 8001804:	000007ff 	.word	0x000007ff

08001808 <__ledf2>:
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	464e      	mov	r6, r9
 800180c:	4645      	mov	r5, r8
 800180e:	4657      	mov	r7, sl
 8001810:	46de      	mov	lr, fp
 8001812:	0004      	movs	r4, r0
 8001814:	0018      	movs	r0, r3
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	0016      	movs	r6, r2
 800181a:	031b      	lsls	r3, r3, #12
 800181c:	0b1b      	lsrs	r3, r3, #12
 800181e:	4d31      	ldr	r5, [pc, #196]	; (80018e4 <__ledf2+0xdc>)
 8001820:	030f      	lsls	r7, r1, #12
 8001822:	004a      	lsls	r2, r1, #1
 8001824:	4699      	mov	r9, r3
 8001826:	0043      	lsls	r3, r0, #1
 8001828:	46a4      	mov	ip, r4
 800182a:	46b0      	mov	r8, r6
 800182c:	0b3f      	lsrs	r7, r7, #12
 800182e:	0d52      	lsrs	r2, r2, #21
 8001830:	0fc9      	lsrs	r1, r1, #31
 8001832:	0d5b      	lsrs	r3, r3, #21
 8001834:	0fc0      	lsrs	r0, r0, #31
 8001836:	42aa      	cmp	r2, r5
 8001838:	d011      	beq.n	800185e <__ledf2+0x56>
 800183a:	42ab      	cmp	r3, r5
 800183c:	d014      	beq.n	8001868 <__ledf2+0x60>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d12f      	bne.n	80018a2 <__ledf2+0x9a>
 8001842:	433c      	orrs	r4, r7
 8001844:	46a3      	mov	fp, r4
 8001846:	4265      	negs	r5, r4
 8001848:	4165      	adcs	r5, r4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d114      	bne.n	8001878 <__ledf2+0x70>
 800184e:	464c      	mov	r4, r9
 8001850:	4326      	orrs	r6, r4
 8001852:	d111      	bne.n	8001878 <__ledf2+0x70>
 8001854:	465b      	mov	r3, fp
 8001856:	2000      	movs	r0, #0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d017      	beq.n	800188c <__ledf2+0x84>
 800185c:	e010      	b.n	8001880 <__ledf2+0x78>
 800185e:	003d      	movs	r5, r7
 8001860:	4325      	orrs	r5, r4
 8001862:	d112      	bne.n	800188a <__ledf2+0x82>
 8001864:	4293      	cmp	r3, r2
 8001866:	d11c      	bne.n	80018a2 <__ledf2+0x9a>
 8001868:	464d      	mov	r5, r9
 800186a:	432e      	orrs	r6, r5
 800186c:	d10d      	bne.n	800188a <__ledf2+0x82>
 800186e:	2a00      	cmp	r2, #0
 8001870:	d104      	bne.n	800187c <__ledf2+0x74>
 8001872:	433c      	orrs	r4, r7
 8001874:	4265      	negs	r5, r4
 8001876:	4165      	adcs	r5, r4
 8001878:	2d00      	cmp	r5, #0
 800187a:	d10d      	bne.n	8001898 <__ledf2+0x90>
 800187c:	4281      	cmp	r1, r0
 800187e:	d016      	beq.n	80018ae <__ledf2+0xa6>
 8001880:	2002      	movs	r0, #2
 8001882:	3901      	subs	r1, #1
 8001884:	4008      	ands	r0, r1
 8001886:	3801      	subs	r0, #1
 8001888:	e000      	b.n	800188c <__ledf2+0x84>
 800188a:	2002      	movs	r0, #2
 800188c:	bcf0      	pop	{r4, r5, r6, r7}
 800188e:	46bb      	mov	fp, r7
 8001890:	46b2      	mov	sl, r6
 8001892:	46a9      	mov	r9, r5
 8001894:	46a0      	mov	r8, r4
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	2800      	cmp	r0, #0
 800189a:	d1f7      	bne.n	800188c <__ledf2+0x84>
 800189c:	2001      	movs	r0, #1
 800189e:	4240      	negs	r0, r0
 80018a0:	e7f4      	b.n	800188c <__ledf2+0x84>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ea      	bne.n	800187c <__ledf2+0x74>
 80018a6:	464c      	mov	r4, r9
 80018a8:	4326      	orrs	r6, r4
 80018aa:	d1e7      	bne.n	800187c <__ledf2+0x74>
 80018ac:	e7e8      	b.n	8001880 <__ledf2+0x78>
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dd06      	ble.n	80018c0 <__ledf2+0xb8>
 80018b2:	4243      	negs	r3, r0
 80018b4:	4158      	adcs	r0, r3
 80018b6:	2302      	movs	r3, #2
 80018b8:	4240      	negs	r0, r0
 80018ba:	4018      	ands	r0, r3
 80018bc:	3801      	subs	r0, #1
 80018be:	e7e5      	b.n	800188c <__ledf2+0x84>
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbe9      	blt.n	8001898 <__ledf2+0x90>
 80018c4:	454f      	cmp	r7, r9
 80018c6:	d8db      	bhi.n	8001880 <__ledf2+0x78>
 80018c8:	d006      	beq.n	80018d8 <__ledf2+0xd0>
 80018ca:	2000      	movs	r0, #0
 80018cc:	454f      	cmp	r7, r9
 80018ce:	d2dd      	bcs.n	800188c <__ledf2+0x84>
 80018d0:	2900      	cmp	r1, #0
 80018d2:	d0e3      	beq.n	800189c <__ledf2+0x94>
 80018d4:	0008      	movs	r0, r1
 80018d6:	e7d9      	b.n	800188c <__ledf2+0x84>
 80018d8:	45c4      	cmp	ip, r8
 80018da:	d8d1      	bhi.n	8001880 <__ledf2+0x78>
 80018dc:	2000      	movs	r0, #0
 80018de:	45c4      	cmp	ip, r8
 80018e0:	d2d4      	bcs.n	800188c <__ledf2+0x84>
 80018e2:	e7f5      	b.n	80018d0 <__ledf2+0xc8>
 80018e4:	000007ff 	.word	0x000007ff

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	b0a3      	sub	sp, #140	; 0x8c
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ee:	f000 fc25 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f2:	f000 f8f1 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f6:	f000 f9fd 	bl	8001cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018fa:	f000 f9dd 	bl	8001cb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018fe:	f000 f97b 	bl	8001bf8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001902:	f000 f949 	bl	8001b98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001906:	f000 f9a7 	bl	8001c58 <MX_USART3_UART_Init>
  uint8_t j_data[BUFF_VAL];
  /* Infinite loop */

  while (1)
  {
	  int count = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	2284      	movs	r2, #132	; 0x84
 800190e:	18ba      	adds	r2, r7, r2
 8001910:	6013      	str	r3, [r2, #0]
	  HAL_UART_Receive(&huart3,j_data,BUFF_VAL,1000);
 8001912:	23fa      	movs	r3, #250	; 0xfa
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	1d39      	adds	r1, r7, #4
 8001918:	4869      	ldr	r0, [pc, #420]	; (8001ac0 <main+0x1d8>)
 800191a:	2264      	movs	r2, #100	; 0x64
 800191c:	f001 ff68 	bl	80037f0 <HAL_UART_Receive>
	  int releaseFlag = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	18ba      	adds	r2, r7, r2
 8001926:	6013      	str	r3, [r2, #0]
	  uint8_t* j_scanner = j_data;
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	67fb      	str	r3, [r7, #124]	; 0x7c
	  int j_val = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	67bb      	str	r3, [r7, #120]	; 0x78
	  while(releaseFlag)
 8001930:	e03b      	b.n	80019aa <main+0xc2>
	  {
		  while(j_data[count]!=':' && releaseFlag)
		  {
			  j_scanner++;
 8001932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001934:	3301      	adds	r3, #1
 8001936:	67fb      	str	r3, [r7, #124]	; 0x7c
			  count++;
 8001938:	2084      	movs	r0, #132	; 0x84
 800193a:	183b      	adds	r3, r7, r0
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	183a      	adds	r2, r7, r0
 8001942:	6013      	str	r3, [r2, #0]
			  j_val = j_val*10 + (int)(j_data[count]-'0');
 8001944:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001946:	0013      	movs	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	189b      	adds	r3, r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	0019      	movs	r1, r3
 8001950:	1d3a      	adds	r2, r7, #4
 8001952:	183b      	adds	r3, r7, r0
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	18d3      	adds	r3, r2, r3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	3b30      	subs	r3, #48	; 0x30
 800195c:	18cb      	adds	r3, r1, r3
 800195e:	67bb      	str	r3, [r7, #120]	; 0x78
			  if(j_data[count] == '$' || count >= BUFF_VAL)
 8001960:	1d3a      	adds	r2, r7, #4
 8001962:	183b      	adds	r3, r7, r0
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	18d3      	adds	r3, r2, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b24      	cmp	r3, #36	; 0x24
 800196c:	d003      	beq.n	8001976 <main+0x8e>
 800196e:	183b      	adds	r3, r7, r0
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b63      	cmp	r3, #99	; 0x63
 8001974:	dd03      	ble.n	800197e <main+0x96>
				  releaseFlag = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	18ba      	adds	r2, r7, r2
 800197c:	6013      	str	r3, [r2, #0]
		  while(j_data[count]!=':' && releaseFlag)
 800197e:	1d3a      	adds	r2, r7, #4
 8001980:	2384      	movs	r3, #132	; 0x84
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b3a      	cmp	r3, #58	; 0x3a
 800198c:	d004      	beq.n	8001998 <main+0xb0>
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1cc      	bne.n	8001932 <main+0x4a>
		  }
		  j_scanner++;
 8001998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199a:	3301      	adds	r3, #1
 800199c:	67fb      	str	r3, [r7, #124]	; 0x7c
		  count++;
 800199e:	2284      	movs	r2, #132	; 0x84
 80019a0:	18bb      	adds	r3, r7, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	18ba      	adds	r2, r7, r2
 80019a8:	6013      	str	r3, [r2, #0]
	  while(releaseFlag)
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e4      	bne.n	800197e <main+0x96>
	  }
	  //uint8_t j1 = j_data[0];
	  uint8_t j2 = j_data[1];
 80019b4:	2577      	movs	r5, #119	; 0x77
 80019b6:	197b      	adds	r3, r7, r5
 80019b8:	1d3a      	adds	r2, r7, #4
 80019ba:	7852      	ldrb	r2, [r2, #1]
 80019bc:	701a      	strb	r2, [r3, #0]
	  uint8_t j3 = j_data[2];
 80019be:	2676      	movs	r6, #118	; 0x76
 80019c0:	19bb      	adds	r3, r7, r6
 80019c2:	1d3a      	adds	r2, r7, #4
 80019c4:	7892      	ldrb	r2, [r2, #2]
 80019c6:	701a      	strb	r2, [r3, #0]
	  //uint8_t j4 = j_data[3];
	  //uint8_t j5 = j_data[4];
	  uint8_t j6 = j_data[5];
 80019c8:	2175      	movs	r1, #117	; 0x75
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	1d3a      	adds	r2, r7, #4
 80019ce:	7952      	ldrb	r2, [r2, #5]
 80019d0:	701a      	strb	r2, [r3, #0]
	  uint8_t j7 = j_data[6];
 80019d2:	2074      	movs	r0, #116	; 0x74
 80019d4:	183b      	adds	r3, r7, r0
 80019d6:	1d3a      	adds	r2, r7, #4
 80019d8:	7992      	ldrb	r2, [r2, #6]
 80019da:	701a      	strb	r2, [r3, #0]
	  uint8_t j8 = j_data[7];
 80019dc:	2473      	movs	r4, #115	; 0x73
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	1d3a      	adds	r2, r7, #4
 80019e2:	79d2      	ldrb	r2, [r2, #7]
 80019e4:	701a      	strb	r2, [r3, #0]

	  //correct data						 UNITY	       SERVO LIMITS
	  j8 = (j8 - 1500) * 10;   //0 to 100    :  1500-2500
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	1c1a      	adds	r2, r3, #0
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	18d3      	adds	r3, r2, r3
 80019f0:	18db      	adds	r3, r3, r3
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	3268      	adds	r2, #104	; 0x68
 80019f8:	701a      	strb	r2, [r3, #0]
	  j7 = (j7+90)*11 + 500;   // -90 to 90  :  500 - 2500
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	1c1a      	adds	r2, r3, #0
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	18d2      	adds	r2, r2, r3
 8001a04:	1892      	adds	r2, r2, r2
 8001a06:	18d3      	adds	r3, r2, r3
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	183b      	adds	r3, r7, r0
 8001a0c:	3a2e      	subs	r2, #46	; 0x2e
 8001a0e:	701a      	strb	r2, [r3, #0]
	  j6 = (j6+60)*13.6 + 500; //-60 to 50   :  500 - 2000
 8001a10:	000c      	movs	r4, r1
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	333c      	adds	r3, #60	; 0x3c
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff fdbb 	bl	8001594 <__aeabi_i2d>
 8001a1e:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <main+0x1dc>)
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <main+0x1e0>)
 8001a22:	f7fe ff83 	bl	800092c <__aeabi_dmul>
 8001a26:	0002      	movs	r2, r0
 8001a28:	000b      	movs	r3, r1
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <main+0x1e4>)
 8001a32:	f7fe fc11 	bl	8000258 <__aeabi_dadd>
 8001a36:	0002      	movs	r2, r0
 8001a38:	000b      	movs	r3, r1
 8001a3a:	193c      	adds	r4, r7, r4
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	0019      	movs	r1, r3
 8001a40:	f7fe fbec 	bl	800021c <__aeabi_d2uiz>
 8001a44:	0003      	movs	r3, r0
 8001a46:	7023      	strb	r3, [r4, #0]
	  //j5 = (j5+180)*0 + 0;     //-180 to 180 :  N/A
	  //j4 = 0; 						 //--------------------------
	  j3 = j3*14.2 + 500;      //0 to 140    :  500 - 2500
 8001a48:	19bb      	adds	r3, r7, r6
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fda1 	bl	8001594 <__aeabi_i2d>
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <main+0x1e8>)
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <main+0x1ec>)
 8001a56:	f7fe ff69 	bl	800092c <__aeabi_dmul>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	000b      	movs	r3, r1
 8001a5e:	0010      	movs	r0, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <main+0x1e4>)
 8001a66:	f7fe fbf7 	bl	8000258 <__aeabi_dadd>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	000b      	movs	r3, r1
 8001a6e:	19bc      	adds	r4, r7, r6
 8001a70:	0010      	movs	r0, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	f7fe fbd2 	bl	800021c <__aeabi_d2uiz>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	7023      	strb	r3, [r4, #0]
	  j2 = (j2+50)*20 + 500;   //-50 to 50   :  500 - 2500
 8001a7c:	197b      	adds	r3, r7, r5
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2214      	movs	r2, #20
 8001a82:	4353      	muls	r3, r2
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	3a24      	subs	r2, #36	; 0x24
 8001a8a:	701a      	strb	r2, [r3, #0]
	 */

	if(j2 > 2500)
		j2 = (uint8_t)2500;
	else if(j2 < 500)
		j2 = (uint8_t)500;
 8001a8c:	197b      	adds	r3, r7, r5
 8001a8e:	22f4      	movs	r2, #244	; 0xf4
 8001a90:	701a      	strb	r2, [r3, #0]

	if(j3 > 2500)
		j3 = (uint8_t)2500;
	else if(j3 < 500)
		j3 = (uint8_t)500;
 8001a92:	19bb      	adds	r3, r7, r6
 8001a94:	22f4      	movs	r2, #244	; 0xf4
 8001a96:	701a      	strb	r2, [r3, #0]

	if(j6 > 2000)
		j6 = (uint8_t)2000;
	else if(j6 < 500)
		j6 = (uint8_t)500;
 8001a98:	2475      	movs	r4, #117	; 0x75
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	22f4      	movs	r2, #244	; 0xf4
 8001a9e:	701a      	strb	r2, [r3, #0]

	if(j7 > 2500)
		j7 = (uint8_t)2500;
	else if(j7 < 500)
		j7 = (uint8_t)500;
 8001aa0:	2074      	movs	r0, #116	; 0x74
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	22f4      	movs	r2, #244	; 0xf4
 8001aa6:	701a      	strb	r2, [r3, #0]

	if(j8 > 2500)
		j8 = (uint8_t)2500;
	else if(j8 < 1500)
		j8 = (uint8_t)1500;
 8001aa8:	2473      	movs	r4, #115	; 0x73
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	22dc      	movs	r2, #220	; 0xdc
 8001aae:	701a      	strb	r2, [r3, #0]
	//Bottom: J2 sID 5
	fillbuffer(buf, 8, j2, 1000, 5, 1);
	for(const uint8_t *c = buf; *c; c++)
		send_data(*c);
*/
	HAL_UART_Transmit(&huart3,j_data, 10,1000);
 8001ab0:	23fa      	movs	r3, #250	; 0xfa
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	1d39      	adds	r1, r7, #4
 8001ab6:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <main+0x1d8>)
 8001ab8:	220a      	movs	r2, #10
 8001aba:	f001 fdef 	bl	800369c <HAL_UART_Transmit>
  {
 8001abe:	e724      	b.n	800190a <main+0x22>
 8001ac0:	20000028 	.word	0x20000028
 8001ac4:	33333333 	.word	0x33333333
 8001ac8:	402b3333 	.word	0x402b3333
 8001acc:	407f4000 	.word	0x407f4000
 8001ad0:	66666666 	.word	0x66666666
 8001ad4:	402c6666 	.word	0x402c6666

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b099      	sub	sp, #100	; 0x64
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	242c      	movs	r4, #44	; 0x2c
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	2334      	movs	r3, #52	; 0x34
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f002 fedd 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aee:	231c      	movs	r3, #28
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	0018      	movs	r0, r3
 8001af4:	2310      	movs	r3, #16
 8001af6:	001a      	movs	r2, r3
 8001af8:	2100      	movs	r1, #0
 8001afa:	f002 fed5 	bl	80048a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afe:	003b      	movs	r3, r7
 8001b00:	0018      	movs	r0, r3
 8001b02:	231c      	movs	r3, #28
 8001b04:	001a      	movs	r2, r3
 8001b06:	2100      	movs	r1, #0
 8001b08:	f002 fece 	bl	80048a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b0c:	0021      	movs	r1, r4
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2201      	movs	r2, #1
 8001b18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 ff63 	bl	80029f4 <HAL_RCC_OscConfig>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001b32:	f000 f905 	bl	8001d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b36:	211c      	movs	r1, #28
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2100      	movs	r1, #0
 8001b54:	0018      	movs	r0, r3
 8001b56:	f001 fad3 	bl	8003100 <HAL_RCC_ClockConfig>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b5e:	f000 f8ef 	bl	8001d40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8001b62:	003b      	movs	r3, r7
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <SystemClock_Config+0xbc>)
 8001b66:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b68:	003b      	movs	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b6e:	003b      	movs	r3, r7
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b74:	003b      	movs	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f001 fc39 	bl	80033f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	1e03      	subs	r3, r0, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b86:	f000 f8db 	bl	8001d40 <Error_Handler>
  }
}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b019      	add	sp, #100	; 0x64
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	00040003 	.word	0x00040003

08001b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <MX_USART1_UART_Init+0x5c>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001ba4:	2296      	movs	r2, #150	; 0x96
 8001ba6:	0192      	lsls	r2, r2, #6
 8001ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <MX_USART1_UART_Init+0x58>)
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f001 fd09 	bl	80035f4 <HAL_UART_Init>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001be6:	f000 f8ab 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000140 	.word	0x20000140
 8001bf4:	40013800 	.word	0x40013800

08001bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <MX_USART2_UART_Init+0x5c>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c04:	2296      	movs	r2, #150	; 0x96
 8001c06:	0192      	lsls	r2, r2, #6
 8001c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f001 fcd9 	bl	80035f4 <HAL_UART_Init>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c46:	f000 f87b 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200001c4 	.word	0x200001c4
 8001c54:	40004400 	.word	0x40004400

08001c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <MX_USART3_UART_Init+0x5c>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c64:	2296      	movs	r2, #150	; 0x96
 8001c66:	0192      	lsls	r2, r2, #6
 8001c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f001 fca9 	bl	80035f4 <HAL_UART_Init>
 8001ca2:	1e03      	subs	r3, r0, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ca6:	f000 f84b 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000028 	.word	0x20000028
 8001cb4:	40004800 	.word	0x40004800

08001cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_DMA_Init+0x38>)
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_DMA_Init+0x38>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	615a      	str	r2, [r3, #20]
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_DMA_Init+0x38>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	200a      	movs	r0, #10
 8001cdc:	f000 fb3e 	bl	800235c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f000 fb50 	bl	8002386 <HAL_NVIC_EnableIRQ>

}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_GPIO_Init+0x48>)
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_GPIO_Init+0x48>)
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	0289      	lsls	r1, r1, #10
 8001d04:	430a      	orrs	r2, r1
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_GPIO_Init+0x48>)
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	029b      	lsls	r3, r3, #10
 8001d10:	4013      	ands	r3, r2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_GPIO_Init+0x48>)
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_GPIO_Init+0x48>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0309      	lsls	r1, r1, #12
 8001d20:	430a      	orrs	r2, r1
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <MX_GPIO_Init+0x48>)
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	031b      	lsls	r3, r3, #12
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_MspInit+0x44>)
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_MspInit+0x44>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	619a      	str	r2, [r3, #24]
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_MspInit+0x44>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_MspInit+0x44>)
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_MspInit+0x44>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0549      	lsls	r1, r1, #21
 8001d74:	430a      	orrs	r2, r1
 8001d76:	61da      	str	r2, [r3, #28]
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_MspInit+0x44>)
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	4013      	ands	r3, r2
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b08f      	sub	sp, #60	; 0x3c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	2424      	movs	r4, #36	; 0x24
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	0018      	movs	r0, r3
 8001da2:	2314      	movs	r3, #20
 8001da4:	001a      	movs	r2, r3
 8001da6:	2100      	movs	r1, #0
 8001da8:	f002 fd7e 	bl	80048a8 <memset>
  if(huart->Instance==USART1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a98      	ldr	r2, [pc, #608]	; (8002014 <HAL_UART_MspInit+0x280>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d173      	bne.n	8001e9e <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db6:	4b98      	ldr	r3, [pc, #608]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	4b97      	ldr	r3, [pc, #604]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	01c9      	lsls	r1, r1, #7
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	619a      	str	r2, [r3, #24]
 8001dc4:	4b94      	ldr	r3, [pc, #592]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001dc6:	699a      	ldr	r2, [r3, #24]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	01db      	lsls	r3, r3, #7
 8001dcc:	4013      	ands	r3, r2
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b91      	ldr	r3, [pc, #580]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	4b90      	ldr	r3, [pc, #576]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	0289      	lsls	r1, r1, #10
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dee:	193b      	adds	r3, r7, r4
 8001df0:	22c0      	movs	r2, #192	; 0xc0
 8001df2:	00d2      	lsls	r2, r2, #3
 8001df4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	0021      	movs	r1, r4
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2203      	movs	r2, #3
 8001e08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	187a      	adds	r2, r7, r1
 8001e12:	2390      	movs	r3, #144	; 0x90
 8001e14:	05db      	lsls	r3, r3, #23
 8001e16:	0011      	movs	r1, r2
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 fc73 	bl	8002704 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001e1e:	4b7f      	ldr	r3, [pc, #508]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e20:	4a7f      	ldr	r2, [pc, #508]	; (8002020 <HAL_UART_MspInit+0x28c>)
 8001e22:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e24:	4b7d      	ldr	r3, [pc, #500]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b7c      	ldr	r3, [pc, #496]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e36:	4b79      	ldr	r3, [pc, #484]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3c:	4b77      	ldr	r3, [pc, #476]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e48:	4b74      	ldr	r3, [pc, #464]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e4e:	4b73      	ldr	r3, [pc, #460]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 fab5 	bl	80023c0 <HAL_DMA_Init>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001e5a:	f7ff ff71 	bl	8001d40 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 8001e5e:	4a71      	ldr	r2, [pc, #452]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001e60:	23a8      	movs	r3, #168	; 0xa8
 8001e62:	58d3      	ldr	r3, [r2, r3]
 8001e64:	496f      	ldr	r1, [pc, #444]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001e66:	4a70      	ldr	r2, [pc, #448]	; (8002028 <HAL_UART_MspInit+0x294>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	22a8      	movs	r2, #168	; 0xa8
 8001e6c:	508b      	str	r3, [r1, r2]
 8001e6e:	4a6d      	ldr	r2, [pc, #436]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001e70:	23a8      	movs	r3, #168	; 0xa8
 8001e72:	58d3      	ldr	r3, [r2, r3]
 8001e74:	496b      	ldr	r1, [pc, #428]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	22a8      	movs	r2, #168	; 0xa8
 8001e7e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a66      	ldr	r2, [pc, #408]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e84:	671a      	str	r2, [r3, #112]	; 0x70
 8001e86:	4b65      	ldr	r3, [pc, #404]	; (800201c <HAL_UART_MspInit+0x288>)
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	201b      	movs	r0, #27
 8001e92:	f000 fa63 	bl	800235c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e96:	201b      	movs	r0, #27
 8001e98:	f000 fa75 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e9c:	e0b5      	b.n	800200a <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a62      	ldr	r2, [pc, #392]	; (800202c <HAL_UART_MspInit+0x298>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d171      	bne.n	8001f8c <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea8:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	0289      	lsls	r1, r1, #10
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	61da      	str	r2, [r3, #28]
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	0289      	lsls	r1, r1, #10
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	615a      	str	r2, [r3, #20]
 8001ed2:	4b51      	ldr	r3, [pc, #324]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	4013      	ands	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ee0:	2124      	movs	r1, #36	; 0x24
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	220c      	movs	r2, #12
 8001ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2202      	movs	r2, #2
 8001eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2201      	movs	r2, #1
 8001efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	187a      	adds	r2, r7, r1
 8001f02:	2390      	movs	r3, #144	; 0x90
 8001f04:	05db      	lsls	r3, r3, #23
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fbfb 	bl	8002704 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001f0e:	4b48      	ldr	r3, [pc, #288]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f10:	4a48      	ldr	r2, [pc, #288]	; (8002034 <HAL_UART_MspInit+0x2a0>)
 8001f12:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f14:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f16:	2210      	movs	r2, #16
 8001f18:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1a:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f26:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f32:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 fa3d 	bl	80023c0 <HAL_DMA_Init>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8001f4a:	f7ff fef9 	bl	8001d40 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 8001f4e:	4a35      	ldr	r2, [pc, #212]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001f50:	23a8      	movs	r3, #168	; 0xa8
 8001f52:	58d3      	ldr	r3, [r2, r3]
 8001f54:	4933      	ldr	r1, [pc, #204]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001f56:	22f0      	movs	r2, #240	; 0xf0
 8001f58:	4393      	bics	r3, r2
 8001f5a:	22a8      	movs	r2, #168	; 0xa8
 8001f5c:	508b      	str	r3, [r1, r2]
 8001f5e:	4a31      	ldr	r2, [pc, #196]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001f60:	23a8      	movs	r3, #168	; 0xa8
 8001f62:	58d3      	ldr	r3, [r2, r3]
 8001f64:	492f      	ldr	r1, [pc, #188]	; (8002024 <HAL_UART_MspInit+0x290>)
 8001f66:	2290      	movs	r2, #144	; 0x90
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	22a8      	movs	r2, #168	; 0xa8
 8001f6c:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f72:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_UART_MspInit+0x29c>)
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	201c      	movs	r0, #28
 8001f80:	f000 f9ec 	bl	800235c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f84:	201c      	movs	r0, #28
 8001f86:	f000 f9fe 	bl	8002386 <HAL_NVIC_EnableIRQ>
}
 8001f8a:	e03e      	b.n	800200a <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a29      	ldr	r2, [pc, #164]	; (8002038 <HAL_UART_MspInit+0x2a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d139      	bne.n	800200a <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	02c9      	lsls	r1, r1, #11
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	61da      	str	r2, [r3, #28]
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	02db      	lsls	r3, r3, #11
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	0309      	lsls	r1, r1, #12
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_UART_MspInit+0x284>)
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	031b      	lsls	r3, r3, #12
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fce:	2124      	movs	r1, #36	; 0x24
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2230      	movs	r2, #48	; 0x30
 8001fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2202      	movs	r2, #2
 8001fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	2201      	movs	r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_UART_MspInit+0x2a8>)
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	f000 fb85 	bl	8002704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	201d      	movs	r0, #29
 8002000:	f000 f9ac 	bl	800235c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8002004:	201d      	movs	r0, #29
 8002006:	f000 f9be 	bl	8002386 <HAL_NVIC_EnableIRQ>
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b00f      	add	sp, #60	; 0x3c
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	40013800 	.word	0x40013800
 8002018:	40021000 	.word	0x40021000
 800201c:	200000b8 	.word	0x200000b8
 8002020:	40020030 	.word	0x40020030
 8002024:	40020000 	.word	0x40020000
 8002028:	fffff0ff 	.word	0xfffff0ff
 800202c:	40004400 	.word	0x40004400
 8002030:	200000fc 	.word	0x200000fc
 8002034:	4002001c 	.word	0x4002001c
 8002038:	40004800 	.word	0x40004800
 800203c:	48000800 	.word	0x48000800

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002064:	f000 f8b2 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>)
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fa67 	bl	800254a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>)
 800207e:	0018      	movs	r0, r3
 8002080:	f000 fa63 	bl	800254a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	200000fc 	.word	0x200000fc
 8002090:	200000b8 	.word	0x200000b8

08002094 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <USART1_IRQHandler+0x14>)
 800209a:	0018      	movs	r0, r3
 800209c:	f001 fc98 	bl	80039d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	20000140 	.word	0x20000140

080020ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <USART2_IRQHandler+0x14>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 fc8c 	bl	80039d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	200001c4 	.word	0x200001c4

080020c4 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <USART3_8_IRQHandler+0x14>)
 80020ca:	0018      	movs	r0, r3
 80020cc:	f001 fc80 	bl	80039d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	20000028 	.word	0x20000028

080020dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ee:	490e      	ldr	r1, [pc, #56]	; (8002128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <LoopForever+0xe>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f4:	e002      	b.n	80020fc <LoopCopyDataInit>

080020f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fa:	3304      	adds	r3, #4

080020fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002100:	d3f9      	bcc.n	80020f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002104:	4c0b      	ldr	r4, [pc, #44]	; (8002134 <LoopForever+0x16>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002108:	e001      	b.n	800210e <LoopFillZerobss>

0800210a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800210c:	3204      	adds	r2, #4

0800210e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002110:	d3fb      	bcc.n	800210a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002112:	f7ff ffe3 	bl	80020dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002116:	f002 fba3 	bl	8004860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800211a:	f7ff fbe5 	bl	80018e8 <main>

0800211e <LoopForever>:

LoopForever:
    b LoopForever
 800211e:	e7fe      	b.n	800211e <LoopForever>
  ldr   r0, =_estack
 8002120:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800212c:	08004950 	.word	0x08004950
  ldr r2, =_sbss
 8002130:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002134:	2000024c 	.word	0x2000024c

08002138 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_COMP_IRQHandler>
	...

0800213c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_Init+0x24>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_Init+0x24>)
 8002146:	2110      	movs	r1, #16
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f809 	bl	8002164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002152:	f7ff fdfb 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	40022000 	.word	0x40022000

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_InitTick+0x5c>)
 800216e:	681c      	ldr	r4, [r3, #0]
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_InitTick+0x60>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	0019      	movs	r1, r3
 8002176:	23fa      	movs	r3, #250	; 0xfa
 8002178:	0098      	lsls	r0, r3, #2
 800217a:	f7fd ffc3 	bl	8000104 <__udivsi3>
 800217e:	0003      	movs	r3, r0
 8002180:	0019      	movs	r1, r3
 8002182:	0020      	movs	r0, r4
 8002184:	f7fd ffbe 	bl	8000104 <__udivsi3>
 8002188:	0003      	movs	r3, r0
 800218a:	0018      	movs	r0, r3
 800218c:	f000 f90b 	bl	80023a6 <HAL_SYSTICK_Config>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d001      	beq.n	8002198 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e00f      	b.n	80021b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d80b      	bhi.n	80021b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	2301      	movs	r3, #1
 80021a2:	425b      	negs	r3, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f8d8 	bl	800235c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_InitTick+0x64>)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b003      	add	sp, #12
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_IncTick+0x1c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	001a      	movs	r2, r3
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_IncTick+0x20>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	18d2      	adds	r2, r2, r3
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_IncTick+0x20>)
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000248 	.word	0x20000248

080021f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_GetTick+0x10>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	20000248 	.word	0x20000248

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	0002      	movs	r2, r0
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b7f      	cmp	r3, #127	; 0x7f
 8002216:	d809      	bhi.n	800222c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	001a      	movs	r2, r3
 800221e:	231f      	movs	r3, #31
 8002220:	401a      	ands	r2, r3
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_EnableIRQ+0x30>)
 8002224:	2101      	movs	r1, #1
 8002226:	4091      	lsls	r1, r2
 8002228:	000a      	movs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
  }
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	0002      	movs	r2, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b7f      	cmp	r3, #127	; 0x7f
 800224c:	d828      	bhi.n	80022a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800224e:	4a2f      	ldr	r2, [pc, #188]	; (800230c <__NVIC_SetPriority+0xd4>)
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b25b      	sxtb	r3, r3
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	33c0      	adds	r3, #192	; 0xc0
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	589b      	ldr	r3, [r3, r2]
 800225e:	1dfa      	adds	r2, r7, #7
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	0011      	movs	r1, r2
 8002264:	2203      	movs	r2, #3
 8002266:	400a      	ands	r2, r1
 8002268:	00d2      	lsls	r2, r2, #3
 800226a:	21ff      	movs	r1, #255	; 0xff
 800226c:	4091      	lsls	r1, r2
 800226e:	000a      	movs	r2, r1
 8002270:	43d2      	mvns	r2, r2
 8002272:	401a      	ands	r2, r3
 8002274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	401a      	ands	r2, r3
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	2303      	movs	r3, #3
 8002286:	4003      	ands	r3, r0
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800228c:	481f      	ldr	r0, [pc, #124]	; (800230c <__NVIC_SetPriority+0xd4>)
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b25b      	sxtb	r3, r3
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	430a      	orrs	r2, r1
 8002298:	33c0      	adds	r3, #192	; 0xc0
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800229e:	e031      	b.n	8002304 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <__NVIC_SetPriority+0xd8>)
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	0019      	movs	r1, r3
 80022a8:	230f      	movs	r3, #15
 80022aa:	400b      	ands	r3, r1
 80022ac:	3b08      	subs	r3, #8
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3306      	adds	r3, #6
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	3304      	adds	r3, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1dfa      	adds	r2, r7, #7
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	0011      	movs	r1, r2
 80022c0:	2203      	movs	r2, #3
 80022c2:	400a      	ands	r2, r1
 80022c4:	00d2      	lsls	r2, r2, #3
 80022c6:	21ff      	movs	r1, #255	; 0xff
 80022c8:	4091      	lsls	r1, r2
 80022ca:	000a      	movs	r2, r1
 80022cc:	43d2      	mvns	r2, r2
 80022ce:	401a      	ands	r2, r3
 80022d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	401a      	ands	r2, r3
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	0018      	movs	r0, r3
 80022e0:	2303      	movs	r3, #3
 80022e2:	4003      	ands	r3, r0
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <__NVIC_SetPriority+0xd8>)
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	001c      	movs	r4, r3
 80022f0:	230f      	movs	r3, #15
 80022f2:	4023      	ands	r3, r4
 80022f4:	3b08      	subs	r3, #8
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	430a      	orrs	r2, r1
 80022fa:	3306      	adds	r3, #6
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	18c3      	adds	r3, r0, r3
 8002300:	3304      	adds	r3, #4
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b003      	add	sp, #12
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	045b      	lsls	r3, r3, #17
 8002324:	429a      	cmp	r2, r3
 8002326:	d301      	bcc.n	800232c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002328:	2301      	movs	r3, #1
 800232a:	e010      	b.n	800234e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <SysTick_Config+0x44>)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	3a01      	subs	r2, #1
 8002332:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002334:	2301      	movs	r3, #1
 8002336:	425b      	negs	r3, r3
 8002338:	2103      	movs	r1, #3
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff ff7c 	bl	8002238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SysTick_Config+0x44>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <SysTick_Config+0x44>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	210f      	movs	r1, #15
 8002368:	187b      	adds	r3, r7, r1
 800236a:	1c02      	adds	r2, r0, #0
 800236c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	187b      	adds	r3, r7, r1
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b25b      	sxtb	r3, r3
 8002376:	0011      	movs	r1, r2
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff ff5d 	bl	8002238 <__NVIC_SetPriority>
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	0002      	movs	r2, r0
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002392:	1dfb      	adds	r3, r7, #7
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b25b      	sxtb	r3, r3
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff ff33 	bl	8002204 <__NVIC_EnableIRQ>
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff ffaf 	bl	8002314 <SysTick_Config>
 80023b6:	0003      	movs	r3, r0
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e036      	b.n	8002444 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2221      	movs	r2, #33	; 0x21
 80023da:	2102      	movs	r1, #2
 80023dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_DMA_Init+0x8c>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	0018      	movs	r0, r3
 8002428:	f000 f932 	bl	8002690 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2221      	movs	r2, #33	; 0x21
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}  
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b004      	add	sp, #16
 800244a:	bd80      	pop	{r7, pc}
 800244c:	ffffc00f 	.word	0xffffc00f

08002450 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2221      	movs	r2, #33	; 0x21
 800245c:	5c9b      	ldrb	r3, [r3, r2]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d008      	beq.n	8002476 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	2100      	movs	r1, #0
 8002470:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e020      	b.n	80024b8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	210e      	movs	r1, #14
 8002482:	438a      	bics	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	438a      	bics	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	2101      	movs	r1, #1
 80024a0:	4091      	lsls	r1, r2
 80024a2:	000a      	movs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2221      	movs	r2, #33	; 0x21
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	2100      	movs	r1, #0
 80024b4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	210f      	movs	r1, #15
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2221      	movs	r2, #33	; 0x21
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d006      	beq.n	80024ea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2204      	movs	r2, #4
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e028      	b.n	800253c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	210e      	movs	r1, #14
 80024f6:	438a      	bics	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	438a      	bics	r2, r1
 8002508:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	2101      	movs	r1, #1
 8002514:	4091      	lsls	r1, r2
 8002516:	000a      	movs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2221      	movs	r2, #33	; 0x21
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	0010      	movs	r0, r2
 800253a:	4798      	blx	r3
    } 
  }
  return status;
 800253c:	230f      	movs	r3, #15
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	781b      	ldrb	r3, [r3, #0]
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2204      	movs	r2, #4
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	d024      	beq.n	80025bc <HAL_DMA_IRQHandler+0x72>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2204      	movs	r2, #4
 8002576:	4013      	ands	r3, r2
 8002578:	d020      	beq.n	80025bc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2220      	movs	r2, #32
 8002582:	4013      	ands	r3, r2
 8002584:	d107      	bne.n	8002596 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2104      	movs	r1, #4
 8002592:	438a      	bics	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	2104      	movs	r1, #4
 80025a0:	4091      	lsls	r1, r2
 80025a2:	000a      	movs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d100      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x66>
 80025ae:	e06a      	b.n	8002686 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	0010      	movs	r0, r2
 80025b8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80025ba:	e064      	b.n	8002686 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2202      	movs	r2, #2
 80025c2:	409a      	lsls	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	d02b      	beq.n	8002624 <HAL_DMA_IRQHandler+0xda>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d027      	beq.n	8002624 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2220      	movs	r2, #32
 80025dc:	4013      	ands	r3, r2
 80025de:	d10b      	bne.n	80025f8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	210a      	movs	r1, #10
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2221      	movs	r2, #33	; 0x21
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	2102      	movs	r1, #2
 8002602:	4091      	lsls	r1, r2
 8002604:	000a      	movs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d036      	beq.n	8002686 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	0010      	movs	r0, r2
 8002620:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002622:	e030      	b.n	8002686 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2208      	movs	r2, #8
 800262a:	409a      	lsls	r2, r3
 800262c:	0013      	movs	r3, r2
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	d028      	beq.n	8002686 <HAL_DMA_IRQHandler+0x13c>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2208      	movs	r2, #8
 8002638:	4013      	ands	r3, r2
 800263a:	d024      	beq.n	8002686 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	210e      	movs	r1, #14
 8002648:	438a      	bics	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2101      	movs	r1, #1
 8002656:	4091      	lsls	r1, r2
 8002658:	000a      	movs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2221      	movs	r2, #33	; 0x21
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2220      	movs	r2, #32
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	0010      	movs	r0, r2
 8002682:	4798      	blx	r3
    }
   }
}  
 8002684:	e7ff      	b.n	8002686 <HAL_DMA_IRQHandler+0x13c>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	001a      	movs	r2, r3
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <DMA_CalcBaseAndBitshift+0x60>)
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d810      	bhi.n	80026c6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <DMA_CalcBaseAndBitshift+0x64>)
 80026aa:	4694      	mov	ip, r2
 80026ac:	4463      	add	r3, ip
 80026ae:	2114      	movs	r1, #20
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7fd fd27 	bl	8000104 <__udivsi3>
 80026b6:	0003      	movs	r3, r0
 80026b8:	009a      	lsls	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <DMA_CalcBaseAndBitshift+0x68>)
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80026c4:	e00f      	b.n	80026e6 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <DMA_CalcBaseAndBitshift+0x6c>)
 80026cc:	4694      	mov	ip, r2
 80026ce:	4463      	add	r3, ip
 80026d0:	2114      	movs	r1, #20
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7fd fd16 	bl	8000104 <__udivsi3>
 80026d8:	0003      	movs	r3, r0
 80026da:	009a      	lsls	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <DMA_CalcBaseAndBitshift+0x70>)
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	40020407 	.word	0x40020407
 80026f4:	bffdfff8 	.word	0xbffdfff8
 80026f8:	40020000 	.word	0x40020000
 80026fc:	bffdfbf8 	.word	0xbffdfbf8
 8002700:	40020400 	.word	0x40020400

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002712:	e155      	b.n	80029c0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4091      	lsls	r1, r2
 800271e:	000a      	movs	r2, r1
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d100      	bne.n	800272c <HAL_GPIO_Init+0x28>
 800272a:	e146      	b.n	80029ba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	4013      	ands	r3, r2
 8002734:	2b01      	cmp	r3, #1
 8002736:	d005      	beq.n	8002744 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2203      	movs	r2, #3
 800273e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002740:	2b02      	cmp	r3, #2
 8002742:	d130      	bne.n	80027a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	409a      	lsls	r2, r3
 8002752:	0013      	movs	r3, r2
 8002754:	43da      	mvns	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800277a:	2201      	movs	r2, #1
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
 8002780:	0013      	movs	r3, r2
 8002782:	43da      	mvns	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	2201      	movs	r2, #1
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
 8002798:	0013      	movs	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d017      	beq.n	80027e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	409a      	lsls	r2, r3
 80027c0:	0013      	movs	r3, r2
 80027c2:	43da      	mvns	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	409a      	lsls	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d123      	bne.n	8002836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	08da      	lsrs	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3208      	adds	r2, #8
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	58d3      	ldr	r3, [r2, r3]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2207      	movs	r2, #7
 8002800:	4013      	ands	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	409a      	lsls	r2, r3
 8002808:	0013      	movs	r3, r2
 800280a:	43da      	mvns	r2, r3
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2107      	movs	r1, #7
 800281a:	400b      	ands	r3, r1
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	409a      	lsls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	6939      	ldr	r1, [r7, #16]
 8002834:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	43da      	mvns	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2203      	movs	r2, #3
 8002854:	401a      	ands	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	409a      	lsls	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	23c0      	movs	r3, #192	; 0xc0
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	4013      	ands	r3, r2
 8002874:	d100      	bne.n	8002878 <HAL_GPIO_Init+0x174>
 8002876:	e0a0      	b.n	80029ba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002878:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <HAL_GPIO_Init+0x2d4>)
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_GPIO_Init+0x2d4>)
 800287e:	2101      	movs	r1, #1
 8002880:	430a      	orrs	r2, r1
 8002882:	619a      	str	r2, [r3, #24]
 8002884:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <HAL_GPIO_Init+0x2d4>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002890:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_GPIO_Init+0x2d8>)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	589b      	ldr	r3, [r3, r2]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2203      	movs	r2, #3
 80028a2:	4013      	ands	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	409a      	lsls	r2, r3
 80028aa:	0013      	movs	r3, r2
 80028ac:	43da      	mvns	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	2390      	movs	r3, #144	; 0x90
 80028b8:	05db      	lsls	r3, r3, #23
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <HAL_GPIO_Init+0x2dc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0x1ea>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a46      	ldr	r2, [pc, #280]	; (80029e4 <HAL_GPIO_Init+0x2e0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_GPIO_Init+0x1e6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a45      	ldr	r2, [pc, #276]	; (80029e8 <HAL_GPIO_Init+0x2e4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x1e2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a44      	ldr	r2, [pc, #272]	; (80029ec <HAL_GPIO_Init+0x2e8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_GPIO_Init+0x1de>
 80028de:	2304      	movs	r3, #4
 80028e0:	e008      	b.n	80028f4 <HAL_GPIO_Init+0x1f0>
 80028e2:	2305      	movs	r3, #5
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x1f0>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e004      	b.n	80028f4 <HAL_GPIO_Init+0x1f0>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_Init+0x1f0>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_GPIO_Init+0x1f0>
 80028f2:	2300      	movs	r3, #0
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	2103      	movs	r1, #3
 80028f8:	400a      	ands	r2, r1
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4093      	lsls	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002904:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_GPIO_Init+0x2d8>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43da      	mvns	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	4013      	ands	r3, r2
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002936:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43da      	mvns	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	029b      	lsls	r3, r3, #10
 8002954:	4013      	ands	r3, r2
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43da      	mvns	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	035b      	lsls	r3, r3, #13
 800297e:	4013      	ands	r3, r2
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43da      	mvns	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	039b      	lsls	r3, r3, #14
 80029a8:	4013      	ands	r3, r2
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	40da      	lsrs	r2, r3
 80029c8:	1e13      	subs	r3, r2, #0
 80029ca:	d000      	beq.n	80029ce <HAL_GPIO_Init+0x2ca>
 80029cc:	e6a2      	b.n	8002714 <HAL_GPIO_Init+0x10>
  } 
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b006      	add	sp, #24
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010000 	.word	0x40010000
 80029e0:	48000400 	.word	0x48000400
 80029e4:	48000800 	.word	0x48000800
 80029e8:	48000c00 	.word	0x48000c00
 80029ec:	48001000 	.word	0x48001000
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f000 fb76 	bl	80030f4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d100      	bne.n	8002a14 <HAL_RCC_OscConfig+0x20>
 8002a12:	e08e      	b.n	8002b32 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a14:	4bc5      	ldr	r3, [pc, #788]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	220c      	movs	r2, #12
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d00e      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a20:	4bc2      	ldr	r3, [pc, #776]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	220c      	movs	r2, #12
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d117      	bne.n	8002a5c <HAL_RCC_OscConfig+0x68>
 8002a2c:	4bbf      	ldr	r3, [pc, #764]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	23c0      	movs	r3, #192	; 0xc0
 8002a32:	025b      	lsls	r3, r3, #9
 8002a34:	401a      	ands	r2, r3
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	025b      	lsls	r3, r3, #9
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d10e      	bne.n	8002a5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4bbb      	ldr	r3, [pc, #748]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	029b      	lsls	r3, r3, #10
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <HAL_RCC_OscConfig+0x58>
 8002a4a:	e071      	b.n	8002b30 <HAL_RCC_OscConfig+0x13c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d000      	beq.n	8002a56 <HAL_RCC_OscConfig+0x62>
 8002a54:	e06c      	b.n	8002b30 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f000 fb4c 	bl	80030f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x80>
 8002a64:	4bb1      	ldr	r3, [pc, #708]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4bb0      	ldr	r3, [pc, #704]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	0249      	lsls	r1, r1, #9
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e02f      	b.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_OscConfig+0xa2>
 8002a7c:	4bab      	ldr	r3, [pc, #684]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4baa      	ldr	r3, [pc, #680]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a82:	49ab      	ldr	r1, [pc, #684]	; (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	4ba8      	ldr	r3, [pc, #672]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4ba7      	ldr	r3, [pc, #668]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002a8e:	49a9      	ldr	r1, [pc, #676]	; (8002d34 <HAL_RCC_OscConfig+0x340>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e01e      	b.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b05      	cmp	r3, #5
 8002a9c:	d10e      	bne.n	8002abc <HAL_RCC_OscConfig+0xc8>
 8002a9e:	4ba3      	ldr	r3, [pc, #652]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4ba2      	ldr	r3, [pc, #648]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	02c9      	lsls	r1, r1, #11
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	4b9f      	ldr	r3, [pc, #636]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b9e      	ldr	r3, [pc, #632]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	0249      	lsls	r1, r1, #9
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
 8002abc:	4b9b      	ldr	r3, [pc, #620]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b9a      	ldr	r3, [pc, #616]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002ac2:	499b      	ldr	r1, [pc, #620]	; (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	4b98      	ldr	r3, [pc, #608]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b97      	ldr	r3, [pc, #604]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002ace:	4999      	ldr	r1, [pc, #612]	; (8002d34 <HAL_RCC_OscConfig+0x340>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d014      	beq.n	8002b06 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff fb88 	bl	80021f0 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae6:	f7ff fb83 	bl	80021f0 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e2fd      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af8:	4b8c      	ldr	r3, [pc, #560]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	4013      	ands	r3, r2
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0xf2>
 8002b04:	e015      	b.n	8002b32 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7ff fb73 	bl	80021f0 <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff fb6e 	bl	80021f0 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e2e8      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	029b      	lsls	r3, r3, #10
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x11c>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2202      	movs	r2, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d100      	bne.n	8002b3e <HAL_RCC_OscConfig+0x14a>
 8002b3c:	e06c      	b.n	8002c18 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b3e:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	220c      	movs	r2, #12
 8002b44:	4013      	ands	r3, r2
 8002b46:	d00e      	beq.n	8002b66 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b48:	4b78      	ldr	r3, [pc, #480]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	220c      	movs	r2, #12
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d11f      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1a0>
 8002b54:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	23c0      	movs	r3, #192	; 0xc0
 8002b5a:	025b      	lsls	r3, r3, #9
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b71      	ldr	r3, [pc, #452]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_OscConfig+0x188>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e2bb      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b6b      	ldr	r3, [pc, #428]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	22f8      	movs	r2, #248	; 0xf8
 8002b82:	4393      	bics	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00da      	lsls	r2, r3, #3
 8002b8c:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e041      	b.n	8002c18 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d024      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fb22 	bl	80021f0 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff fb1d 	bl	80021f0 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e297      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d0f1      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	22f8      	movs	r2, #248	; 0xf8
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00da      	lsls	r2, r3, #3
 8002bde:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e018      	b.n	8002c18 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	438a      	bics	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7ff fafd 	bl	80021f0 <HAL_GetTick>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7ff faf8 	bl	80021f0 <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e272      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d1f1      	bne.n	8002bfc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7ff fadb 	bl	80021f0 <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff fad6 	bl	80021f0 <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e250      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f1      	beq.n	8002c40 <HAL_RCC_OscConfig+0x24c>
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c62:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	438a      	bics	r2, r1
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff fac1 	bl	80021f0 <HAL_GetTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c74:	f7ff fabc 	bl	80021f0 <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e236      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f1      	bne.n	8002c74 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d100      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2a8>
 8002c9a:	e0b5      	b.n	8002e08 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9c:	201f      	movs	r0, #31
 8002c9e:	183b      	adds	r3, r7, r0
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	4013      	ands	r3, r2
 8002cae:	d110      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0549      	lsls	r1, r1, #21
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	61da      	str	r2, [r3, #28]
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	055b      	lsls	r3, r3, #21
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ccc:	183b      	adds	r3, r7, r0
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_OscConfig+0x344>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d11a      	bne.n	8002d14 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_RCC_OscConfig+0x344>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_RCC_OscConfig+0x344>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0049      	lsls	r1, r1, #1
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cec:	f7ff fa80 	bl	80021f0 <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf6:	f7ff fa7b 	bl	80021f0 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b64      	cmp	r3, #100	; 0x64
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1f5      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x344>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10f      	bne.n	8002d3c <HAL_RCC_OscConfig+0x348>
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002d1e:	6a1a      	ldr	r2, [r3, #32]
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <HAL_RCC_OscConfig+0x338>)
 8002d22:	2101      	movs	r1, #1
 8002d24:	430a      	orrs	r2, r1
 8002d26:	621a      	str	r2, [r3, #32]
 8002d28:	e036      	b.n	8002d98 <HAL_RCC_OscConfig+0x3a4>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	fffeffff 	.word	0xfffeffff
 8002d34:	fffbffff 	.word	0xfffbffff
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x36a>
 8002d44:	4bca      	ldr	r3, [pc, #808]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	4bc9      	ldr	r3, [pc, #804]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	621a      	str	r2, [r3, #32]
 8002d50:	4bc7      	ldr	r3, [pc, #796]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	4bc6      	ldr	r3, [pc, #792]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d56:	2104      	movs	r1, #4
 8002d58:	438a      	bics	r2, r1
 8002d5a:	621a      	str	r2, [r3, #32]
 8002d5c:	e01c      	b.n	8002d98 <HAL_RCC_OscConfig+0x3a4>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x38c>
 8002d66:	4bc2      	ldr	r3, [pc, #776]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d68:	6a1a      	ldr	r2, [r3, #32]
 8002d6a:	4bc1      	ldr	r3, [pc, #772]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	621a      	str	r2, [r3, #32]
 8002d72:	4bbf      	ldr	r3, [pc, #764]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	4bbe      	ldr	r3, [pc, #760]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	621a      	str	r2, [r3, #32]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0x3a4>
 8002d80:	4bbb      	ldr	r3, [pc, #748]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	4bba      	ldr	r3, [pc, #744]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	438a      	bics	r2, r1
 8002d8a:	621a      	str	r2, [r3, #32]
 8002d8c:	4bb8      	ldr	r3, [pc, #736]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	4bb7      	ldr	r3, [pc, #732]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002d92:	2104      	movs	r1, #4
 8002d94:	438a      	bics	r2, r1
 8002d96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d014      	beq.n	8002dca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7ff fa26 	bl	80021f0 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e009      	b.n	8002dbe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7ff fa21 	bl	80021f0 <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	4aaf      	ldr	r2, [pc, #700]	; (8003074 <HAL_RCC_OscConfig+0x680>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e19a      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	4bac      	ldr	r3, [pc, #688]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x3b6>
 8002dc8:	e013      	b.n	8002df2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7ff fa11 	bl	80021f0 <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd2:	e009      	b.n	8002de8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7ff fa0c 	bl	80021f0 <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	4aa5      	ldr	r2, [pc, #660]	; (8003074 <HAL_RCC_OscConfig+0x680>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e185      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	4ba1      	ldr	r3, [pc, #644]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df2:	231f      	movs	r3, #31
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b9c      	ldr	r3, [pc, #624]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	4b9b      	ldr	r3, [pc, #620]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e02:	499d      	ldr	r1, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x684>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d12a      	bne.n	8002e70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e1a:	4b95      	ldr	r3, [pc, #596]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1e:	4b94      	ldr	r3, [pc, #592]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e20:	2104      	movs	r1, #4
 8002e22:	430a      	orrs	r2, r1
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e26:	4b92      	ldr	r3, [pc, #584]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2a:	4b91      	ldr	r3, [pc, #580]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e32:	f7ff f9dd 	bl	80021f0 <HAL_GetTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e3c:	f7ff f9d8 	bl	80021f0 <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e152      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e4e:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	2202      	movs	r2, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	d0f1      	beq.n	8002e3c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e58:	4b85      	ldr	r3, [pc, #532]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	22f8      	movs	r2, #248	; 0xf8
 8002e5e:	4393      	bics	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	00da      	lsls	r2, r3, #3
 8002e68:	4b81      	ldr	r3, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6e:	e034      	b.n	8002eda <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	3305      	adds	r3, #5
 8002e76:	d111      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e78:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7c:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e7e:	2104      	movs	r1, #4
 8002e80:	438a      	bics	r2, r1
 8002e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e84:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e88:	22f8      	movs	r2, #248	; 0xf8
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	00da      	lsls	r2, r3, #3
 8002e94:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9a:	e01e      	b.n	8002eda <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e9c:	4b74      	ldr	r3, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea0:	4b73      	ldr	r3, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002ea2:	2104      	movs	r1, #4
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ea8:	4b71      	ldr	r3, [pc, #452]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7ff f99c 	bl	80021f0 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ebe:	f7ff f997 	bl	80021f0 <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e111      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ed0:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d1f1      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d05c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ee4:	4b62      	ldr	r3, [pc, #392]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	220c      	movs	r2, #12
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d00e      	beq.n	8002f0e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ef0:	4b5f      	ldr	r3, [pc, #380]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	220c      	movs	r2, #12
 8002ef6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d114      	bne.n	8002f26 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002efc:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	23c0      	movs	r3, #192	; 0xc0
 8002f02:	025b      	lsls	r3, r3, #9
 8002f04:	401a      	ands	r2, r3
 8002f06:	23c0      	movs	r3, #192	; 0xc0
 8002f08:	025b      	lsls	r3, r3, #9
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f0e:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	4013      	ands	r3, r2
 8002f18:	d040      	beq.n	8002f9c <HAL_RCC_OscConfig+0x5a8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d03c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0e6      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f32:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	0249      	lsls	r1, r1, #9
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f958 	bl	80021f0 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f46:	f7ff f953 	bl	80021f0 <HAL_GetTick>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0cd      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f58:	4b45      	ldr	r3, [pc, #276]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	025b      	lsls	r3, r3, #9
 8002f60:	4013      	ands	r3, r2
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x552>
 8002f64:	e01b      	b.n	8002f9e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f66:	4b42      	ldr	r3, [pc, #264]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f6c:	4943      	ldr	r1, [pc, #268]	; (800307c <HAL_RCC_OscConfig+0x688>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7ff f93d 	bl	80021f0 <HAL_GetTick>
 8002f76:	0003      	movs	r3, r0
 8002f78:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7c:	f7ff f938 	bl	80021f0 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0b2      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f8e:	4b38      	ldr	r3, [pc, #224]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	4013      	ands	r3, r2
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x588>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f9c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d100      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x5b4>
 8002fa6:	e0a4      	b.n	80030f2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	220c      	movs	r2, #12
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d100      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5c2>
 8002fb4:	e078      	b.n	80030a8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d14c      	bne.n	8003058 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002fc4:	492e      	ldr	r1, [pc, #184]	; (8003080 <HAL_RCC_OscConfig+0x68c>)
 8002fc6:	400a      	ands	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7ff f911 	bl	80021f0 <HAL_GetTick>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7ff f90c 	bl	80021f0 <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e086      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	049b      	lsls	r3, r3, #18
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	4393      	bics	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8003002:	430a      	orrs	r2, r1
 8003004:	62da      	str	r2, [r3, #44]	; 0x2c
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_RCC_OscConfig+0x690>)
 800300c:	4013      	ands	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	431a      	orrs	r2, r3
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	0449      	lsls	r1, r1, #17
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7ff f8df 	bl	80021f0 <HAL_GetTick>
 8003032:	0003      	movs	r3, r0
 8003034:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003038:	f7ff f8da 	bl	80021f0 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e054      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	049b      	lsls	r3, r3, #18
 8003052:	4013      	ands	r3, r2
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x644>
 8003056:	e04c      	b.n	80030f2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 800305e:	4908      	ldr	r1, [pc, #32]	; (8003080 <HAL_RCC_OscConfig+0x68c>)
 8003060:	400a      	ands	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff f8c4 	bl	80021f0 <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x6a6>
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021000 	.word	0x40021000
 8003074:	00001388 	.word	0x00001388
 8003078:	efffffff 	.word	0xefffffff
 800307c:	fffeffff 	.word	0xfffeffff
 8003080:	feffffff 	.word	0xfeffffff
 8003084:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7ff f8b2 	bl	80021f0 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e02c      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_RCC_OscConfig+0x708>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	049b      	lsls	r3, r3, #18
 80030a2:	4013      	ands	r3, r2
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x694>
 80030a6:	e024      	b.n	80030f2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e01f      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_RCC_OscConfig+0x708>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_RCC_OscConfig+0x708>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	23c0      	movs	r3, #192	; 0xc0
 80030c4:	025b      	lsls	r3, r3, #9
 80030c6:	401a      	ands	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10e      	bne.n	80030ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	220f      	movs	r2, #15
 80030d4:	401a      	ands	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	23f0      	movs	r3, #240	; 0xf0
 80030e2:	039b      	lsls	r3, r3, #14
 80030e4:	401a      	ands	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b008      	add	sp, #32
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0bf      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d911      	bls.n	8003146 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b5e      	ldr	r3, [pc, #376]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	4393      	bics	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	4b5b      	ldr	r3, [pc, #364]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003134:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0a6      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2202      	movs	r2, #2
 800314c:	4013      	ands	r3, r2
 800314e:	d015      	beq.n	800317c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2204      	movs	r2, #4
 8003156:	4013      	ands	r3, r2
 8003158:	d006      	beq.n	8003168 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003160:	21e0      	movs	r1, #224	; 0xe0
 8003162:	00c9      	lsls	r1, r1, #3
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	22f0      	movs	r2, #240	; 0xf0
 800316e:	4393      	bics	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2201      	movs	r2, #1
 8003182:	4013      	ands	r3, r2
 8003184:	d04c      	beq.n	8003220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	029b      	lsls	r3, r3, #10
 8003196:	4013      	ands	r3, r2
 8003198:	d120      	bne.n	80031dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07a      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	049b      	lsls	r3, r3, #18
 80031ae:	4013      	ands	r3, r2
 80031b0:	d114      	bne.n	80031dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06e      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80031be:	4b38      	ldr	r3, [pc, #224]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 80031c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	4013      	ands	r3, r2
 80031c8:	d108      	bne.n	80031dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e062      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ce:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2202      	movs	r2, #2
 80031d4:	4013      	ands	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e05b      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2203      	movs	r2, #3
 80031e2:	4393      	bics	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fe fffe 	bl	80021f0 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f8:	e009      	b.n	800320e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fa:	f7fe fff9 	bl	80021f0 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <HAL_RCC_ClockConfig+0x1a4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e042      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	220c      	movs	r2, #12
 8003214:	401a      	ands	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d1ec      	bne.n	80031fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003220:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	4013      	ands	r3, r2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d211      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2201      	movs	r2, #1
 8003234:	4393      	bics	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCC_ClockConfig+0x19c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	4013      	ands	r3, r2
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d001      	beq.n	8003252 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e020      	b.n	8003294 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2204      	movs	r2, #4
 8003258:	4013      	ands	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_RCC_ClockConfig+0x1a8>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003270:	f000 f820 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003274:	0001      	movs	r1, r0
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x1a0>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	220f      	movs	r2, #15
 800327e:	4013      	ands	r3, r2
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1ac>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	000a      	movs	r2, r1
 8003286:	40da      	lsrs	r2, r3
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1b0>)
 800328a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800328c:	2003      	movs	r0, #3
 800328e:	f7fe ff69 	bl	8002164 <HAL_InitTick>
  
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b004      	add	sp, #16
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40022000 	.word	0x40022000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	00001388 	.word	0x00001388
 80032a8:	fffff8ff 	.word	0xfffff8ff
 80032ac:	08004930 	.word	0x08004930
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b08f      	sub	sp, #60	; 0x3c
 80032b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80032ba:	2314      	movs	r3, #20
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	4a38      	ldr	r2, [pc, #224]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xec>)
 80032c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032c2:	c313      	stmia	r3!, {r0, r1, r4}
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80032c8:	1d3b      	adds	r3, r7, #4
 80032ca:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80032cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032ce:	c313      	stmia	r3!, {r0, r1, r4}
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
 80032dc:	2300      	movs	r3, #0
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80032e8:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	220c      	movs	r2, #12
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d047      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0xd4>
 80032f8:	d849      	bhi.n	800338e <HAL_RCC_GetSysClockFreq+0xda>
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x50>
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x56>
 8003302:	e044      	b.n	800338e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003304:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003306:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003308:	e044      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	0c9b      	lsrs	r3, r3, #18
 800330e:	220f      	movs	r2, #15
 8003310:	4013      	ands	r3, r2
 8003312:	2214      	movs	r2, #20
 8003314:	18ba      	adds	r2, r7, r2
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800331a:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	220f      	movs	r2, #15
 8003320:	4013      	ands	r3, r2
 8003322:	1d3a      	adds	r2, r7, #4
 8003324:	5cd3      	ldrb	r3, [r2, r3]
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332a:	23c0      	movs	r3, #192	; 0xc0
 800332c:	025b      	lsls	r3, r3, #9
 800332e:	401a      	ands	r2, r3
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	025b      	lsls	r3, r3, #9
 8003334:	429a      	cmp	r2, r3
 8003336:	d109      	bne.n	800334c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333a:	481c      	ldr	r0, [pc, #112]	; (80033ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800333c:	f7fc fee2 	bl	8000104 <__udivsi3>
 8003340:	0003      	movs	r3, r0
 8003342:	001a      	movs	r2, r3
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	4353      	muls	r3, r2
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
 800334a:	e01a      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800334c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	025b      	lsls	r3, r3, #9
 8003352:	401a      	ands	r2, r3
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	025b      	lsls	r3, r3, #9
 8003358:	429a      	cmp	r2, r3
 800335a:	d109      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800335c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335e:	4814      	ldr	r0, [pc, #80]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003360:	f7fc fed0 	bl	8000104 <__udivsi3>
 8003364:	0003      	movs	r3, r0
 8003366:	001a      	movs	r2, r3
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	4353      	muls	r3, r2
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
 800336e:	e008      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003372:	480e      	ldr	r0, [pc, #56]	; (80033ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003374:	f7fc fec6 	bl	8000104 <__udivsi3>
 8003378:	0003      	movs	r3, r0
 800337a:	001a      	movs	r2, r3
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	4353      	muls	r3, r2
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003386:	e005      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800338c:	e002      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003392:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b00f      	add	sp, #60	; 0x3c
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	080048d0 	.word	0x080048d0
 80033a4:	080048e0 	.word	0x080048e0
 80033a8:	40021000 	.word	0x40021000
 80033ac:	007a1200 	.word	0x007a1200
 80033b0:	02dc6c00 	.word	0x02dc6c00

080033b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b8:	4b02      	ldr	r3, [pc, #8]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80033cc:	f7ff fff2 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033d0:	0001      	movs	r1, r0
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	2207      	movs	r2, #7
 80033da:	4013      	ands	r3, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033de:	5cd3      	ldrb	r3, [r2, r3]
 80033e0:	40d9      	lsrs	r1, r3
 80033e2:	000b      	movs	r3, r1
}    
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40021000 	.word	0x40021000
 80033f0:	08004940 	.word	0x08004940

080033f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	025b      	lsls	r3, r3, #9
 800340c:	4013      	ands	r3, r2
 800340e:	d100      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003410:	e08e      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2017      	movs	r0, #23
 8003414:	183b      	adds	r3, r7, r0
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	055b      	lsls	r3, r3, #21
 8003422:	4013      	ands	r3, r2
 8003424:	d110      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	0549      	lsls	r1, r1, #21
 8003430:	430a      	orrs	r2, r1
 8003432:	61da      	str	r2, [r3, #28]
 8003434:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	055b      	lsls	r3, r3, #21
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	183b      	adds	r3, r7, r0
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4013      	ands	r3, r2
 8003452:	d11a      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003454:	4b60      	ldr	r3, [pc, #384]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b5f      	ldr	r3, [pc, #380]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	0049      	lsls	r1, r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe fec5 	bl	80021f0 <HAL_GetTick>
 8003466:	0003      	movs	r3, r0
 8003468:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	e008      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fe fec0 	bl	80021f0 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0a6      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4013      	ands	r3, r2
 8003488:	d0f0      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	23c0      	movs	r3, #192	; 0xc0
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d034      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	23c0      	movs	r3, #192	; 0xc0
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4013      	ands	r3, r2
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d02c      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ac:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a4a      	ldr	r2, [pc, #296]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034b8:	6a1a      	ldr	r2, [r3, #32]
 80034ba:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	0249      	lsls	r1, r1, #9
 80034c0:	430a      	orrs	r2, r1
 80034c2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c4:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	4b42      	ldr	r3, [pc, #264]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ca:	4945      	ldr	r1, [pc, #276]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fe87 	bl	80021f0 <HAL_GetTick>
 80034e2:	0003      	movs	r3, r0
 80034e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	e009      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe fe82 	bl	80021f0 <HAL_GetTick>
 80034ec:	0002      	movs	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e067      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	2202      	movs	r2, #2
 8003502:	4013      	ands	r3, r2
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003506:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a34      	ldr	r2, [pc, #208]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003516:	430a      	orrs	r2, r1
 8003518:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800351a:	2317      	movs	r3, #23
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800352a:	492f      	ldr	r1, [pc, #188]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800352c:	400a      	ands	r2, r1
 800352e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2201      	movs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	2203      	movs	r2, #3
 8003540:	4393      	bics	r3, r2
 8003542:	0019      	movs	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800354a:	430a      	orrs	r2, r1
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	4a23      	ldr	r2, [pc, #140]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003568:	430a      	orrs	r2, r1
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	02db      	lsls	r3, r3, #11
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003578:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003588:	430a      	orrs	r2, r1
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2220      	movs	r2, #32
 8003592:	4013      	ands	r3, r2
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	2210      	movs	r2, #16
 800359c:	4393      	bics	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4013      	ands	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	4393      	bics	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035c6:	430a      	orrs	r2, r1
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b006      	add	sp, #24
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40007000 	.word	0x40007000
 80035dc:	fffffcff 	.word	0xfffffcff
 80035e0:	fffeffff 	.word	0xfffeffff
 80035e4:	00001388 	.word	0x00001388
 80035e8:	efffffff 	.word	0xefffffff
 80035ec:	fffcffff 	.word	0xfffcffff
 80035f0:	fff3ffff 	.word	0xfff3ffff

080035f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e044      	b.n	8003690 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2274      	movs	r2, #116	; 0x74
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f7fe fbbb 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2224      	movs	r2, #36	; 0x24
 8003622:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2101      	movs	r1, #1
 8003630:	438a      	bics	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f000 fcbe 	bl	8003fb8 <UART_SetConfig>
 800363c:	0003      	movs	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e024      	b.n	8003690 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 fe99 	bl	8004388 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	490d      	ldr	r1, [pc, #52]	; (8003698 <HAL_UART_Init+0xa4>)
 8003662:	400a      	ands	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	212a      	movs	r1, #42	; 0x2a
 8003672:	438a      	bics	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 ff31 	bl	80044f0 <UART_CheckIdleState>
 800368e:	0003      	movs	r3, r0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}
 8003698:	ffffb7ff 	.word	0xffffb7ff

0800369c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dbb      	adds	r3, r7, #6
 80036aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d000      	beq.n	80036b6 <HAL_UART_Transmit+0x1a>
 80036b4:	e096      	b.n	80037e4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_UART_Transmit+0x28>
 80036bc:	1dbb      	adds	r3, r7, #6
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e08e      	b.n	80037e6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	015b      	lsls	r3, r3, #5
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d109      	bne.n	80036e8 <HAL_UART_Transmit+0x4c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2201      	movs	r2, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	d001      	beq.n	80036e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e07e      	b.n	80037e6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2274      	movs	r2, #116	; 0x74
 80036ec:	5c9b      	ldrb	r3, [r3, r2]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Transmit+0x5a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e077      	b.n	80037e6 <HAL_UART_Transmit+0x14a>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2274      	movs	r2, #116	; 0x74
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	2100      	movs	r1, #0
 8003704:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2221      	movs	r2, #33	; 0x21
 800370a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800370c:	f7fe fd70 	bl	80021f0 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1dba      	adds	r2, r7, #6
 8003718:	2150      	movs	r1, #80	; 0x50
 800371a:	8812      	ldrh	r2, [r2, #0]
 800371c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1dba      	adds	r2, r7, #6
 8003722:	2152      	movs	r1, #82	; 0x52
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	015b      	lsls	r3, r3, #5
 8003730:	429a      	cmp	r2, r3
 8003732:	d108      	bne.n	8003746 <HAL_UART_Transmit+0xaa>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e003      	b.n	800374e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2274      	movs	r2, #116	; 0x74
 8003752:	2100      	movs	r1, #0
 8003754:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003756:	e02d      	b.n	80037b4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	0013      	movs	r3, r2
 8003762:	2200      	movs	r2, #0
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	f000 ff0b 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d001      	beq.n	8003772 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e039      	b.n	80037e6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	881a      	ldrh	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	05d2      	lsls	r2, r2, #23
 8003782:	0dd2      	lsrs	r2, r2, #23
 8003784:	b292      	uxth	r2, r2
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	3302      	adds	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e008      	b.n	80037a2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	b292      	uxth	r2, r2
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2252      	movs	r2, #82	; 0x52
 80037a6:	5a9b      	ldrh	r3, [r3, r2]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b299      	uxth	r1, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2252      	movs	r2, #82	; 0x52
 80037b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2252      	movs	r2, #82	; 0x52
 80037b8:	5a9b      	ldrh	r3, [r3, r2]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1cb      	bne.n	8003758 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	0013      	movs	r3, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	2140      	movs	r1, #64	; 0x40
 80037ce:	f000 fed7 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e005      	b.n	80037e6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b008      	add	sp, #32
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	1dbb      	adds	r3, r7, #6
 80037fe:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003804:	2b20      	cmp	r3, #32
 8003806:	d000      	beq.n	800380a <HAL_UART_Receive+0x1a>
 8003808:	e0da      	b.n	80039c0 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_UART_Receive+0x28>
 8003810:	1dbb      	adds	r3, r7, #6
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0d2      	b.n	80039c2 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	015b      	lsls	r3, r3, #5
 8003824:	429a      	cmp	r2, r3
 8003826:	d109      	bne.n	800383c <HAL_UART_Receive+0x4c>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2201      	movs	r2, #1
 8003834:	4013      	ands	r3, r2
 8003836:	d001      	beq.n	800383c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0c2      	b.n	80039c2 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2274      	movs	r2, #116	; 0x74
 8003840:	5c9b      	ldrb	r3, [r3, r2]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_UART_Receive+0x5a>
 8003846:	2302      	movs	r3, #2
 8003848:	e0bb      	b.n	80039c2 <HAL_UART_Receive+0x1d2>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2274      	movs	r2, #116	; 0x74
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2280      	movs	r2, #128	; 0x80
 8003856:	2100      	movs	r1, #0
 8003858:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2222      	movs	r2, #34	; 0x22
 800385e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003866:	f7fe fcc3 	bl	80021f0 <HAL_GetTick>
 800386a:	0003      	movs	r3, r0
 800386c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1dba      	adds	r2, r7, #6
 8003872:	2158      	movs	r1, #88	; 0x58
 8003874:	8812      	ldrh	r2, [r2, #0]
 8003876:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1dba      	adds	r2, r7, #6
 800387c:	215a      	movs	r1, #90	; 0x5a
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	015b      	lsls	r3, r3, #5
 800388a:	429a      	cmp	r2, r3
 800388c:	d10d      	bne.n	80038aa <HAL_UART_Receive+0xba>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <HAL_UART_Receive+0xb0>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	225c      	movs	r2, #92	; 0x5c
 800389a:	494c      	ldr	r1, [pc, #304]	; (80039cc <HAL_UART_Receive+0x1dc>)
 800389c:	5299      	strh	r1, [r3, r2]
 800389e:	e02e      	b.n	80038fe <HAL_UART_Receive+0x10e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	225c      	movs	r2, #92	; 0x5c
 80038a4:	21ff      	movs	r1, #255	; 0xff
 80038a6:	5299      	strh	r1, [r3, r2]
 80038a8:	e029      	b.n	80038fe <HAL_UART_Receive+0x10e>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_UART_Receive+0xde>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <HAL_UART_Receive+0xd4>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	225c      	movs	r2, #92	; 0x5c
 80038be:	21ff      	movs	r1, #255	; 0xff
 80038c0:	5299      	strh	r1, [r3, r2]
 80038c2:	e01c      	b.n	80038fe <HAL_UART_Receive+0x10e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	225c      	movs	r2, #92	; 0x5c
 80038c8:	217f      	movs	r1, #127	; 0x7f
 80038ca:	5299      	strh	r1, [r3, r2]
 80038cc:	e017      	b.n	80038fe <HAL_UART_Receive+0x10e>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	055b      	lsls	r3, r3, #21
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d10d      	bne.n	80038f6 <HAL_UART_Receive+0x106>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d104      	bne.n	80038ec <HAL_UART_Receive+0xfc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	225c      	movs	r2, #92	; 0x5c
 80038e6:	217f      	movs	r1, #127	; 0x7f
 80038e8:	5299      	strh	r1, [r3, r2]
 80038ea:	e008      	b.n	80038fe <HAL_UART_Receive+0x10e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	225c      	movs	r2, #92	; 0x5c
 80038f0:	213f      	movs	r1, #63	; 0x3f
 80038f2:	5299      	strh	r1, [r3, r2]
 80038f4:	e003      	b.n	80038fe <HAL_UART_Receive+0x10e>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	225c      	movs	r2, #92	; 0x5c
 80038fa:	2100      	movs	r1, #0
 80038fc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80038fe:	2312      	movs	r3, #18
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	215c      	movs	r1, #92	; 0x5c
 8003906:	5a52      	ldrh	r2, [r2, r1]
 8003908:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	015b      	lsls	r3, r3, #5
 8003912:	429a      	cmp	r2, r3
 8003914:	d108      	bne.n	8003928 <HAL_UART_Receive+0x138>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2274      	movs	r2, #116	; 0x74
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003938:	e037      	b.n	80039aa <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	0013      	movs	r3, r2
 8003944:	2200      	movs	r2, #0
 8003946:	2120      	movs	r1, #32
 8003948:	f000 fe1a 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e036      	b.n	80039c2 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003960:	b29b      	uxth	r3, r3
 8003962:	2212      	movs	r2, #18
 8003964:	18ba      	adds	r2, r7, r2
 8003966:	8812      	ldrh	r2, [r2, #0]
 8003968:	4013      	ands	r3, r2
 800396a:	b29a      	uxth	r2, r3
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	3302      	adds	r3, #2
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e00f      	b.n	8003998 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800397e:	b29b      	uxth	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2212      	movs	r2, #18
 8003984:	18ba      	adds	r2, r7, r2
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	4013      	ands	r3, r2
 800398c:	b2da      	uxtb	r2, r3
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3301      	adds	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	225a      	movs	r2, #90	; 0x5a
 800399c:	5a9b      	ldrh	r3, [r3, r2]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b299      	uxth	r1, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	225a      	movs	r2, #90	; 0x5a
 80039a8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	225a      	movs	r2, #90	; 0x5a
 80039ae:	5a9b      	ldrh	r3, [r3, r2]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1c1      	bne.n	800393a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b008      	add	sp, #32
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	000001ff 	.word	0x000001ff

080039d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b0ab      	sub	sp, #172	; 0xac
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	22a4      	movs	r2, #164	; 0xa4
 80039e0:	18b9      	adds	r1, r7, r2
 80039e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	20a0      	movs	r0, #160	; 0xa0
 80039ec:	1839      	adds	r1, r7, r0
 80039ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	219c      	movs	r1, #156	; 0x9c
 80039f8:	1879      	adds	r1, r7, r1
 80039fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039fc:	0011      	movs	r1, r2
 80039fe:	18bb      	adds	r3, r7, r2
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a99      	ldr	r2, [pc, #612]	; (8003c68 <HAL_UART_IRQHandler+0x298>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	2298      	movs	r2, #152	; 0x98
 8003a08:	18bc      	adds	r4, r7, r2
 8003a0a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003a0c:	18bb      	adds	r3, r7, r2
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2220      	movs	r2, #32
 8003a24:	4013      	ands	r3, r2
 8003a26:	d00a      	beq.n	8003a3e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d100      	bne.n	8003a32 <HAL_UART_IRQHandler+0x62>
 8003a30:	e296      	b.n	8003f60 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	0010      	movs	r0, r2
 8003a3a:	4798      	blx	r3
      }
      return;
 8003a3c:	e290      	b.n	8003f60 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a3e:	2398      	movs	r3, #152	; 0x98
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d100      	bne.n	8003a4a <HAL_UART_IRQHandler+0x7a>
 8003a48:	e114      	b.n	8003c74 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a4a:	239c      	movs	r3, #156	; 0x9c
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2201      	movs	r2, #1
 8003a52:	4013      	ands	r3, r2
 8003a54:	d106      	bne.n	8003a64 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a56:	23a0      	movs	r3, #160	; 0xa0
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a83      	ldr	r2, [pc, #524]	; (8003c6c <HAL_UART_IRQHandler+0x29c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d100      	bne.n	8003a64 <HAL_UART_IRQHandler+0x94>
 8003a62:	e107      	b.n	8003c74 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a64:	23a4      	movs	r3, #164	; 0xa4
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d012      	beq.n	8003a96 <HAL_UART_IRQHandler+0xc6>
 8003a70:	23a0      	movs	r3, #160	; 0xa0
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2201      	movs	r2, #1
 8003a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	589b      	ldr	r3, [r3, r2]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a96:	23a4      	movs	r3, #164	; 0xa4
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d011      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xf6>
 8003aa2:	239c      	movs	r3, #156	; 0x9c
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	589b      	ldr	r3, [r3, r2]
 8003abc:	2204      	movs	r2, #4
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2180      	movs	r1, #128	; 0x80
 8003ac4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac6:	23a4      	movs	r3, #164	; 0xa4
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2204      	movs	r2, #4
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d011      	beq.n	8003af6 <HAL_UART_IRQHandler+0x126>
 8003ad2:	239c      	movs	r3, #156	; 0x9c
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	589b      	ldr	r3, [r3, r2]
 8003aec:	2202      	movs	r2, #2
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003af6:	23a4      	movs	r3, #164	; 0xa4
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2208      	movs	r2, #8
 8003afe:	4013      	ands	r3, r2
 8003b00:	d017      	beq.n	8003b32 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b02:	23a0      	movs	r3, #160	; 0xa0
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d105      	bne.n	8003b1a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b0e:	239c      	movs	r3, #156	; 0x9c
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2201      	movs	r2, #1
 8003b16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2208      	movs	r2, #8
 8003b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2280      	movs	r2, #128	; 0x80
 8003b26:	589b      	ldr	r3, [r3, r2]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b32:	23a4      	movs	r3, #164	; 0xa4
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_UART_IRQHandler+0x198>
 8003b40:	23a0      	movs	r3, #160	; 0xa0
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	04db      	lsls	r3, r3, #19
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d00c      	beq.n	8003b68 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	589b      	ldr	r3, [r3, r2]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	589b      	ldr	r3, [r3, r2]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d100      	bne.n	8003b74 <HAL_UART_IRQHandler+0x1a4>
 8003b72:	e1f7      	b.n	8003f64 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b74:	23a4      	movs	r3, #164	; 0xa4
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b80:	23a0      	movs	r3, #160	; 0xa0
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2220      	movs	r2, #32
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d008      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	0010      	movs	r0, r2
 8003b9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	589b      	ldr	r3, [r3, r2]
 8003ba4:	2194      	movs	r1, #148	; 0x94
 8003ba6:	187a      	adds	r2, r7, r1
 8003ba8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d004      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2228      	movs	r2, #40	; 0x28
 8003bbe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bc0:	d047      	beq.n	8003c52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 fd9f 	bl	8004708 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2240      	movs	r2, #64	; 0x40
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d137      	bne.n	8003c48 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bdc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be0:	2090      	movs	r0, #144	; 0x90
 8003be2:	183a      	adds	r2, r7, r0
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	2301      	movs	r3, #1
 8003be8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2140      	movs	r1, #64	; 0x40
 8003bfe:	438a      	bics	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <HAL_UART_IRQHandler+0x2a0>)
 8003c1e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fe fc4b 	bl	80024c0 <HAL_DMA_Abort_IT>
 8003c2a:	1e03      	subs	r3, r0, #0
 8003c2c:	d01a      	beq.n	8003c64 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	0018      	movs	r0, r3
 8003c3a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e012      	b.n	8003c64 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 f9a5 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c46:	e00d      	b.n	8003c64 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 f9a0 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e008      	b.n	8003c64 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f99b 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c62:	e17f      	b.n	8003f64 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	46c0      	nop			; (mov r8, r8)
    return;
 8003c66:	e17d      	b.n	8003f64 <HAL_UART_IRQHandler+0x594>
 8003c68:	0000080f 	.word	0x0000080f
 8003c6c:	04000120 	.word	0x04000120
 8003c70:	080047cd 	.word	0x080047cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d000      	beq.n	8003c7e <HAL_UART_IRQHandler+0x2ae>
 8003c7c:	e131      	b.n	8003ee2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c7e:	23a4      	movs	r3, #164	; 0xa4
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2210      	movs	r2, #16
 8003c86:	4013      	ands	r3, r2
 8003c88:	d100      	bne.n	8003c8c <HAL_UART_IRQHandler+0x2bc>
 8003c8a:	e12a      	b.n	8003ee2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c8c:	23a0      	movs	r3, #160	; 0xa0
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2210      	movs	r2, #16
 8003c94:	4013      	ands	r3, r2
 8003c96:	d100      	bne.n	8003c9a <HAL_UART_IRQHandler+0x2ca>
 8003c98:	e123      	b.n	8003ee2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2240      	movs	r2, #64	; 0x40
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d000      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x2e2>
 8003cb0:	e09b      	b.n	8003dea <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	217e      	movs	r1, #126	; 0x7e
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d100      	bne.n	8003cca <HAL_UART_IRQHandler+0x2fa>
 8003cc8:	e14e      	b.n	8003f68 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2258      	movs	r2, #88	; 0x58
 8003cce:	5a9b      	ldrh	r3, [r3, r2]
 8003cd0:	187a      	adds	r2, r7, r1
 8003cd2:	8812      	ldrh	r2, [r2, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d300      	bcc.n	8003cda <HAL_UART_IRQHandler+0x30a>
 8003cd8:	e146      	b.n	8003f68 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	187a      	adds	r2, r7, r1
 8003cde:	215a      	movs	r1, #90	; 0x5a
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d06e      	beq.n	8003dcc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cee:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	499a      	ldr	r1, [pc, #616]	; (8003f78 <HAL_UART_IRQHandler+0x5a8>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	f383 8810 	msr	PRIMASK, r3
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d20:	f3ef 8310 	mrs	r3, PRIMASK
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d28:	677b      	str	r3, [r7, #116]	; 0x74
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	438a      	bics	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4c:	f383 8810 	msr	PRIMASK, r3
}
 8003d50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d52:	f3ef 8310 	mrs	r3, PRIMASK
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d62:	f383 8810 	msr	PRIMASK, r3
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2140      	movs	r1, #64	; 0x40
 8003d74:	438a      	bics	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d90:	f3ef 8310 	mrs	r3, PRIMASK
 8003d94:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da0:	f383 8810 	msr	PRIMASK, r3
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2110      	movs	r1, #16
 8003db2:	438a      	bics	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dbc:	f383 8810 	msr	PRIMASK, r3
}
 8003dc0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7fe fb42 	bl	8002450 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2258      	movs	r2, #88	; 0x58
 8003dd0:	5a9a      	ldrh	r2, [r3, r2]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	215a      	movs	r1, #90	; 0x5a
 8003dd6:	5a5b      	ldrh	r3, [r3, r1]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 f8dc 	bl	8003fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003de8:	e0be      	b.n	8003f68 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2258      	movs	r2, #88	; 0x58
 8003dee:	5a99      	ldrh	r1, [r3, r2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	225a      	movs	r2, #90	; 0x5a
 8003df4:	5a9b      	ldrh	r3, [r3, r2]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	208e      	movs	r0, #142	; 0x8e
 8003dfa:	183b      	adds	r3, r7, r0
 8003dfc:	1a8a      	subs	r2, r1, r2
 8003dfe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	225a      	movs	r2, #90	; 0x5a
 8003e04:	5a9b      	ldrh	r3, [r3, r2]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d100      	bne.n	8003e0e <HAL_UART_IRQHandler+0x43e>
 8003e0c:	e0ae      	b.n	8003f6c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d100      	bne.n	8003e18 <HAL_UART_IRQHandler+0x448>
 8003e16:	e0a9      	b.n	8003f6c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e20:	2488      	movs	r4, #136	; 0x88
 8003e22:	193a      	adds	r2, r7, r4
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	2301      	movs	r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	494f      	ldr	r1, [pc, #316]	; (8003f7c <HAL_UART_IRQHandler+0x5ac>)
 8003e3e:	400a      	ands	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e50:	f3ef 8310 	mrs	r3, PRIMASK
 8003e54:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e56:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	2484      	movs	r4, #132	; 0x84
 8003e5a:	193a      	adds	r2, r7, r4
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f383 8810 	msr	PRIMASK, r3
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	438a      	bics	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	193b      	adds	r3, r7, r4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	2480      	movs	r4, #128	; 0x80
 8003ea4:	193a      	adds	r2, r7, r4
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	193b      	adds	r3, r7, r4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	f383 8810 	msr	PRIMASK, r3
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed2:	183b      	adds	r3, r7, r0
 8003ed4:	881a      	ldrh	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 f860 	bl	8003fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ee0:	e044      	b.n	8003f6c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ee2:	23a4      	movs	r3, #164	; 0xa4
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	035b      	lsls	r3, r3, #13
 8003eec:	4013      	ands	r3, r2
 8003eee:	d010      	beq.n	8003f12 <HAL_UART_IRQHandler+0x542>
 8003ef0:	239c      	movs	r3, #156	; 0x9c
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	03db      	lsls	r3, r3, #15
 8003efa:	4013      	ands	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2280      	movs	r2, #128	; 0x80
 8003f04:	0352      	lsls	r2, r2, #13
 8003f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 fca0 	bl	8004850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f10:	e02f      	b.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f12:	23a4      	movs	r3, #164	; 0xa4
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d00f      	beq.n	8003f3e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f1e:	23a0      	movs	r3, #160	; 0xa0
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2280      	movs	r2, #128	; 0x80
 8003f26:	4013      	ands	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01e      	beq.n	8003f70 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	0010      	movs	r0, r2
 8003f3a:	4798      	blx	r3
    }
    return;
 8003f3c:	e018      	b.n	8003f70 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f3e:	23a4      	movs	r3, #164	; 0xa4
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2240      	movs	r2, #64	; 0x40
 8003f46:	4013      	ands	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
 8003f4a:	23a0      	movs	r3, #160	; 0xa0
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2240      	movs	r2, #64	; 0x40
 8003f52:	4013      	ands	r3, r2
 8003f54:	d00d      	beq.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 fc4e 	bl	80047fa <UART_EndTransmit_IT>
    return;
 8003f5e:	e008      	b.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	e006      	b.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	e004      	b.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	e002      	b.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	e000      	b.n	8003f72 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003f70:	46c0      	nop			; (mov r8, r8)
  }

}
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b02b      	add	sp, #172	; 0xac
 8003f76:	bd90      	pop	{r4, r7, pc}
 8003f78:	fffffeff 	.word	0xfffffeff
 8003f7c:	fffffedf 	.word	0xfffffedf

08003f80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b002      	add	sp, #8
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	000a      	movs	r2, r1
 8003faa:	1cbb      	adds	r3, r7, #2
 8003fac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fc0:	231e      	movs	r3, #30
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4abe      	ldr	r2, [pc, #760]	; (80042e0 <UART_SetConfig+0x328>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4ab9      	ldr	r2, [pc, #740]	; (80042e4 <UART_SetConfig+0x32c>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4ab0      	ldr	r2, [pc, #704]	; (80042e8 <UART_SetConfig+0x330>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4aac      	ldr	r2, [pc, #688]	; (80042ec <UART_SetConfig+0x334>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d127      	bne.n	800408e <UART_SetConfig+0xd6>
 800403e:	4bac      	ldr	r3, [pc, #688]	; (80042f0 <UART_SetConfig+0x338>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	2203      	movs	r2, #3
 8004044:	4013      	ands	r3, r2
 8004046:	2b03      	cmp	r3, #3
 8004048:	d00d      	beq.n	8004066 <UART_SetConfig+0xae>
 800404a:	d81b      	bhi.n	8004084 <UART_SetConfig+0xcc>
 800404c:	2b02      	cmp	r3, #2
 800404e:	d014      	beq.n	800407a <UART_SetConfig+0xc2>
 8004050:	d818      	bhi.n	8004084 <UART_SetConfig+0xcc>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <UART_SetConfig+0xa4>
 8004056:	2b01      	cmp	r3, #1
 8004058:	d00a      	beq.n	8004070 <UART_SetConfig+0xb8>
 800405a:	e013      	b.n	8004084 <UART_SetConfig+0xcc>
 800405c:	231f      	movs	r3, #31
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e0bd      	b.n	80041e2 <UART_SetConfig+0x22a>
 8004066:	231f      	movs	r3, #31
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	2202      	movs	r2, #2
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e0b8      	b.n	80041e2 <UART_SetConfig+0x22a>
 8004070:	231f      	movs	r3, #31
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2204      	movs	r2, #4
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e0b3      	b.n	80041e2 <UART_SetConfig+0x22a>
 800407a:	231f      	movs	r3, #31
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	2208      	movs	r2, #8
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e0ae      	b.n	80041e2 <UART_SetConfig+0x22a>
 8004084:	231f      	movs	r3, #31
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2210      	movs	r2, #16
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e0a9      	b.n	80041e2 <UART_SetConfig+0x22a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a98      	ldr	r2, [pc, #608]	; (80042f4 <UART_SetConfig+0x33c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d134      	bne.n	8004102 <UART_SetConfig+0x14a>
 8004098:	4b95      	ldr	r3, [pc, #596]	; (80042f0 <UART_SetConfig+0x338>)
 800409a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409c:	23c0      	movs	r3, #192	; 0xc0
 800409e:	029b      	lsls	r3, r3, #10
 80040a0:	4013      	ands	r3, r2
 80040a2:	22c0      	movs	r2, #192	; 0xc0
 80040a4:	0292      	lsls	r2, r2, #10
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d017      	beq.n	80040da <UART_SetConfig+0x122>
 80040aa:	22c0      	movs	r2, #192	; 0xc0
 80040ac:	0292      	lsls	r2, r2, #10
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d822      	bhi.n	80040f8 <UART_SetConfig+0x140>
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	0292      	lsls	r2, r2, #10
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d019      	beq.n	80040ee <UART_SetConfig+0x136>
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	0292      	lsls	r2, r2, #10
 80040be:	4293      	cmp	r3, r2
 80040c0:	d81a      	bhi.n	80040f8 <UART_SetConfig+0x140>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <UART_SetConfig+0x118>
 80040c6:	2280      	movs	r2, #128	; 0x80
 80040c8:	0252      	lsls	r2, r2, #9
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00a      	beq.n	80040e4 <UART_SetConfig+0x12c>
 80040ce:	e013      	b.n	80040f8 <UART_SetConfig+0x140>
 80040d0:	231f      	movs	r3, #31
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e083      	b.n	80041e2 <UART_SetConfig+0x22a>
 80040da:	231f      	movs	r3, #31
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e07e      	b.n	80041e2 <UART_SetConfig+0x22a>
 80040e4:	231f      	movs	r3, #31
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	2204      	movs	r2, #4
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e079      	b.n	80041e2 <UART_SetConfig+0x22a>
 80040ee:	231f      	movs	r3, #31
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2208      	movs	r2, #8
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e074      	b.n	80041e2 <UART_SetConfig+0x22a>
 80040f8:	231f      	movs	r3, #31
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	2210      	movs	r2, #16
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e06f      	b.n	80041e2 <UART_SetConfig+0x22a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7c      	ldr	r2, [pc, #496]	; (80042f8 <UART_SetConfig+0x340>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d134      	bne.n	8004176 <UART_SetConfig+0x1be>
 800410c:	4b78      	ldr	r3, [pc, #480]	; (80042f0 <UART_SetConfig+0x338>)
 800410e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004110:	23c0      	movs	r3, #192	; 0xc0
 8004112:	031b      	lsls	r3, r3, #12
 8004114:	4013      	ands	r3, r2
 8004116:	22c0      	movs	r2, #192	; 0xc0
 8004118:	0312      	lsls	r2, r2, #12
 800411a:	4293      	cmp	r3, r2
 800411c:	d017      	beq.n	800414e <UART_SetConfig+0x196>
 800411e:	22c0      	movs	r2, #192	; 0xc0
 8004120:	0312      	lsls	r2, r2, #12
 8004122:	4293      	cmp	r3, r2
 8004124:	d822      	bhi.n	800416c <UART_SetConfig+0x1b4>
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	0312      	lsls	r2, r2, #12
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <UART_SetConfig+0x1aa>
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	0312      	lsls	r2, r2, #12
 8004132:	4293      	cmp	r3, r2
 8004134:	d81a      	bhi.n	800416c <UART_SetConfig+0x1b4>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <UART_SetConfig+0x18c>
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	02d2      	lsls	r2, r2, #11
 800413e:	4293      	cmp	r3, r2
 8004140:	d00a      	beq.n	8004158 <UART_SetConfig+0x1a0>
 8004142:	e013      	b.n	800416c <UART_SetConfig+0x1b4>
 8004144:	231f      	movs	r3, #31
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e049      	b.n	80041e2 <UART_SetConfig+0x22a>
 800414e:	231f      	movs	r3, #31
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2202      	movs	r2, #2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e044      	b.n	80041e2 <UART_SetConfig+0x22a>
 8004158:	231f      	movs	r3, #31
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2204      	movs	r2, #4
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e03f      	b.n	80041e2 <UART_SetConfig+0x22a>
 8004162:	231f      	movs	r3, #31
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2208      	movs	r2, #8
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e03a      	b.n	80041e2 <UART_SetConfig+0x22a>
 800416c:	231f      	movs	r3, #31
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2210      	movs	r2, #16
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e035      	b.n	80041e2 <UART_SetConfig+0x22a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a60      	ldr	r2, [pc, #384]	; (80042fc <UART_SetConfig+0x344>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d104      	bne.n	800418a <UART_SetConfig+0x1d2>
 8004180:	231f      	movs	r3, #31
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e02b      	b.n	80041e2 <UART_SetConfig+0x22a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a5c      	ldr	r2, [pc, #368]	; (8004300 <UART_SetConfig+0x348>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d104      	bne.n	800419e <UART_SetConfig+0x1e6>
 8004194:	231f      	movs	r3, #31
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e021      	b.n	80041e2 <UART_SetConfig+0x22a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a58      	ldr	r2, [pc, #352]	; (8004304 <UART_SetConfig+0x34c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d104      	bne.n	80041b2 <UART_SetConfig+0x1fa>
 80041a8:	231f      	movs	r3, #31
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e017      	b.n	80041e2 <UART_SetConfig+0x22a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a54      	ldr	r2, [pc, #336]	; (8004308 <UART_SetConfig+0x350>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d104      	bne.n	80041c6 <UART_SetConfig+0x20e>
 80041bc:	231f      	movs	r3, #31
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e00d      	b.n	80041e2 <UART_SetConfig+0x22a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a50      	ldr	r2, [pc, #320]	; (800430c <UART_SetConfig+0x354>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d104      	bne.n	80041da <UART_SetConfig+0x222>
 80041d0:	231f      	movs	r3, #31
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e003      	b.n	80041e2 <UART_SetConfig+0x22a>
 80041da:	231f      	movs	r3, #31
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	2210      	movs	r2, #16
 80041e0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d15d      	bne.n	80042aa <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80041ee:	231f      	movs	r3, #31
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d015      	beq.n	8004224 <UART_SetConfig+0x26c>
 80041f8:	dc18      	bgt.n	800422c <UART_SetConfig+0x274>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d00d      	beq.n	800421a <UART_SetConfig+0x262>
 80041fe:	dc15      	bgt.n	800422c <UART_SetConfig+0x274>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <UART_SetConfig+0x252>
 8004204:	2b02      	cmp	r3, #2
 8004206:	d005      	beq.n	8004214 <UART_SetConfig+0x25c>
 8004208:	e010      	b.n	800422c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420a:	f7ff f8dd 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 800420e:	0003      	movs	r3, r0
 8004210:	61bb      	str	r3, [r7, #24]
        break;
 8004212:	e012      	b.n	800423a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <UART_SetConfig+0x358>)
 8004216:	61bb      	str	r3, [r7, #24]
        break;
 8004218:	e00f      	b.n	800423a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7ff f84b 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800421e:	0003      	movs	r3, r0
 8004220:	61bb      	str	r3, [r7, #24]
        break;
 8004222:	e00a      	b.n	800423a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	61bb      	str	r3, [r7, #24]
        break;
 800422a:	e006      	b.n	800423a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004230:	231e      	movs	r3, #30
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
        break;
 8004238:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d100      	bne.n	8004242 <UART_SetConfig+0x28a>
 8004240:	e095      	b.n	800436e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	005a      	lsls	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	18d2      	adds	r2, r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	0019      	movs	r1, r3
 8004254:	0010      	movs	r0, r2
 8004256:	f7fb ff55 	bl	8000104 <__udivsi3>
 800425a:	0003      	movs	r3, r0
 800425c:	b29b      	uxth	r3, r3
 800425e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0f      	cmp	r3, #15
 8004264:	d91c      	bls.n	80042a0 <UART_SetConfig+0x2e8>
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	025b      	lsls	r3, r3, #9
 800426c:	429a      	cmp	r2, r3
 800426e:	d217      	bcs.n	80042a0 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	b29a      	uxth	r2, r3
 8004274:	200e      	movs	r0, #14
 8004276:	183b      	adds	r3, r7, r0
 8004278:	210f      	movs	r1, #15
 800427a:	438a      	bics	r2, r1
 800427c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	2207      	movs	r2, #7
 8004286:	4013      	ands	r3, r2
 8004288:	b299      	uxth	r1, r3
 800428a:	183b      	adds	r3, r7, r0
 800428c:	183a      	adds	r2, r7, r0
 800428e:	8812      	ldrh	r2, [r2, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	183a      	adds	r2, r7, r0
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e066      	b.n	800436e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80042a0:	231e      	movs	r3, #30
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e061      	b.n	800436e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042aa:	231f      	movs	r3, #31
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d02f      	beq.n	8004314 <UART_SetConfig+0x35c>
 80042b4:	dc32      	bgt.n	800431c <UART_SetConfig+0x364>
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d00d      	beq.n	80042d6 <UART_SetConfig+0x31e>
 80042ba:	dc2f      	bgt.n	800431c <UART_SetConfig+0x364>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <UART_SetConfig+0x30e>
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d005      	beq.n	80042d0 <UART_SetConfig+0x318>
 80042c4:	e02a      	b.n	800431c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c6:	f7ff f87f 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 80042ca:	0003      	movs	r3, r0
 80042cc:	61bb      	str	r3, [r7, #24]
        break;
 80042ce:	e02c      	b.n	800432a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <UART_SetConfig+0x358>)
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e029      	b.n	800432a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d6:	f7fe ffed 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80042da:	0003      	movs	r3, r0
 80042dc:	61bb      	str	r3, [r7, #24]
        break;
 80042de:	e024      	b.n	800432a <UART_SetConfig+0x372>
 80042e0:	efff69f3 	.word	0xefff69f3
 80042e4:	ffffcfff 	.word	0xffffcfff
 80042e8:	fffff4ff 	.word	0xfffff4ff
 80042ec:	40013800 	.word	0x40013800
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40004400 	.word	0x40004400
 80042f8:	40004800 	.word	0x40004800
 80042fc:	40004c00 	.word	0x40004c00
 8004300:	40005000 	.word	0x40005000
 8004304:	40011400 	.word	0x40011400
 8004308:	40011800 	.word	0x40011800
 800430c:	40011c00 	.word	0x40011c00
 8004310:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	61bb      	str	r3, [r7, #24]
        break;
 800431a:	e006      	b.n	800432a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004320:	231e      	movs	r3, #30
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
        break;
 8004328:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01e      	beq.n	800436e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	085a      	lsrs	r2, r3, #1
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	18d2      	adds	r2, r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	0019      	movs	r1, r3
 8004340:	0010      	movs	r0, r2
 8004342:	f7fb fedf 	bl	8000104 <__udivsi3>
 8004346:	0003      	movs	r3, r0
 8004348:	b29b      	uxth	r3, r3
 800434a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	d909      	bls.n	8004366 <UART_SetConfig+0x3ae>
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	025b      	lsls	r3, r3, #9
 8004358:	429a      	cmp	r2, r3
 800435a:	d204      	bcs.n	8004366 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e003      	b.n	800436e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004366:	231e      	movs	r3, #30
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800437a:	231e      	movs	r3, #30
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	781b      	ldrb	r3, [r3, #0]
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b008      	add	sp, #32
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	2201      	movs	r2, #1
 8004396:	4013      	ands	r3, r2
 8004398:	d00b      	beq.n	80043b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a4a      	ldr	r2, [pc, #296]	; (80044cc <UART_AdvFeatureConfig+0x144>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2202      	movs	r2, #2
 80043b8:	4013      	ands	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4a43      	ldr	r2, [pc, #268]	; (80044d0 <UART_AdvFeatureConfig+0x148>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2204      	movs	r2, #4
 80043da:	4013      	ands	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a3b      	ldr	r2, [pc, #236]	; (80044d4 <UART_AdvFeatureConfig+0x14c>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	2208      	movs	r2, #8
 80043fc:	4013      	ands	r3, r2
 80043fe:	d00b      	beq.n	8004418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4a34      	ldr	r2, [pc, #208]	; (80044d8 <UART_AdvFeatureConfig+0x150>)
 8004408:	4013      	ands	r3, r2
 800440a:	0019      	movs	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2210      	movs	r2, #16
 800441e:	4013      	ands	r3, r2
 8004420:	d00b      	beq.n	800443a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <UART_AdvFeatureConfig+0x154>)
 800442a:	4013      	ands	r3, r2
 800442c:	0019      	movs	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2220      	movs	r2, #32
 8004440:	4013      	ands	r3, r2
 8004442:	d00b      	beq.n	800445c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <UART_AdvFeatureConfig+0x158>)
 800444c:	4013      	ands	r3, r2
 800444e:	0019      	movs	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	4013      	ands	r3, r2
 8004464:	d01d      	beq.n	80044a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <UART_AdvFeatureConfig+0x15c>)
 800446e:	4013      	ands	r3, r2
 8004470:	0019      	movs	r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	035b      	lsls	r3, r3, #13
 8004486:	429a      	cmp	r2, r3
 8004488:	d10b      	bne.n	80044a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <UART_AdvFeatureConfig+0x160>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2280      	movs	r2, #128	; 0x80
 80044a8:	4013      	ands	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <UART_AdvFeatureConfig+0x164>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	0019      	movs	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	fffdffff 	.word	0xfffdffff
 80044d0:	fffeffff 	.word	0xfffeffff
 80044d4:	fffbffff 	.word	0xfffbffff
 80044d8:	ffff7fff 	.word	0xffff7fff
 80044dc:	ffffefff 	.word	0xffffefff
 80044e0:	ffffdfff 	.word	0xffffdfff
 80044e4:	ffefffff 	.word	0xffefffff
 80044e8:	ff9fffff 	.word	0xff9fffff
 80044ec:	fff7ffff 	.word	0xfff7ffff

080044f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	2100      	movs	r1, #0
 80044fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004500:	f7fd fe76 	bl	80021f0 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2208      	movs	r2, #8
 8004510:	4013      	ands	r3, r2
 8004512:	2b08      	cmp	r3, #8
 8004514:	d10c      	bne.n	8004530 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	0391      	lsls	r1, r2, #14
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <UART_CheckIdleState+0x8c>)
 8004520:	9200      	str	r2, [sp, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	f000 f82c 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d001      	beq.n	8004530 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e021      	b.n	8004574 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2204      	movs	r2, #4
 8004538:	4013      	ands	r3, r2
 800453a:	2b04      	cmp	r3, #4
 800453c:	d10c      	bne.n	8004558 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2280      	movs	r2, #128	; 0x80
 8004542:	03d1      	lsls	r1, r2, #15
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4a0d      	ldr	r2, [pc, #52]	; (800457c <UART_CheckIdleState+0x8c>)
 8004548:	9200      	str	r2, [sp, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	f000 f818 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e00d      	b.n	8004574 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2274      	movs	r2, #116	; 0x74
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b004      	add	sp, #16
 800457a:	bd80      	pop	{r7, pc}
 800457c:	01ffffff 	.word	0x01ffffff

08004580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b094      	sub	sp, #80	; 0x50
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	1dfb      	adds	r3, r7, #7
 800458e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004590:	e0a3      	b.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004594:	3301      	adds	r3, #1
 8004596:	d100      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004598:	e09f      	b.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fd fe29 	bl	80021f0 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d13d      	bne.n	800462c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b0:	f3ef 8310 	mrs	r3, PRIMASK
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ba:	2301      	movs	r3, #1
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	f383 8810 	msr	PRIMASK, r3
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	494c      	ldr	r1, [pc, #304]	; (8004704 <UART_WaitOnFlagUntilTimeout+0x184>)
 80045d2:	400a      	ands	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	f383 8810 	msr	PRIMASK, r3
}
 80045e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e2:	f3ef 8310 	mrs	r3, PRIMASK
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
 80045ec:	2301      	movs	r3, #1
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	f383 8810 	msr	PRIMASK, r3
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2101      	movs	r1, #1
 8004604:	438a      	bics	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2274      	movs	r2, #116	; 0x74
 8004624:	2100      	movs	r1, #0
 8004626:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e067      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2204      	movs	r2, #4
 8004634:	4013      	ands	r3, r2
 8004636:	d050      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	401a      	ands	r2, r3
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	429a      	cmp	r2, r3
 800464a:	d146      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2280      	movs	r2, #128	; 0x80
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004656:	f3ef 8310 	mrs	r3, PRIMASK
 800465a:	613b      	str	r3, [r7, #16]
  return(result);
 800465c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4923      	ldr	r1, [pc, #140]	; (8004704 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004678:	400a      	ands	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004688:	f3ef 8310 	mrs	r3, PRIMASK
 800468c:	61fb      	str	r3, [r7, #28]
  return(result);
 800468e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004690:	64bb      	str	r3, [r7, #72]	; 0x48
 8004692:	2301      	movs	r3, #1
 8004694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	438a      	bics	r2, r1
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f383 8810 	msr	PRIMASK, r3
}
 80046b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	2120      	movs	r1, #32
 80046cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2274      	movs	r2, #116	; 0x74
 80046d2:	2100      	movs	r1, #0
 80046d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e010      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	425a      	negs	r2, r3
 80046ea:	4153      	adcs	r3, r2
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	001a      	movs	r2, r3
 80046f0:	1dfb      	adds	r3, r7, #7
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d100      	bne.n	80046fa <UART_WaitOnFlagUntilTimeout+0x17a>
 80046f8:	e74b      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b014      	add	sp, #80	; 0x50
 8004702:	bd80      	pop	{r7, pc}
 8004704:	fffffe5f 	.word	0xfffffe5f

08004708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08e      	sub	sp, #56	; 0x38
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004710:	f3ef 8310 	mrs	r3, PRIMASK
 8004714:	617b      	str	r3, [r7, #20]
  return(result);
 8004716:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f383 8810 	msr	PRIMASK, r3
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4925      	ldr	r1, [pc, #148]	; (80047c8 <UART_EndRxTransfer+0xc0>)
 8004732:	400a      	ands	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004738:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f383 8810 	msr	PRIMASK, r3
}
 8004740:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004742:	f3ef 8310 	mrs	r3, PRIMASK
 8004746:	623b      	str	r3, [r7, #32]
  return(result);
 8004748:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
 800474c:	2301      	movs	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2101      	movs	r1, #1
 8004764:	438a      	bics	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	f383 8810 	msr	PRIMASK, r3
}
 8004772:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004778:	2b01      	cmp	r3, #1
 800477a:	d118      	bne.n	80047ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477c:	f3ef 8310 	mrs	r3, PRIMASK
 8004780:	60bb      	str	r3, [r7, #8]
  return(result);
 8004782:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004786:	2301      	movs	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f383 8810 	msr	PRIMASK, r3
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2110      	movs	r1, #16
 800479e:	438a      	bics	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f383 8810 	msr	PRIMASK, r3
}
 80047ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b00e      	add	sp, #56	; 0x38
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	fffffedf 	.word	0xfffffedf

080047cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	225a      	movs	r2, #90	; 0x5a
 80047de:	2100      	movs	r1, #0
 80047e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2252      	movs	r2, #82	; 0x52
 80047e6:	2100      	movs	r1, #0
 80047e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7ff fbcf 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b004      	add	sp, #16
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004802:	f3ef 8310 	mrs	r3, PRIMASK
 8004806:	60bb      	str	r3, [r7, #8]
  return(result);
 8004808:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	2301      	movs	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f383 8810 	msr	PRIMASK, r3
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2140      	movs	r1, #64	; 0x40
 8004824:	438a      	bics	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f383 8810 	msr	PRIMASK, r3
}
 8004832:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	0018      	movs	r0, r3
 8004844:	f7ff fb9c 	bl	8003f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b006      	add	sp, #24
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	2600      	movs	r6, #0
 8004864:	4d0c      	ldr	r5, [pc, #48]	; (8004898 <__libc_init_array+0x38>)
 8004866:	4c0d      	ldr	r4, [pc, #52]	; (800489c <__libc_init_array+0x3c>)
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	2600      	movs	r6, #0
 8004872:	f000 f821 	bl	80048b8 <_init>
 8004876:	4d0a      	ldr	r5, [pc, #40]	; (80048a0 <__libc_init_array+0x40>)
 8004878:	4c0a      	ldr	r4, [pc, #40]	; (80048a4 <__libc_init_array+0x44>)
 800487a:	1b64      	subs	r4, r4, r5
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	00b3      	lsls	r3, r6, #2
 8004886:	58eb      	ldr	r3, [r5, r3]
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	00b3      	lsls	r3, r6, #2
 8004890:	58eb      	ldr	r3, [r5, r3]
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	08004948 	.word	0x08004948
 800489c:	08004948 	.word	0x08004948
 80048a0:	08004948 	.word	0x08004948
 80048a4:	0800494c 	.word	0x0800494c

080048a8 <memset>:
 80048a8:	0003      	movs	r3, r0
 80048aa:	1882      	adds	r2, r0, r2
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	7019      	strb	r1, [r3, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <_init>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr

080048c4 <_fini>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr
