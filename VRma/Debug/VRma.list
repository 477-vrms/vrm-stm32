
VRma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080014a8  080014a8  000114a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014d8  080014d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080014d8  080014d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014d8  080014d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014d8  080014d8  000114d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014dc  080014dc  000114dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080014e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080014ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080014ec  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003044  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ce1  00000000  00000000  00023078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000310  00000000  00000000  00023d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000298  00000000  00000000  00024070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a44  00000000  00000000  00024308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004064  00000000  00000000  0003dd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009acfd  00000000  00000000  00041db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dcaad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000094c  00000000  00000000  000dcb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001490 	.word	0x08001490

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001490 	.word	0x08001490

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <setup_tim1>:
// setup_tim1()    (Autotest #1)
// Configure Timer 1 and the PWM output pins.
// Parameters: none
//============================================================================
void setup_tim1()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN; //Enable port A
 8000220:	4b32      	ldr	r3, [pc, #200]	; (80002ec <setup_tim1+0xd0>)
 8000222:	695a      	ldr	r2, [r3, #20]
 8000224:	4b31      	ldr	r3, [pc, #196]	; (80002ec <setup_tim1+0xd0>)
 8000226:	2180      	movs	r1, #128	; 0x80
 8000228:	0289      	lsls	r1, r1, #10
 800022a:	430a      	orrs	r2, r1
 800022c:	615a      	str	r2, [r3, #20]
    GPIOA->MODER |= 0xaa0000; //Set pins 8,9,10,11 for alternate function use
 800022e:	2390      	movs	r3, #144	; 0x90
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	21aa      	movs	r1, #170	; 0xaa
 800023a:	0409      	lsls	r1, r1, #16
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[1] |= 0x2222; //Rout timer to external pins
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	4929      	ldr	r1, [pc, #164]	; (80002f0 <setup_tim1+0xd4>)
 800024c:	430a      	orrs	r2, r1
 800024e:	625a      	str	r2, [r3, #36]	; 0x24
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; //Enable TIM1 clock
 8000250:	4b26      	ldr	r3, [pc, #152]	; (80002ec <setup_tim1+0xd0>)
 8000252:	699a      	ldr	r2, [r3, #24]
 8000254:	4b25      	ldr	r3, [pc, #148]	; (80002ec <setup_tim1+0xd0>)
 8000256:	2180      	movs	r1, #128	; 0x80
 8000258:	0109      	lsls	r1, r1, #4
 800025a:	430a      	orrs	r2, r1
 800025c:	619a      	str	r2, [r3, #24]
    TIM1->BDTR |= TIM_BDTR_MOE; //Set BDTR MOE
 800025e:	4b25      	ldr	r3, [pc, #148]	; (80002f4 <setup_tim1+0xd8>)
 8000260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000262:	4b24      	ldr	r3, [pc, #144]	; (80002f4 <setup_tim1+0xd8>)
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	0209      	lsls	r1, r1, #8
 8000268:	430a      	orrs	r2, r1
 800026a:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->PSC = 1-1; //Set PSC
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <setup_tim1+0xd8>)
 800026e:	2200      	movs	r2, #0
 8000270:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->ARR = 2400-1; //Set ARR
 8000272:	4b20      	ldr	r3, [pc, #128]	; (80002f4 <setup_tim1+0xd8>)
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <setup_tim1+0xdc>)
 8000276:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->CCMR1 |= 0x6060; //Set CCMR1 for PWM
 8000278:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <setup_tim1+0xd8>)
 800027a:	699a      	ldr	r2, [r3, #24]
 800027c:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <setup_tim1+0xd8>)
 800027e:	491f      	ldr	r1, [pc, #124]	; (80002fc <setup_tim1+0xe0>)
 8000280:	430a      	orrs	r2, r1
 8000282:	619a      	str	r2, [r3, #24]
    TIM1->CCMR2 |= 0x6060; //Set CCMR2 for PWM
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <setup_tim1+0xd8>)
 8000286:	69da      	ldr	r2, [r3, #28]
 8000288:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <setup_tim1+0xd8>)
 800028a:	491c      	ldr	r1, [pc, #112]	; (80002fc <setup_tim1+0xe0>)
 800028c:	430a      	orrs	r2, r1
 800028e:	61da      	str	r2, [r3, #28]
    TIM1->CCMR2 |= TIM_CCMR2_OC4PE; //Enable preload
 8000290:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <setup_tim1+0xd8>)
 8000292:	69da      	ldr	r2, [r3, #28]
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <setup_tim1+0xd8>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	0109      	lsls	r1, r1, #4
 800029a:	430a      	orrs	r2, r1
 800029c:	61da      	str	r2, [r3, #28]
    TIM1->CCER |= TIM_CCER_CC1E; //Enable output 1
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <setup_tim1+0xd8>)
 80002a0:	6a1a      	ldr	r2, [r3, #32]
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <setup_tim1+0xd8>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	430a      	orrs	r2, r1
 80002a8:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= TIM_CCER_CC2E; //Enable output 2
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <setup_tim1+0xd8>)
 80002ac:	6a1a      	ldr	r2, [r3, #32]
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <setup_tim1+0xd8>)
 80002b0:	2110      	movs	r1, #16
 80002b2:	430a      	orrs	r2, r1
 80002b4:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= TIM_CCER_CC3E; //Enable output 3
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <setup_tim1+0xd8>)
 80002b8:	6a1a      	ldr	r2, [r3, #32]
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <setup_tim1+0xd8>)
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	0049      	lsls	r1, r1, #1
 80002c0:	430a      	orrs	r2, r1
 80002c2:	621a      	str	r2, [r3, #32]
    TIM1->CCER |= TIM_CCER_CC4E; //Enable output 4
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <setup_tim1+0xd8>)
 80002c6:	6a1a      	ldr	r2, [r3, #32]
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <setup_tim1+0xd8>)
 80002ca:	2180      	movs	r1, #128	; 0x80
 80002cc:	0149      	lsls	r1, r1, #5
 80002ce:	430a      	orrs	r2, r1
 80002d0:	621a      	str	r2, [r3, #32]
    TIM1->CCR1 = 500;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <setup_tim1+0xd8>)
 80002d4:	22fa      	movs	r2, #250	; 0xfa
 80002d6:	0052      	lsls	r2, r2, #1
 80002d8:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CR1 |= TIM_CR1_CEN;
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <setup_tim1+0xd8>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <setup_tim1+0xd8>)
 80002e0:	2101      	movs	r1, #1
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]

}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40021000 	.word	0x40021000
 80002f0:	00002222 	.word	0x00002222
 80002f4:	40012c00 	.word	0x40012c00
 80002f8:	0000095f 	.word	0x0000095f
 80002fc:	00006060 	.word	0x00006060

08000300 <send_data>:

void send_data(int data)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    while((USART3->ISR & USART_ISR_TXE) == 0); //Wait for transmit set
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <send_data+0x24>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	4013      	ands	r3, r2
 8000312:	d0fa      	beq.n	800030a <send_data+0xa>
    USART3->TDR = data; //Write data to transmitter
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <send_data+0x24>)
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	b292      	uxth	r2, r2
 800031a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b002      	add	sp, #8
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40004800 	.word	0x40004800

08000328 <setup_uart3>:

void setup_uart3()
{
 8000328:	b5b0      	push	{r4, r5, r7, lr}
 800032a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; //enable GPIOC
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <setup_uart3+0xe4>)
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	4b36      	ldr	r3, [pc, #216]	; (800040c <setup_uart3+0xe4>)
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	0309      	lsls	r1, r1, #12
 8000336:	430a      	orrs	r2, r1
 8000338:	615a      	str	r2, [r3, #20]
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 800033a:	4b34      	ldr	r3, [pc, #208]	; (800040c <setup_uart3+0xe4>)
 800033c:	69da      	ldr	r2, [r3, #28]
 800033e:	4b33      	ldr	r3, [pc, #204]	; (800040c <setup_uart3+0xe4>)
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	02c9      	lsls	r1, r1, #11
 8000344:	430a      	orrs	r2, r1
 8000346:	61da      	str	r2, [r3, #28]

	//Set alternate function for PC10 and PC11 (Tx/Rx)
	GPIOC->MODER |= 0x200000; //Set pins 8,9,10,11 for alternate function use
 8000348:	4b31      	ldr	r3, [pc, #196]	; (8000410 <setup_uart3+0xe8>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b30      	ldr	r3, [pc, #192]	; (8000410 <setup_uart3+0xe8>)
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	0389      	lsls	r1, r1, #14
 8000352:	430a      	orrs	r2, r1
 8000354:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(0x100000); //Set pins 8,9,10,11 for alternate function use
 8000356:	4b2e      	ldr	r3, [pc, #184]	; (8000410 <setup_uart3+0xe8>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <setup_uart3+0xe8>)
 800035c:	492d      	ldr	r1, [pc, #180]	; (8000414 <setup_uart3+0xec>)
 800035e:	400a      	ands	r2, r1
 8000360:	601a      	str	r2, [r3, #0]

	GPIOC->MODER |= 0x800000;
 8000362:	4b2b      	ldr	r3, [pc, #172]	; (8000410 <setup_uart3+0xe8>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <setup_uart3+0xe8>)
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	0409      	lsls	r1, r1, #16
 800036c:	430a      	orrs	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(0x400000);
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <setup_uart3+0xe8>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b26      	ldr	r3, [pc, #152]	; (8000410 <setup_uart3+0xe8>)
 8000376:	4928      	ldr	r1, [pc, #160]	; (8000418 <setup_uart3+0xf0>)
 8000378:	400a      	ands	r2, r1
 800037a:	601a      	str	r2, [r3, #0]

	//Set PC10 and PC11 alternate function to AFR1 (Uart3 Tx/Rx respectively)
	GPIOC->AFR[1] |= 0x1100;
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <setup_uart3+0xe8>)
 800037e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <setup_uart3+0xe8>)
 8000382:	2188      	movs	r1, #136	; 0x88
 8000384:	0149      	lsls	r1, r1, #5
 8000386:	430a      	orrs	r2, r1
 8000388:	625a      	str	r2, [r3, #36]	; 0x24

	//Set baud rate to 9600 by dividing 48MHz clock by 9600
	USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600;
 800038a:	f001 f84b 	bl	8001424 <HAL_RCC_GetHCLKFreq>
 800038e:	0002      	movs	r2, r0
 8000390:	4c22      	ldr	r4, [pc, #136]	; (800041c <setup_uart3+0xf4>)
 8000392:	2396      	movs	r3, #150	; 0x96
 8000394:	0199      	lsls	r1, r3, #6
 8000396:	0010      	movs	r0, r2
 8000398:	f7ff feb4 	bl	8000104 <__udivsi3>
 800039c:	0003      	movs	r3, r0
 800039e:	60e3      	str	r3, [r4, #12]

    USART3->CR1 &= ~USART_CR1_UE; //Disable USART
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <setup_uart3+0xf4>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <setup_uart3+0xf4>)
 80003a6:	2101      	movs	r1, #1
 80003a8:	438a      	bics	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
    USART3->CR1 &= ~USART_CR1_M; //Set word size of 8 bits
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <setup_uart3+0xf4>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <setup_uart3+0xf4>)
 80003b2:	491b      	ldr	r1, [pc, #108]	; (8000420 <setup_uart3+0xf8>)
 80003b4:	400a      	ands	r2, r1
 80003b6:	601a      	str	r2, [r3, #0]
    USART3->CR2 &= ~USART_CR2_STOP; //Set 1 stop bit
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <setup_uart3+0xf4>)
 80003ba:	685a      	ldr	r2, [r3, #4]
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <setup_uart3+0xf4>)
 80003be:	4919      	ldr	r1, [pc, #100]	; (8000424 <setup_uart3+0xfc>)
 80003c0:	400a      	ands	r2, r1
 80003c2:	605a      	str	r2, [r3, #4]
    USART3->CR1 &= ~USART_CR1_PCE; //Disable parity
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <setup_uart3+0xf4>)
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <setup_uart3+0xf4>)
 80003ca:	4917      	ldr	r1, [pc, #92]	; (8000428 <setup_uart3+0x100>)
 80003cc:	400a      	ands	r2, r1
 80003ce:	601a      	str	r2, [r3, #0]
    USART3->CR1 &= ~USART_CR1_OVER8; //Oversample by 16x
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <setup_uart3+0xf4>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <setup_uart3+0xf4>)
 80003d6:	4915      	ldr	r1, [pc, #84]	; (800042c <setup_uart3+0x104>)
 80003d8:	400a      	ands	r2, r1
 80003da:	601a      	str	r2, [r3, #0]

	//Enable Tx and Rx and USART
	USART3->CR1 |= 0xD; //1101
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <setup_uart3+0xf4>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <setup_uart3+0xf4>)
 80003e2:	210d      	movs	r1, #13
 80003e4:	430a      	orrs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]

    while((USART3->ISR & USART_ISR_TEACK) == 0); //Wait for transmit acknowledge
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <setup_uart3+0xf4>)
 80003ec:	69da      	ldr	r2, [r3, #28]
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	039b      	lsls	r3, r3, #14
 80003f2:	4013      	ands	r3, r2
 80003f4:	d0f9      	beq.n	80003ea <setup_uart3+0xc2>
    while((USART3->ISR & USART_ISR_REACK) == 0); //Wait for receive acknowledge
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <setup_uart3+0xf4>)
 80003fa:	69da      	ldr	r2, [r3, #28]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	03db      	lsls	r3, r3, #15
 8000400:	4013      	ands	r3, r2
 8000402:	d0f9      	beq.n	80003f8 <setup_uart3+0xd0>
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	bdb0      	pop	{r4, r5, r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	48000800 	.word	0x48000800
 8000414:	ffefffff 	.word	0xffefffff
 8000418:	ffbfffff 	.word	0xffbfffff
 800041c:	40004800 	.word	0x40004800
 8000420:	efffefff 	.word	0xefffefff
 8000424:	ffffcfff 	.word	0xffffcfff
 8000428:	fffffbff 	.word	0xfffffbff
 800042c:	ffff7fff 	.word	0xffff7fff

08000430 <fillbuffer>:

void fillbuffer(uint8_t buf[10], uint8_t data_len, uint16_t pos, uint16_t t, uint8_t servoID, uint8_t cmd)
{
 8000430:	b5b0      	push	{r4, r5, r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	000c      	movs	r4, r1
 800043a:	0010      	movs	r0, r2
 800043c:	0019      	movs	r1, r3
 800043e:	250b      	movs	r5, #11
 8000440:	197b      	adds	r3, r7, r5
 8000442:	1c22      	adds	r2, r4, #0
 8000444:	701a      	strb	r2, [r3, #0]
 8000446:	2408      	movs	r4, #8
 8000448:	193b      	adds	r3, r7, r4
 800044a:	1c02      	adds	r2, r0, #0
 800044c:	801a      	strh	r2, [r3, #0]
 800044e:	1dbb      	adds	r3, r7, #6
 8000450:	1c0a      	adds	r2, r1, #0
 8000452:	801a      	strh	r2, [r3, #0]
	buf[0] = FRAME_HEADER;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2255      	movs	r2, #85	; 0x55
 8000458:	701a      	strb	r2, [r3, #0]
	buf[1] = FRAME_HEADER;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3301      	adds	r3, #1
 800045e:	2255      	movs	r2, #85	; 0x55
 8000460:	701a      	strb	r2, [r3, #0]
	buf[2] = data_len;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	3302      	adds	r3, #2
 8000466:	197a      	adds	r2, r7, r5
 8000468:	7812      	ldrb	r2, [r2, #0]
 800046a:	701a      	strb	r2, [r3, #0]
	buf[3] = CMD_SERVO_MOVE;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3303      	adds	r3, #3
 8000470:	2203      	movs	r2, #3
 8000472:	701a      	strb	r2, [r3, #0]
	buf[4] = 1;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3304      	adds	r3, #4
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	buf[5] = GET_LOW_BYTE(t);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3305      	adds	r3, #5
 8000480:	1dba      	adds	r2, r7, #6
 8000482:	8812      	ldrh	r2, [r2, #0]
 8000484:	b2d2      	uxtb	r2, r2
 8000486:	701a      	strb	r2, [r3, #0]
	buf[6] = GET_HIGH_BYTE(t);
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	0a1b      	lsrs	r3, r3, #8
 800048e:	b29a      	uxth	r2, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3306      	adds	r3, #6
 8000494:	b2d2      	uxtb	r2, r2
 8000496:	701a      	strb	r2, [r3, #0]
	buf[7] = servoID;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	1dda      	adds	r2, r3, #7
 800049c:	2320      	movs	r3, #32
 800049e:	18fb      	adds	r3, r7, r3
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	7013      	strb	r3, [r2, #0]
	buf[8] = GET_LOW_BYTE(pos);
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3308      	adds	r3, #8
 80004a8:	193a      	adds	r2, r7, r4
 80004aa:	8812      	ldrh	r2, [r2, #0]
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	701a      	strb	r2, [r3, #0]
	buf[9] = GET_HIGH_BYTE(pos);
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	0a1b      	lsrs	r3, r3, #8
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3309      	adds	r3, #9
 80004bc:	b2d2      	uxtb	r2, r2
 80004be:	701a      	strb	r2, [r3, #0]
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bdb0      	pop	{r4, r5, r7, pc}

080004c8 <main>:

int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	; 0x40
 80004cc:	af02      	add	r7, sp, #8
	HAL_Init();
 80004ce:	f000 f9b1 	bl	8000834 <HAL_Init>
	SystemClock_Config();
 80004d2:	f000 f8ff 	bl	80006d4 <SystemClock_Config>
	setup_tim1();
 80004d6:	f7ff fea1 	bl	800021c <setup_tim1>
	setup_uart3();
 80004da:	f7ff ff25 	bl	8000328 <setup_uart3>
	uint8_t buf[10];

	uint16_t pos3 = 1500; // 500 - 2000
 80004de:	2336      	movs	r3, #54	; 0x36
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	4a79      	ldr	r2, [pc, #484]	; (80006c8 <main+0x200>)
 80004e4:	801a      	strh	r2, [r3, #0]
	uint16_t claw_pos = 1500; // 1500 - 2500
 80004e6:	2334      	movs	r3, #52	; 0x34
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	4a77      	ldr	r2, [pc, #476]	; (80006c8 <main+0x200>)
 80004ec:	801a      	strh	r2, [r3, #0]
	uint16_t pos245 = 1500; // 500 - 2500
 80004ee:	2332      	movs	r3, #50	; 0x32
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	4a75      	ldr	r2, [pc, #468]	; (80006c8 <main+0x200>)
 80004f4:	801a      	strh	r2, [r3, #0]

	int off3 = 5;
 80004f6:	2305      	movs	r3, #5
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int offClaw = 5;
 80004fa:	2305      	movs	r3, #5
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
	int off245 = 5;
 80004fe:	2305      	movs	r3, #5
 8000500:	627b      	str	r3, [r7, #36]	; 0x24

	while (1)
	{
		if(pos3 > 2000)
 8000502:	2336      	movs	r3, #54	; 0x36
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	881a      	ldrh	r2, [r3, #0]
 8000508:	23fa      	movs	r3, #250	; 0xfa
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	429a      	cmp	r2, r3
 800050e:	d903      	bls.n	8000518 <main+0x50>
			off3 = -5;
 8000510:	2305      	movs	r3, #5
 8000512:	425b      	negs	r3, r3
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000516:	e008      	b.n	800052a <main+0x62>
		else if(pos3 < 500)
 8000518:	2336      	movs	r3, #54	; 0x36
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	881a      	ldrh	r2, [r3, #0]
 800051e:	23fa      	movs	r3, #250	; 0xfa
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	429a      	cmp	r2, r3
 8000524:	d201      	bcs.n	800052a <main+0x62>
			off3 = 5;
 8000526:	2305      	movs	r3, #5
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(claw_pos > 2000)
 800052a:	2334      	movs	r3, #52	; 0x34
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	23fa      	movs	r3, #250	; 0xfa
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	429a      	cmp	r2, r3
 8000536:	d903      	bls.n	8000540 <main+0x78>
			offClaw = -2;
 8000538:	2302      	movs	r3, #2
 800053a:	425b      	negs	r3, r3
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
 800053e:	e007      	b.n	8000550 <main+0x88>
		else if(claw_pos < 1500)
 8000540:	2334      	movs	r3, #52	; 0x34
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	4a61      	ldr	r2, [pc, #388]	; (80006cc <main+0x204>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d801      	bhi.n	8000550 <main+0x88>
			offClaw = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28

		if(pos245 > 2500)
 8000550:	2332      	movs	r3, #50	; 0x32
 8000552:	18fb      	adds	r3, r7, r3
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	4a5e      	ldr	r2, [pc, #376]	; (80006d0 <main+0x208>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d903      	bls.n	8000564 <main+0x9c>
			off245 = - 5;
 800055c:	2305      	movs	r3, #5
 800055e:	425b      	negs	r3, r3
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
 8000562:	e008      	b.n	8000576 <main+0xae>
		else if(pos245 < 500)
 8000564:	2332      	movs	r3, #50	; 0x32
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	881a      	ldrh	r2, [r3, #0]
 800056a:	23fa      	movs	r3, #250	; 0xfa
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	429a      	cmp	r2, r3
 8000570:	d201      	bcs.n	8000576 <main+0xae>
			off245 = 5;
 8000572:	2305      	movs	r3, #5
 8000574:	627b      	str	r3, [r7, #36]	; 0x24

		pos3 = pos3 + off3;
 8000576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000578:	b299      	uxth	r1, r3
 800057a:	2236      	movs	r2, #54	; 0x36
 800057c:	18bb      	adds	r3, r7, r2
 800057e:	18ba      	adds	r2, r7, r2
 8000580:	8812      	ldrh	r2, [r2, #0]
 8000582:	188a      	adds	r2, r1, r2
 8000584:	801a      	strh	r2, [r3, #0]
		pos245 = pos245 + off245;
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	b299      	uxth	r1, r3
 800058a:	2232      	movs	r2, #50	; 0x32
 800058c:	18bb      	adds	r3, r7, r2
 800058e:	18ba      	adds	r2, r7, r2
 8000590:	8812      	ldrh	r2, [r2, #0]
 8000592:	188a      	adds	r2, r1, r2
 8000594:	801a      	strh	r2, [r3, #0]
		claw_pos = claw_pos + offClaw;
 8000596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000598:	b299      	uxth	r1, r3
 800059a:	2034      	movs	r0, #52	; 0x34
 800059c:	183b      	adds	r3, r7, r0
 800059e:	183a      	adds	r2, r7, r0
 80005a0:	8812      	ldrh	r2, [r2, #0]
 80005a2:	188a      	adds	r2, r1, r2
 80005a4:	801a      	strh	r2, [r3, #0]

		//Claw
		fillbuffer(buf, 8, claw_pos, 1000, 6, 1);
 80005a6:	23fa      	movs	r3, #250	; 0xfa
 80005a8:	0099      	lsls	r1, r3, #2
 80005aa:	183b      	adds	r3, r7, r0
 80005ac:	881a      	ldrh	r2, [r3, #0]
 80005ae:	1d38      	adds	r0, r7, #4
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2306      	movs	r3, #6
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	000b      	movs	r3, r1
 80005ba:	2108      	movs	r1, #8
 80005bc:	f7ff ff38 	bl	8000430 <fillbuffer>
		for(const uint8_t *c = buf; *c; c++)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	623b      	str	r3, [r7, #32]
 80005c4:	e007      	b.n	80005d6 <main+0x10e>
			send_data(*c);
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff fe98 	bl	8000300 <send_data>
		for(const uint8_t *c = buf; *c; c++)
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	3301      	adds	r3, #1
 80005d4:	623b      	str	r3, [r7, #32]
 80005d6:	6a3b      	ldr	r3, [r7, #32]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f3      	bne.n	80005c6 <main+0xfe>
		//Rotate Claw
		fillbuffer(buf, 8, pos245, 1000, 2, 1);
 80005de:	23fa      	movs	r3, #250	; 0xfa
 80005e0:	0099      	lsls	r1, r3, #2
 80005e2:	2332      	movs	r3, #50	; 0x32
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	1d38      	adds	r0, r7, #4
 80005ea:	2301      	movs	r3, #1
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	000b      	movs	r3, r1
 80005f4:	2108      	movs	r1, #8
 80005f6:	f7ff ff1b 	bl	8000430 <fillbuffer>
		for(const uint8_t *c = buf; *c; c++)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	61fb      	str	r3, [r7, #28]
 80005fe:	e007      	b.n	8000610 <main+0x148>
			send_data(*c);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff fe7b 	bl	8000300 <send_data>
		for(const uint8_t *c = buf; *c; c++)
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3301      	adds	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f3      	bne.n	8000600 <main+0x138>
		//Top
		fillbuffer(buf, 8, pos3, 1000, 3, 1);
 8000618:	23fa      	movs	r3, #250	; 0xfa
 800061a:	0099      	lsls	r1, r3, #2
 800061c:	2336      	movs	r3, #54	; 0x36
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	1d38      	adds	r0, r7, #4
 8000624:	2301      	movs	r3, #1
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	2303      	movs	r3, #3
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	000b      	movs	r3, r1
 800062e:	2108      	movs	r1, #8
 8000630:	f7ff fefe 	bl	8000430 <fillbuffer>
		for(const uint8_t *c = buf; *c; c++)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	61bb      	str	r3, [r7, #24]
 8000638:	e007      	b.n	800064a <main+0x182>
			send_data(*c);
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff fe5e 	bl	8000300 <send_data>
		for(const uint8_t *c = buf; *c; c++)
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	3301      	adds	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f3      	bne.n	800063a <main+0x172>
		//Middle
		fillbuffer(buf, 8, pos245, 1000, 4, 1);
 8000652:	23fa      	movs	r3, #250	; 0xfa
 8000654:	0099      	lsls	r1, r3, #2
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	1d38      	adds	r0, r7, #4
 800065e:	2301      	movs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2304      	movs	r3, #4
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	000b      	movs	r3, r1
 8000668:	2108      	movs	r1, #8
 800066a:	f7ff fee1 	bl	8000430 <fillbuffer>
		for(const uint8_t *c = buf; *c; c++)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e007      	b.n	8000684 <main+0x1bc>
			send_data(*c);
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff fe41 	bl	8000300 <send_data>
		for(const uint8_t *c = buf; *c; c++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f3      	bne.n	8000674 <main+0x1ac>
		//Bottom
		fillbuffer(buf, 8, pos245, 1000, 5, 1);
 800068c:	23fa      	movs	r3, #250	; 0xfa
 800068e:	0099      	lsls	r1, r3, #2
 8000690:	2332      	movs	r3, #50	; 0x32
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	881a      	ldrh	r2, [r3, #0]
 8000696:	1d38      	adds	r0, r7, #4
 8000698:	2301      	movs	r3, #1
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2305      	movs	r3, #5
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	000b      	movs	r3, r1
 80006a2:	2108      	movs	r1, #8
 80006a4:	f7ff fec4 	bl	8000430 <fillbuffer>
		for(const uint8_t *c = buf; *c; c++)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	e007      	b.n	80006be <main+0x1f6>
			send_data(*c);
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff fe24 	bl	8000300 <send_data>
		for(const uint8_t *c = buf; *c; c++)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3301      	adds	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1f3      	bne.n	80006ae <main+0x1e6>
		if(pos3 > 2000)
 80006c6:	e71c      	b.n	8000502 <main+0x3a>
 80006c8:	000005dc 	.word	0x000005dc
 80006cc:	000005db 	.word	0x000005db
 80006d0:	000009c4 	.word	0x000009c4

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b093      	sub	sp, #76	; 0x4c
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	2414      	movs	r4, #20
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0018      	movs	r0, r3
 80006e0:	2334      	movs	r3, #52	; 0x34
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f000 fecb 	bl	8001480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	0018      	movs	r0, r3
 80006ee:	2310      	movs	r3, #16
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f000 fec4 	bl	8001480 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	0021      	movs	r1, r4
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2202      	movs	r2, #2
 80006fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2201      	movs	r2, #1
 8000704:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2210      	movs	r2, #16
 800070a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	187b      	adds	r3, r7, r1
 8000714:	0018      	movs	r0, r3
 8000716:	f000 f9a5 	bl	8000a64 <HAL_RCC_OscConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800071e:	f000 f819 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2100      	movs	r1, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fd16 	bl	8001170 <HAL_RCC_ClockConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000748:	f000 f804 	bl	8000754 <Error_Handler>
  }
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b013      	add	sp, #76	; 0x4c
 8000752:	bd90      	pop	{r4, r7, pc}

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0549      	lsls	r1, r1, #21
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_MspInit+0x44>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	055b      	lsls	r3, r3, #21
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f87a 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0b      	ldr	r4, [pc, #44]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800080a:	f7ff ffe4 	bl	80007d6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800080e:	f000 fe13 	bl	8001438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fe59 	bl	80004c8 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000824:	080014e0 	.word	0x080014e0
  ldr r2, =_sbss
 8000828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800082c:	2000002c 	.word	0x2000002c

08000830 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_COMP_IRQHandler>
	...

08000834 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_Init+0x24>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_Init+0x24>)
 800083e:	2110      	movs	r1, #16
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f809 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084a:	f7ff ff89 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_InitTick+0x5c>)
 8000866:	681c      	ldr	r4, [r3, #0]
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_InitTick+0x60>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	0019      	movs	r1, r3
 800086e:	23fa      	movs	r3, #250	; 0xfa
 8000870:	0098      	lsls	r0, r3, #2
 8000872:	f7ff fc47 	bl	8000104 <__udivsi3>
 8000876:	0003      	movs	r3, r0
 8000878:	0019      	movs	r1, r3
 800087a:	0020      	movs	r0, r4
 800087c:	f7ff fc42 	bl	8000104 <__udivsi3>
 8000880:	0003      	movs	r3, r0
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f8e1 	bl	8000a4a <HAL_SYSTICK_Config>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e00f      	b.n	80008b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d80b      	bhi.n	80008ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f8be 	bl	8000a20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_InitTick+0x64>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b003      	add	sp, #12
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	001a      	movs	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	18d2      	adds	r2, r2, r3
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000028 	.word	0x20000028

080008e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000028 	.word	0x20000028

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	0002      	movs	r2, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b7f      	cmp	r3, #127	; 0x7f
 8000910:	d828      	bhi.n	8000964 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000912:	4a2f      	ldr	r2, [pc, #188]	; (80009d0 <__NVIC_SetPriority+0xd4>)
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	33c0      	adds	r3, #192	; 0xc0
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	589b      	ldr	r3, [r3, r2]
 8000922:	1dfa      	adds	r2, r7, #7
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	0011      	movs	r1, r2
 8000928:	2203      	movs	r2, #3
 800092a:	400a      	ands	r2, r1
 800092c:	00d2      	lsls	r2, r2, #3
 800092e:	21ff      	movs	r1, #255	; 0xff
 8000930:	4091      	lsls	r1, r2
 8000932:	000a      	movs	r2, r1
 8000934:	43d2      	mvns	r2, r2
 8000936:	401a      	ands	r2, r3
 8000938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	401a      	ands	r2, r3
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	0018      	movs	r0, r3
 8000948:	2303      	movs	r3, #3
 800094a:	4003      	ands	r3, r0
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000950:	481f      	ldr	r0, [pc, #124]	; (80009d0 <__NVIC_SetPriority+0xd4>)
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	089b      	lsrs	r3, r3, #2
 800095a:	430a      	orrs	r2, r1
 800095c:	33c0      	adds	r3, #192	; 0xc0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000962:	e031      	b.n	80009c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <__NVIC_SetPriority+0xd8>)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0019      	movs	r1, r3
 800096c:	230f      	movs	r3, #15
 800096e:	400b      	ands	r3, r1
 8000970:	3b08      	subs	r3, #8
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	3306      	adds	r3, #6
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	3304      	adds	r3, #4
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1dfa      	adds	r2, r7, #7
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	0011      	movs	r1, r2
 8000984:	2203      	movs	r2, #3
 8000986:	400a      	ands	r2, r1
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	43d2      	mvns	r2, r2
 8000992:	401a      	ands	r2, r3
 8000994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	401a      	ands	r2, r3
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0018      	movs	r0, r3
 80009a4:	2303      	movs	r3, #3
 80009a6:	4003      	ands	r3, r0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <__NVIC_SetPriority+0xd8>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	001c      	movs	r4, r3
 80009b4:	230f      	movs	r3, #15
 80009b6:	4023      	ands	r3, r4
 80009b8:	3b08      	subs	r3, #8
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	430a      	orrs	r2, r1
 80009be:	3306      	adds	r3, #6
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	18c3      	adds	r3, r0, r3
 80009c4:	3304      	adds	r3, #4
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b003      	add	sp, #12
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	045b      	lsls	r3, r3, #17
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d301      	bcc.n	80009f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ec:	2301      	movs	r3, #1
 80009ee:	e010      	b.n	8000a12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <SysTick_Config+0x44>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	3a01      	subs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f8:	2301      	movs	r3, #1
 80009fa:	425b      	negs	r3, r3
 80009fc:	2103      	movs	r1, #3
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff ff7c 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x44>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x44>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	0018      	movs	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	1c02      	adds	r2, r0, #0
 8000a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <__NVIC_SetPriority>
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff ffbf 	bl	80009d8 <SysTick_Config>
 8000a5a:	0003      	movs	r3, r0
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	f000 fb76 	bl	8001164 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d100      	bne.n	8000a84 <HAL_RCC_OscConfig+0x20>
 8000a82:	e08e      	b.n	8000ba2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a84:	4bc5      	ldr	r3, [pc, #788]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	220c      	movs	r2, #12
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d00e      	beq.n	8000aae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a90:	4bc2      	ldr	r3, [pc, #776]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	220c      	movs	r2, #12
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d117      	bne.n	8000acc <HAL_RCC_OscConfig+0x68>
 8000a9c:	4bbf      	ldr	r3, [pc, #764]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	23c0      	movs	r3, #192	; 0xc0
 8000aa2:	025b      	lsls	r3, r3, #9
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d10e      	bne.n	8000acc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aae:	4bbb      	ldr	r3, [pc, #748]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	029b      	lsls	r3, r3, #10
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	d100      	bne.n	8000abc <HAL_RCC_OscConfig+0x58>
 8000aba:	e071      	b.n	8000ba0 <HAL_RCC_OscConfig+0x13c>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d000      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x62>
 8000ac4:	e06c      	b.n	8000ba0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	f000 fb4c 	bl	8001164 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d107      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x80>
 8000ad4:	4bb1      	ldr	r3, [pc, #708]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4bb0      	ldr	r3, [pc, #704]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	0249      	lsls	r1, r1, #9
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e02f      	b.n	8000b44 <HAL_RCC_OscConfig+0xe0>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10c      	bne.n	8000b06 <HAL_RCC_OscConfig+0xa2>
 8000aec:	4bab      	ldr	r3, [pc, #684]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4baa      	ldr	r3, [pc, #680]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000af2:	49ab      	ldr	r1, [pc, #684]	; (8000da0 <HAL_RCC_OscConfig+0x33c>)
 8000af4:	400a      	ands	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	4ba8      	ldr	r3, [pc, #672]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4ba7      	ldr	r3, [pc, #668]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000afe:	49a9      	ldr	r1, [pc, #676]	; (8000da4 <HAL_RCC_OscConfig+0x340>)
 8000b00:	400a      	ands	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e01e      	b.n	8000b44 <HAL_RCC_OscConfig+0xe0>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d10e      	bne.n	8000b2c <HAL_RCC_OscConfig+0xc8>
 8000b0e:	4ba3      	ldr	r3, [pc, #652]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4ba2      	ldr	r3, [pc, #648]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	02c9      	lsls	r1, r1, #11
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	4b9f      	ldr	r3, [pc, #636]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b9e      	ldr	r3, [pc, #632]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0249      	lsls	r1, r1, #9
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e00b      	b.n	8000b44 <HAL_RCC_OscConfig+0xe0>
 8000b2c:	4b9b      	ldr	r3, [pc, #620]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b9a      	ldr	r3, [pc, #616]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b32:	499b      	ldr	r1, [pc, #620]	; (8000da0 <HAL_RCC_OscConfig+0x33c>)
 8000b34:	400a      	ands	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	4b98      	ldr	r3, [pc, #608]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b97      	ldr	r3, [pc, #604]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b3e:	4999      	ldr	r1, [pc, #612]	; (8000da4 <HAL_RCC_OscConfig+0x340>)
 8000b40:	400a      	ands	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d014      	beq.n	8000b76 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b4c:	f7ff fecc 	bl	80008e8 <HAL_GetTick>
 8000b50:	0003      	movs	r3, r0
 8000b52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b54:	e008      	b.n	8000b68 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b56:	f7ff fec7 	bl	80008e8 <HAL_GetTick>
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b64      	cmp	r3, #100	; 0x64
 8000b62:	d901      	bls.n	8000b68 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e2fd      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b68:	4b8c      	ldr	r3, [pc, #560]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	029b      	lsls	r3, r3, #10
 8000b70:	4013      	ands	r3, r2
 8000b72:	d0f0      	beq.n	8000b56 <HAL_RCC_OscConfig+0xf2>
 8000b74:	e015      	b.n	8000ba2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b76:	f7ff feb7 	bl	80008e8 <HAL_GetTick>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b7e:	e008      	b.n	8000b92 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b80:	f7ff feb2 	bl	80008e8 <HAL_GetTick>
 8000b84:	0002      	movs	r2, r0
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b64      	cmp	r3, #100	; 0x64
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e2e8      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b92:	4b82      	ldr	r3, [pc, #520]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	029b      	lsls	r3, r3, #10
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d1f0      	bne.n	8000b80 <HAL_RCC_OscConfig+0x11c>
 8000b9e:	e000      	b.n	8000ba2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d100      	bne.n	8000bae <HAL_RCC_OscConfig+0x14a>
 8000bac:	e06c      	b.n	8000c88 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bae:	4b7b      	ldr	r3, [pc, #492]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d00e      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bb8:	4b78      	ldr	r3, [pc, #480]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d11f      	bne.n	8000c04 <HAL_RCC_OscConfig+0x1a0>
 8000bc4:	4b75      	ldr	r3, [pc, #468]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	23c0      	movs	r3, #192	; 0xc0
 8000bca:	025b      	lsls	r3, r3, #9
 8000bcc:	401a      	ands	r2, r3
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d116      	bne.n	8000c04 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd6:	4b71      	ldr	r3, [pc, #452]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d005      	beq.n	8000bec <HAL_RCC_OscConfig+0x188>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d001      	beq.n	8000bec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e2bb      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bec:	4b6b      	ldr	r3, [pc, #428]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	22f8      	movs	r2, #248	; 0xf8
 8000bf2:	4393      	bics	r3, r2
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	00da      	lsls	r2, r3, #3
 8000bfc:	4b67      	ldr	r3, [pc, #412]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c02:	e041      	b.n	8000c88 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d024      	beq.n	8000c56 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c0c:	4b63      	ldr	r3, [pc, #396]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fe66 	bl	80008e8 <HAL_GetTick>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c22:	f7ff fe61 	bl	80008e8 <HAL_GetTick>
 8000c26:	0002      	movs	r2, r0
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e297      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2202      	movs	r2, #2
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d0f1      	beq.n	8000c22 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	22f8      	movs	r2, #248	; 0xf8
 8000c44:	4393      	bics	r3, r2
 8000c46:	0019      	movs	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	00da      	lsls	r2, r3, #3
 8000c4e:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c50:	430a      	orrs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	e018      	b.n	8000c88 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	438a      	bics	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c62:	f7ff fe41 	bl	80008e8 <HAL_GetTick>
 8000c66:	0003      	movs	r3, r0
 8000c68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fe3c 	bl	80008e8 <HAL_GetTick>
 8000c70:	0002      	movs	r2, r0
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e272      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2202      	movs	r2, #2
 8000c84:	4013      	ands	r3, r2
 8000c86:	d1f1      	bne.n	8000c6c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d036      	beq.n	8000d00 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d019      	beq.n	8000cce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c9a:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fe1f 	bl	80008e8 <HAL_GetTick>
 8000caa:	0003      	movs	r3, r0
 8000cac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fe1a 	bl	80008e8 <HAL_GetTick>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e250      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d0f1      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x24c>
 8000ccc:	e018      	b.n	8000d00 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cda:	f7ff fe05 	bl	80008e8 <HAL_GetTick>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fe00 	bl	80008e8 <HAL_GetTick>
 8000ce8:	0002      	movs	r2, r0
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e236      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d1f1      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2204      	movs	r2, #4
 8000d06:	4013      	ands	r3, r2
 8000d08:	d100      	bne.n	8000d0c <HAL_RCC_OscConfig+0x2a8>
 8000d0a:	e0b5      	b.n	8000e78 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d0c:	201f      	movs	r0, #31
 8000d0e:	183b      	adds	r3, r7, r0
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000d16:	69da      	ldr	r2, [r3, #28]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	055b      	lsls	r3, r3, #21
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d110      	bne.n	8000d42 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000d22:	69da      	ldr	r2, [r3, #28]
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0549      	lsls	r1, r1, #21
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	61da      	str	r2, [r3, #28]
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000d30:	69da      	ldr	r2, [r3, #28]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	055b      	lsls	r3, r3, #21
 8000d36:	4013      	ands	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_RCC_OscConfig+0x344>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d11a      	bne.n	8000d84 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_RCC_OscConfig+0x344>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_RCC_OscConfig+0x344>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0049      	lsls	r1, r1, #1
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fdc4 	bl	80008e8 <HAL_GetTick>
 8000d60:	0003      	movs	r3, r0
 8000d62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d66:	f7ff fdbf 	bl	80008e8 <HAL_GetTick>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b64      	cmp	r3, #100	; 0x64
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e1f5      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_RCC_OscConfig+0x344>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	d0f0      	beq.n	8000d66 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10f      	bne.n	8000dac <HAL_RCC_OscConfig+0x348>
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000d8e:	6a1a      	ldr	r2, [r3, #32]
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <HAL_RCC_OscConfig+0x338>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	430a      	orrs	r2, r1
 8000d96:	621a      	str	r2, [r3, #32]
 8000d98:	e036      	b.n	8000e08 <HAL_RCC_OscConfig+0x3a4>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	fffeffff 	.word	0xfffeffff
 8000da4:	fffbffff 	.word	0xfffbffff
 8000da8:	40007000 	.word	0x40007000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10c      	bne.n	8000dce <HAL_RCC_OscConfig+0x36a>
 8000db4:	4bca      	ldr	r3, [pc, #808]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000db6:	6a1a      	ldr	r2, [r3, #32]
 8000db8:	4bc9      	ldr	r3, [pc, #804]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	438a      	bics	r2, r1
 8000dbe:	621a      	str	r2, [r3, #32]
 8000dc0:	4bc7      	ldr	r3, [pc, #796]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000dc2:	6a1a      	ldr	r2, [r3, #32]
 8000dc4:	4bc6      	ldr	r3, [pc, #792]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	438a      	bics	r2, r1
 8000dca:	621a      	str	r2, [r3, #32]
 8000dcc:	e01c      	b.n	8000e08 <HAL_RCC_OscConfig+0x3a4>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x38c>
 8000dd6:	4bc2      	ldr	r3, [pc, #776]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000dd8:	6a1a      	ldr	r2, [r3, #32]
 8000dda:	4bc1      	ldr	r3, [pc, #772]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000ddc:	2104      	movs	r1, #4
 8000dde:	430a      	orrs	r2, r1
 8000de0:	621a      	str	r2, [r3, #32]
 8000de2:	4bbf      	ldr	r3, [pc, #764]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000de4:	6a1a      	ldr	r2, [r3, #32]
 8000de6:	4bbe      	ldr	r3, [pc, #760]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	621a      	str	r2, [r3, #32]
 8000dee:	e00b      	b.n	8000e08 <HAL_RCC_OscConfig+0x3a4>
 8000df0:	4bbb      	ldr	r3, [pc, #748]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	4bba      	ldr	r3, [pc, #744]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	438a      	bics	r2, r1
 8000dfa:	621a      	str	r2, [r3, #32]
 8000dfc:	4bb8      	ldr	r3, [pc, #736]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000dfe:	6a1a      	ldr	r2, [r3, #32]
 8000e00:	4bb7      	ldr	r3, [pc, #732]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e02:	2104      	movs	r1, #4
 8000e04:	438a      	bics	r2, r1
 8000e06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d014      	beq.n	8000e3a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e10:	f7ff fd6a 	bl	80008e8 <HAL_GetTick>
 8000e14:	0003      	movs	r3, r0
 8000e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e18:	e009      	b.n	8000e2e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fd65 	bl	80008e8 <HAL_GetTick>
 8000e1e:	0002      	movs	r2, r0
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	4aaf      	ldr	r2, [pc, #700]	; (80010e4 <HAL_RCC_OscConfig+0x680>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e19a      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e2e:	4bac      	ldr	r3, [pc, #688]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	d0f0      	beq.n	8000e1a <HAL_RCC_OscConfig+0x3b6>
 8000e38:	e013      	b.n	8000e62 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fd55 	bl	80008e8 <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e42:	e009      	b.n	8000e58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e44:	f7ff fd50 	bl	80008e8 <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	4aa5      	ldr	r2, [pc, #660]	; (80010e4 <HAL_RCC_OscConfig+0x680>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e185      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e58:	4ba1      	ldr	r3, [pc, #644]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e62:	231f      	movs	r3, #31
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d105      	bne.n	8000e78 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6c:	4b9c      	ldr	r3, [pc, #624]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e6e:	69da      	ldr	r2, [r3, #28]
 8000e70:	4b9b      	ldr	r3, [pc, #620]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e72:	499d      	ldr	r1, [pc, #628]	; (80010e8 <HAL_RCC_OscConfig+0x684>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d063      	beq.n	8000f4a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d12a      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e8a:	4b95      	ldr	r3, [pc, #596]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8e:	4b94      	ldr	r3, [pc, #592]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e90:	2104      	movs	r1, #4
 8000e92:	430a      	orrs	r2, r1
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e96:	4b92      	ldr	r3, [pc, #584]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9a:	4b91      	ldr	r3, [pc, #580]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fd21 	bl	80008e8 <HAL_GetTick>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000eac:	f7ff fd1c 	bl	80008e8 <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e152      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ebe:	4b88      	ldr	r3, [pc, #544]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d0f1      	beq.n	8000eac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ec8:	4b85      	ldr	r3, [pc, #532]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ecc:	22f8      	movs	r2, #248	; 0xf8
 8000ece:	4393      	bics	r3, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	00da      	lsls	r2, r3, #3
 8000ed8:	4b81      	ldr	r3, [pc, #516]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000eda:	430a      	orrs	r2, r1
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ede:	e034      	b.n	8000f4a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	3305      	adds	r3, #5
 8000ee6:	d111      	bne.n	8000f0c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ee8:	4b7d      	ldr	r3, [pc, #500]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eec:	4b7c      	ldr	r3, [pc, #496]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000eee:	2104      	movs	r1, #4
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ef4:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef8:	22f8      	movs	r2, #248	; 0xf8
 8000efa:	4393      	bics	r3, r2
 8000efc:	0019      	movs	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	00da      	lsls	r2, r3, #3
 8000f04:	4b76      	ldr	r3, [pc, #472]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
 8000f0a:	e01e      	b.n	8000f4a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f0c:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f10:	4b73      	ldr	r3, [pc, #460]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f12:	2104      	movs	r1, #4
 8000f14:	430a      	orrs	r2, r1
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f18:	4b71      	ldr	r3, [pc, #452]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1c:	4b70      	ldr	r3, [pc, #448]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	438a      	bics	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fce0 	bl	80008e8 <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f2e:	f7ff fcdb 	bl	80008e8 <HAL_GetTick>
 8000f32:	0002      	movs	r2, r0
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e111      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f40:	4b67      	ldr	r3, [pc, #412]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f44:	2202      	movs	r2, #2
 8000f46:	4013      	ands	r3, r2
 8000f48:	d1f1      	bne.n	8000f2e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2220      	movs	r2, #32
 8000f50:	4013      	ands	r3, r2
 8000f52:	d05c      	beq.n	800100e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f54:	4b62      	ldr	r3, [pc, #392]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	220c      	movs	r2, #12
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	d00e      	beq.n	8000f7e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f60:	4b5f      	ldr	r3, [pc, #380]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	220c      	movs	r2, #12
 8000f66:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d114      	bne.n	8000f96 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f6c:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	401a      	ands	r2, r3
 8000f76:	23c0      	movs	r3, #192	; 0xc0
 8000f78:	025b      	lsls	r3, r3, #9
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d10b      	bne.n	8000f96 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f7e:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	4013      	ands	r3, r2
 8000f88:	d040      	beq.n	800100c <HAL_RCC_OscConfig+0x5a8>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d03c      	beq.n	800100c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0e6      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01b      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa2:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0249      	lsls	r1, r1, #9
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc9c 	bl	80008e8 <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fb6:	f7ff fc97 	bl	80008e8 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e0cd      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	025b      	lsls	r3, r3, #9
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x552>
 8000fd4:	e01b      	b.n	800100e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8000fdc:	4943      	ldr	r1, [pc, #268]	; (80010ec <HAL_RCC_OscConfig+0x688>)
 8000fde:	400a      	ands	r2, r1
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fc81 	bl	80008e8 <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fec:	f7ff fc7c 	bl	80008e8 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e0b2      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	4013      	ands	r3, r2
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x588>
 800100a:	e000      	b.n	800100e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800100c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <HAL_RCC_OscConfig+0x5b4>
 8001016:	e0a4      	b.n	8001162 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	220c      	movs	r2, #12
 800101e:	4013      	ands	r3, r2
 8001020:	2b08      	cmp	r3, #8
 8001022:	d100      	bne.n	8001026 <HAL_RCC_OscConfig+0x5c2>
 8001024:	e078      	b.n	8001118 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	2b02      	cmp	r3, #2
 800102c:	d14c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001034:	492e      	ldr	r1, [pc, #184]	; (80010f0 <HAL_RCC_OscConfig+0x68c>)
 8001036:	400a      	ands	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fc55 	bl	80008e8 <HAL_GetTick>
 800103e:	0003      	movs	r3, r0
 8001040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff fc50 	bl	80008e8 <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e086      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	049b      	lsls	r3, r3, #18
 800105e:	4013      	ands	r3, r2
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	220f      	movs	r2, #15
 8001068:	4393      	bics	r3, r2
 800106a:	0019      	movs	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001072:	430a      	orrs	r2, r1
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <HAL_RCC_OscConfig+0x690>)
 800107c:	4013      	ands	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	431a      	orrs	r2, r3
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 800108c:	430a      	orrs	r2, r1
 800108e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	0449      	lsls	r1, r1, #17
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fc23 	bl	80008e8 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff fc1e 	bl	80008e8 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e054      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	049b      	lsls	r3, r3, #18
 80010c2:	4013      	ands	r3, r2
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x644>
 80010c6:	e04c      	b.n	8001162 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_RCC_OscConfig+0x67c>)
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <HAL_RCC_OscConfig+0x68c>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc08 	bl	80008e8 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e015      	b.n	800110a <HAL_RCC_OscConfig+0x6a6>
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40021000 	.word	0x40021000
 80010e4:	00001388 	.word	0x00001388
 80010e8:	efffffff 	.word	0xefffffff
 80010ec:	fffeffff 	.word	0xfffeffff
 80010f0:	feffffff 	.word	0xfeffffff
 80010f4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f8:	f7ff fbf6 	bl	80008e8 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e02c      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_RCC_OscConfig+0x708>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	049b      	lsls	r3, r3, #18
 8001112:	4013      	ands	r3, r2
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x694>
 8001116:	e024      	b.n	8001162 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e01f      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_RCC_OscConfig+0x708>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_RCC_OscConfig+0x708>)
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	23c0      	movs	r3, #192	; 0xc0
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	429a      	cmp	r2, r3
 800113e:	d10e      	bne.n	800115e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	220f      	movs	r2, #15
 8001144:	401a      	ands	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800114a:	429a      	cmp	r2, r3
 800114c:	d107      	bne.n	800115e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	23f0      	movs	r3, #240	; 0xf0
 8001152:	039b      	lsls	r3, r3, #14
 8001154:	401a      	ands	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b008      	add	sp, #32
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e0bf      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001184:	4b61      	ldr	r3, [pc, #388]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2201      	movs	r2, #1
 800118a:	4013      	ands	r3, r2
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d911      	bls.n	80011b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	4b5e      	ldr	r3, [pc, #376]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2201      	movs	r2, #1
 8001198:	4393      	bics	r3, r2
 800119a:	0019      	movs	r1, r3
 800119c:	4b5b      	ldr	r3, [pc, #364]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a4:	4b59      	ldr	r3, [pc, #356]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0a6      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d015      	beq.n	80011ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2204      	movs	r2, #4
 80011c6:	4013      	ands	r3, r2
 80011c8:	d006      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 80011d0:	21e0      	movs	r1, #224	; 0xe0
 80011d2:	00c9      	lsls	r1, r1, #3
 80011d4:	430a      	orrs	r2, r1
 80011d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	22f0      	movs	r2, #240	; 0xf0
 80011de:	4393      	bics	r3, r2
 80011e0:	0019      	movs	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 80011e8:	430a      	orrs	r2, r1
 80011ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	d04c      	beq.n	8001290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	029b      	lsls	r3, r3, #10
 8001206:	4013      	ands	r3, r2
 8001208:	d120      	bne.n	800124c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e07a      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	049b      	lsls	r3, r3, #18
 800121e:	4013      	ands	r3, r2
 8001220:	d114      	bne.n	800124c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e06e      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 8001230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	4013      	ands	r3, r2
 8001238:	d108      	bne.n	800124c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e062      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	4b34      	ldr	r3, [pc, #208]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2202      	movs	r2, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e05b      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	4393      	bics	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001260:	f7ff fb42 	bl	80008e8 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001268:	e009      	b.n	800127e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126a:	f7ff fb3d 	bl	80008e8 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <HAL_RCC_ClockConfig+0x1a4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e042      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	220c      	movs	r2, #12
 8001284:	401a      	ands	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	429a      	cmp	r2, r3
 800128e:	d1ec      	bne.n	800126a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d211      	bcs.n	80012c2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_RCC_ClockConfig+0x19c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e020      	b.n	8001304 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2204      	movs	r2, #4
 80012c8:	4013      	ands	r3, r2
 80012ca:	d009      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_RCC_ClockConfig+0x1a8>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	0019      	movs	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 80012dc:	430a      	orrs	r2, r1
 80012de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012e0:	f000 f820 	bl	8001324 <HAL_RCC_GetSysClockFreq>
 80012e4:	0001      	movs	r1, r0
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_RCC_ClockConfig+0x1a0>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	220f      	movs	r2, #15
 80012ee:	4013      	ands	r3, r2
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_RCC_ClockConfig+0x1ac>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	000a      	movs	r2, r1
 80012f6:	40da      	lsrs	r2, r3
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1b0>)
 80012fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f7ff faad 	bl	800085c <HAL_InitTick>
  
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b004      	add	sp, #16
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40022000 	.word	0x40022000
 8001310:	40021000 	.word	0x40021000
 8001314:	00001388 	.word	0x00001388
 8001318:	fffff8ff 	.word	0xfffff8ff
 800131c:	080014c8 	.word	0x080014c8
 8001320:	20000000 	.word	0x20000000

08001324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b08f      	sub	sp, #60	; 0x3c
 8001328:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800132a:	2314      	movs	r3, #20
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	4a38      	ldr	r2, [pc, #224]	; (8001410 <HAL_RCC_GetSysClockFreq+0xec>)
 8001330:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001332:	c313      	stmia	r3!, {r0, r1, r4}
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4a36      	ldr	r2, [pc, #216]	; (8001414 <HAL_RCC_GetSysClockFreq+0xf0>)
 800133c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800133e:	c313      	stmia	r3!, {r0, r1, r4}
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_RCC_GetSysClockFreq+0xf4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	220c      	movs	r2, #12
 8001362:	4013      	ands	r3, r2
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d047      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001368:	d849      	bhi.n	80013fe <HAL_RCC_GetSysClockFreq+0xda>
 800136a:	2b04      	cmp	r3, #4
 800136c:	d002      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x50>
 800136e:	2b08      	cmp	r3, #8
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x56>
 8001372:	e044      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001378:	e044      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	220f      	movs	r2, #15
 8001380:	4013      	ands	r3, r2
 8001382:	2214      	movs	r2, #20
 8001384:	18ba      	adds	r2, r7, r2
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_RCC_GetSysClockFreq+0xf4>)
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	220f      	movs	r2, #15
 8001390:	4013      	ands	r3, r2
 8001392:	1d3a      	adds	r2, r7, #4
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	025b      	lsls	r3, r3, #9
 800139e:	401a      	ands	r2, r3
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	025b      	lsls	r3, r3, #9
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d109      	bne.n	80013bc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013aa:	481c      	ldr	r0, [pc, #112]	; (800141c <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ac:	f7fe feaa 	bl	8000104 <__udivsi3>
 80013b0:	0003      	movs	r3, r0
 80013b2:	001a      	movs	r2, r3
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	4353      	muls	r3, r2
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
 80013ba:	e01a      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80013bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013be:	23c0      	movs	r3, #192	; 0xc0
 80013c0:	025b      	lsls	r3, r3, #9
 80013c2:	401a      	ands	r2, r3
 80013c4:	23c0      	movs	r3, #192	; 0xc0
 80013c6:	025b      	lsls	r3, r3, #9
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d109      	bne.n	80013e0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <HAL_RCC_GetSysClockFreq+0xfc>)
 80013d0:	f7fe fe98 	bl	8000104 <__udivsi3>
 80013d4:	0003      	movs	r3, r0
 80013d6:	001a      	movs	r2, r3
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	4353      	muls	r3, r2
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
 80013de:	e008      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <HAL_RCC_GetSysClockFreq+0xf8>)
 80013e4:	f7fe fe8e 	bl	8000104 <__udivsi3>
 80013e8:	0003      	movs	r3, r0
 80013ea:	001a      	movs	r2, r3
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	4353      	muls	r3, r2
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80013f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013f6:	e005      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_GetSysClockFreq+0xfc>)
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013fc:	e002      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001402:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b00f      	add	sp, #60	; 0x3c
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	080014a8 	.word	0x080014a8
 8001414:	080014b8 	.word	0x080014b8
 8001418:	40021000 	.word	0x40021000
 800141c:	007a1200 	.word	0x007a1200
 8001420:	02dc6c00 	.word	0x02dc6c00

08001424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <HAL_RCC_GetHCLKFreq+0x10>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	20000000 	.word	0x20000000

08001438 <__libc_init_array>:
 8001438:	b570      	push	{r4, r5, r6, lr}
 800143a:	2600      	movs	r6, #0
 800143c:	4d0c      	ldr	r5, [pc, #48]	; (8001470 <__libc_init_array+0x38>)
 800143e:	4c0d      	ldr	r4, [pc, #52]	; (8001474 <__libc_init_array+0x3c>)
 8001440:	1b64      	subs	r4, r4, r5
 8001442:	10a4      	asrs	r4, r4, #2
 8001444:	42a6      	cmp	r6, r4
 8001446:	d109      	bne.n	800145c <__libc_init_array+0x24>
 8001448:	2600      	movs	r6, #0
 800144a:	f000 f821 	bl	8001490 <_init>
 800144e:	4d0a      	ldr	r5, [pc, #40]	; (8001478 <__libc_init_array+0x40>)
 8001450:	4c0a      	ldr	r4, [pc, #40]	; (800147c <__libc_init_array+0x44>)
 8001452:	1b64      	subs	r4, r4, r5
 8001454:	10a4      	asrs	r4, r4, #2
 8001456:	42a6      	cmp	r6, r4
 8001458:	d105      	bne.n	8001466 <__libc_init_array+0x2e>
 800145a:	bd70      	pop	{r4, r5, r6, pc}
 800145c:	00b3      	lsls	r3, r6, #2
 800145e:	58eb      	ldr	r3, [r5, r3]
 8001460:	4798      	blx	r3
 8001462:	3601      	adds	r6, #1
 8001464:	e7ee      	b.n	8001444 <__libc_init_array+0xc>
 8001466:	00b3      	lsls	r3, r6, #2
 8001468:	58eb      	ldr	r3, [r5, r3]
 800146a:	4798      	blx	r3
 800146c:	3601      	adds	r6, #1
 800146e:	e7f2      	b.n	8001456 <__libc_init_array+0x1e>
 8001470:	080014d8 	.word	0x080014d8
 8001474:	080014d8 	.word	0x080014d8
 8001478:	080014d8 	.word	0x080014d8
 800147c:	080014dc 	.word	0x080014dc

08001480 <memset>:
 8001480:	0003      	movs	r3, r0
 8001482:	1882      	adds	r2, r0, r2
 8001484:	4293      	cmp	r3, r2
 8001486:	d100      	bne.n	800148a <memset+0xa>
 8001488:	4770      	bx	lr
 800148a:	7019      	strb	r1, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	e7f9      	b.n	8001484 <memset+0x4>

08001490 <_init>:
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001496:	bc08      	pop	{r3}
 8001498:	469e      	mov	lr, r3
 800149a:	4770      	bx	lr

0800149c <_fini>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a2:	bc08      	pop	{r3}
 80014a4:	469e      	mov	lr, r3
 80014a6:	4770      	bx	lr
